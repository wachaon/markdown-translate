{
  "{96B5FE25-335E-43FD-93A5-924BB6A6F435}": {
    "source": "{\n  \"name\": \"markdown-translate\",\n  \"version\": \"0.1.0\",\n  \"description\": \"This library translates markdown using google apps script and wes\",\n  \"main\": \"index.mjs\",\n  \"type\": \"module\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/markdown-translate.git\"\n  },\n  \"keywords\": [\n    \"translate\",\n    \"markdown\",\n    \"gas\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/markdown-translate/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/markdown-translate#readme\",\n  \"dependencies\": {\n    \"rehype\": \"^11.0.0\",\n    \"rehype-parse\": \"^8.0.4\",\n    \"rehype-remark\": \"^8.1.1\",\n    \"rehype-stringify\": \"^9.0.3\",\n    \"remark\": \"^12.0.1\",\n    \"remark-gfm\": \"^3.0.1\",\n    \"remark-parse\": \"^10.0.2\",\n    \"remark-rehype\": \"^7.0.0\",\n    \"remark-stringify\": \"^10.0.3\",\n    \"unified\": \"^9.2.2\",\n    \"unist-builder\": \"^2.0.3\",\n    \"unist-util-inspect\": \"^6.0.1\",\n    \"unist-util-visit\": \"^2.0.3\",\n    \"vfile\": \"^4.2.0\"\n  }\n}",
    "mapping": {},
    "path": "{markdown-translate}/package.json"
  },
  "{6FA6B084-335B-4898-A6CF-1F85B2965C91}": {
    "source": "// build-ins\r\nimport { readFileSync, writeFileSync, existsFileSync } from 'filesystem'\r\nimport { resolve, basename, extname, dirname } from 'pathname'\r\nimport { LF, CR, NONE } from 'text'\r\nimport pipe from 'pipe'\r\nimport { greenBright, redBraight, gray, green, clear } from 'ansi'\r\n\r\n// unified\r\nimport unified from 'unified'\r\nimport remarkParse from 'remark-parse'\r\nimport gfm from 'remark-gfm'\r\nimport remarkRehype from 'remark-rehype'\r\nimport rehypeStringify from 'rehype-stringify'\r\nimport remarkStringify from 'remark-stringify'\r\nimport rephypeParse from 'rehype-parse'\r\nimport rehypeRemark from 'rehype-remark'\r\nimport visit from 'unist-util-visit'\r\n// import inspect from 'unist-util-inspect'\r\n\r\n// wes modules\r\nimport generator from 'translate'\r\n\r\nconst AUTO = 'auto'\r\n\r\n// main\r\nexport default function markdonw_translate(api, options = {}) {\r\n\r\n    // 設定\r\n    const Source = 'src' in options ? options.src : resolve(process.cwd(), 'README.md')\r\n    const Languages = 'langs' in options ? options.langs : ['en']\r\n    const Origin = options.origin\r\n    const Destination = 'dist' in options ? options.dist : dirname(Source)\r\n    const Cache = 'cache' in options ? options.cache : resolve(Destination, 'cache.json')\r\n    const Callback = 'callback' in options ? options.callback : (md) => md\r\n\r\n    // ベースとなる README を取得\r\n    const ReadmeMd = readFileSync(Source, AUTO)\r\n    const ReadMeMdAst = fromMarkdown(ReadmeMd)\r\n\r\n    // キャッシュ(翻訳済みデータ)の取得\r\n    const CacheJson = existsFileSync(Cache) ? JSON.parse(readFileSync(Cache, 'UTF-8')) : {}\r\n\r\n    // 翻訳処理\r\n    let paragraphs\r\n    try {\r\n        // README を段落ごとに分割して、処理をしていく\r\n        paragraphs = ReadMeMdAst.children.map(function ReadMeMdAst_children_map(child) {\r\n            // 段落の取得\r\n            const token = toMarkdown(child)\r\n\r\n            // リザルトの定義\r\n            const res = {\r\n                content: token\r\n            }\r\n\r\n            // キャッシュがあれば使用する\r\n            if (token in CacheJson) return CacheJson[token]\r\n\r\n            // コメントはエスケープする\r\n            if (child.type === 'html' && child.value.startsWith('<!--')) return res\r\n\r\n            // `code` は翻訳しない\r\n            if (child.type === 'code') return res\r\n\r\n            // キャッシュがあれば利用し、なければ翻訳する\r\n            res.translated = token in CacheJson ? CacheJson[token].translated : {}\r\n            console.log('%S%S%S >>> %S', greenBright, token.trim(), gray, clear)\r\n\r\n            // 翻訳とリンクの埋め込み\r\n            Languages.forEach(function (lang) {\r\n                pipe()\r\n                    .use(trim)\r\n                    .use(fromMarkdown)\r\n                    .use(toHast)\r\n                    .use(give)\r\n                    .use(toHtml)\r\n                    .use(trans, { target: lang, source: Origin, contentType: 'html' })\r\n                    .use(fromHtml)\r\n                    .use(toMdast)\r\n                    .use(toMarkdown)\r\n                    .process(token, (err, contents) => {\r\n                        if (err) return console.error(err)\r\n                        console.log('%s %s=>%s\\n%s', lang, gray, green, contents)\r\n                        res.translated[lang] = contents\r\n                    })\r\n            })\r\n            CacheJson[token] = res\r\n            return res\r\n        })\r\n\r\n    } catch (e) {\r\n        // キャッシュを保存\r\n        console.log(redBraight, e.stack)\r\n        console.log(writeFileSync(Cache, JSON.stringify(CacheJson, null, 4), 'UTF-8'))\r\n    }\r\n\r\n    // キャッシュから不要なデータを削除\r\n    Object.keys(CacheJson).forEach(key => {\r\n        const flag = paragraphs.every(paragraph => {\r\n            return paragraph.content !== key\r\n        })\r\n        if (flag) delete CacheJson[key]\r\n    })\r\n\r\n    // キャッシュを保存\r\n    console.log(writeFileSync(Cache, JSON.stringify(CacheJson, null, 4), 'UTF-8'))\r\n\r\n\r\n    // 各言語別の README を生成し、コールバックを適用後に保存\r\n    Languages.forEach(lang => {\r\n        let translated_markdown = paragraphs.map(paragraph => {\r\n            return 'translated' in paragraph ? paragraph.translated[lang] : paragraph.content\r\n        }).join(LF)\r\n\r\n        translated_markdown = Callback(translated_markdown)\r\n        console.log(writeFileSync(genOutputSpec(lang), translated_markdown, 'UTF-8'))\r\n    })\r\n\r\n    // util\r\n    /**\r\n     * genOutputSpec - 出力ファイルのパスを生成\r\n     * @param {string} lang\r\n     * @returns {string} ファイルパス\r\n     */\r\n    function genOutputSpec(lang) {\r\n        return resolve(Destination, `${basename(Source)}.${lang}${extname(Source)}`)\r\n    }\r\n\r\n    /**\r\n     * translate\r\n     * @param {string} content - markdown\r\n     * @param {translate_options} options - 翻訳オプション\r\n     */\r\n    function trans(content, options) {\r\n        return generator(api)(content, options)\r\n    }\r\n\r\n}\r\n\r\n// util\r\n\r\n/**\r\n * @typedef {object} tree\r\n * @prop {array} children\r\n */\r\n\r\n/**\r\n * @typedef {tree} mdast\r\n */\r\n\r\n/**\r\n * @typedef {tree} hast\r\n */\r\n\r\n/**\r\n * *markdown* を *mdast* に変換\r\n * @param {string} markdown - *markdown*\r\n * @returns {mdast} *mdast*\r\n */\r\nfunction fromMarkdown(markdown) {\r\n    return unified()\r\n        .use(remarkParse)\r\n        .use(gfm)\r\n        .parse(markdown)\r\n}\r\n\r\n/**\r\n * *html* を *hast* に変換\r\n * @param {string} html\r\n * @returns {hast} *hast*\r\n */\r\nfunction fromHtml(html) {\r\n    return unified()\r\n        .use(rephypeParse)\r\n        .parse(html)\r\n}\r\n\r\n/**\r\n * *mdast* を *hast* に変換\r\n * @param {mdast} mdast - *markdonw* の 抽象構文木\r\n * @returns {hast} *hast*\r\n */\r\nfunction toHast(mdast) {\r\n    return mdast.children[0].type === 'html' ?\r\n        fromHtml(mdast.children[0].value) :\r\n        unified()\r\n            .use(remarkRehype)\r\n            .use(gfm)\r\n            .runSync(mdast)\r\n}\r\n\r\n/**\r\n * *hast* を *html* に変換\r\n * @param {hast} hast - *html* の 抽象構文木\r\n * @returns {string} *html*\r\n */\r\nfunction toHtml(hast) {\r\n    return unified()\r\n        .use(rehypeStringify)\r\n        .stringify(hast)\r\n}\r\n\r\n/**\r\n * *mdast* を *markdown* に変換\r\n * @param {mdast} mdast - *html* の 抽象構文木\r\n * @returns {string} *markdown*\r\n */\r\nfunction toMarkdown(mdast) {\r\n    return unified()\r\n        .use(remarkStringify)\r\n        .use(gfm)\r\n        .stringify(mdast)\r\n}\r\n\r\n/**\r\n * *hast* を *mdast* に変換\r\n * @param {hast} hast\r\n * @returns {mdast} *mdast*\r\n */\r\nfunction toMdast(hast) {\r\n    return unified()\r\n        .use(rehypeRemark)\r\n        .runSync(hast)\r\n}\r\n\r\n/**\r\n * `pipe` のチェーン中のデータ状態をコンソールに表示する\r\n * @param {*} data\r\n * @returns {*} data\r\n */\r\nfunction log(data, message = '') {\r\n    if (data == null) console.warn('no data')\r\n    console.log('%S => %O', message, data)\r\n    return data\r\n}\r\n\r\n/**\r\n * text の余分な改行を削除する\r\n * @param {string} text\r\n * @returns {string}\r\n */\r\nfunction trim(text) {\r\n    const res = text.split(CR).join(NONE)\r\n    return res\r\n}\r\n\r\n/**\r\n * hast のノードをトラバースして、`em` と `code` に 属性 `translate = \"no\"` を付与する\r\n * @param {*} tree\r\n * @returns\r\n */\r\nfunction give(tree) {\r\n    visit(tree, (node, index, parent) => {\r\n        if (node.tagName === 'em' || node.tagName === 'code') node.properties.translate = 'no'\r\n    })\r\n    return tree\r\n}\r\n",
    "mapping": {
      "unified": "{A5883848-4CAE-40C2-BDC0-2E89F532EFAF}",
      "remark-parse": "{F4B6AF92-938F-4D2B-B5AA-6CA834E96476}",
      "remark-gfm": "{449741A4-2CBC-4E02-9185-9501DF84BC89}",
      "remark-rehype": "{85AE91F3-4118-4741-9FA8-50CAF49B8219}",
      "rehype-stringify": "{E771E0AC-1242-40C5-AE71-6C1999E01B2C}",
      "remark-stringify": "{A73F6CAA-6284-45A7-A0D6-41CF1DF136D9}",
      "rehype-parse": "{BD2284A4-A56F-4F40-91A1-0AB1412E6EAB}",
      "rehype-remark": "{1603FE96-28FB-4F91-B2EB-D076CDCEA4A9}",
      "translate": "{4670A633-2F0A-4DB7-ADF1-C90EEE30E006}"
    },
    "path": "{markdown-translate}/index.mjs"
  },
  "{A5883848-4CAE-40C2-BDC0-2E89F532EFAF}": {
    "source": "'use strict'\n\nvar bail = require('bail')\nvar buffer = require('is-buffer')\nvar extend = require('extend')\nvar plain = require('is-plain-obj')\nvar trough = require('trough')\nvar vfile = require('vfile')\n\n// Expose a frozen processor.\nmodule.exports = unified().freeze()\n\nvar slice = [].slice\nvar own = {}.hasOwnProperty\n\n// Process pipeline.\nvar pipeline = trough()\n  .use(pipelineParse)\n  .use(pipelineRun)\n  .use(pipelineStringify)\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file)\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done)\n\n  function done(error, tree, file) {\n    if (error) {\n      next(error)\n    } else {\n      ctx.tree = tree\n      ctx.file = file\n      next()\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  var result = p.stringify(ctx.tree, ctx.file)\n\n  if (result === undefined || result === null) {\n    // Empty.\n  } else if (typeof result === 'string' || buffer(result)) {\n    if ('value' in ctx.file) {\n      ctx.file.value = result\n    }\n\n    ctx.file.contents = result\n  } else {\n    ctx.file.result = result\n  }\n}\n\n// Function to create the first processor.\nfunction unified() {\n  var attachers = []\n  var transformers = trough()\n  var namespace = {}\n  var freezeIndex = -1\n  var frozen\n\n  // Data management.\n  processor.data = data\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  processor.run = run\n  processor.runSync = runSync\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  function processor() {\n    var destination = unified()\n    var index = -1\n\n    while (++index < attachers.length) {\n      destination.use.apply(null, attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  // Freeze: used to signal a processor that has finished configuration.\n  //\n  // For example, take unified itself: it’s frozen.\n  // Plugins should not be added to it.\n  // Rather, it should be extended, by invoking it, before modifying it.\n  //\n  // In essence, always invoke this when exporting a processor.\n  function freeze() {\n    var values\n    var transformer\n\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex]\n\n      if (values[1] === false) {\n        continue\n      }\n\n      if (values[1] === true) {\n        values[1] = undefined\n      }\n\n      transformer = values[0].apply(processor, values.slice(1))\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Infinity\n\n    return processor\n  }\n\n  // Data management.\n  // Getter / setter for processor-specific informtion.\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  // Plugin management.\n  //\n  // Pass it:\n  // *   an attacher and options,\n  // *   a preset,\n  // *   a list of presets, attachers, and arguments (list of attachers and\n  //     options).\n  function use(value) {\n    var settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin.apply(null, arguments)\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings)\n      }\n    }\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    function addList(plugins) {\n      var index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        while (++index < plugins.length) {\n          add(plugins[index])\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin)\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        attachers.push(slice.call(arguments))\n      }\n    }\n  }\n\n  function find(plugin) {\n    var index = -1\n\n    while (++index < attachers.length) {\n      if (attachers[index][0] === plugin) {\n        return attachers[index]\n      }\n    }\n  }\n\n  // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor.\n  function parse(doc) {\n    var file = vfile(doc)\n    var Parser\n\n    freeze()\n    Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      return new Parser(String(file), file).parse()\n    }\n\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), async.\n  function run(node, file, cb) {\n    assertNode(node)\n    freeze()\n\n    if (!cb && typeof file === 'function') {\n      cb = file\n      file = null\n    }\n\n    if (!cb) {\n      return new Promise(executor)\n    }\n\n    executor(null, cb)\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done)\n\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          cb(null, tree, file)\n        }\n      }\n    }\n  }\n\n  // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), sync.\n  function runSync(node, file) {\n    var result\n    var complete\n\n    run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    return result\n\n    function done(error, tree) {\n      complete = true\n      result = tree\n      bail(error)\n    }\n  }\n\n  // Stringify a unist node representation of a file (in string or vfile\n  // representation) into a string using the `Compiler` on the processor.\n  function stringify(node, doc) {\n    var file = vfile(doc)\n    var Compiler\n\n    freeze()\n    Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      return new Compiler(node, file).compile()\n    }\n\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor, then run transforms on that node, and\n  // compile the resulting node using the `Compiler` on the processor, and\n  // store that result on the vfile.\n  function process(doc, cb) {\n    freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!cb) {\n      return new Promise(executor)\n    }\n\n    executor(null, cb)\n\n    function executor(resolve, reject) {\n      var file = vfile(doc)\n\n      pipeline.run(processor, {file: file}, done)\n\n      function done(error) {\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          cb(null, file)\n        }\n      }\n    }\n  }\n\n  // Process the given document (in string or vfile representation), sync.\n  function processSync(doc) {\n    var file\n    var complete\n\n    freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n    file = vfile(doc)\n\n    process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n// Check if `value` is a constructor.\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n// Check if `value` is an object with keys.\nfunction keys(value) {\n  var key\n  for (key in value) {\n    return true\n  }\n\n  return false\n}\n\n// Assert a parser is available.\nfunction assertParser(name, Parser) {\n  if (typeof Parser !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n// Assert a compiler is available.\nfunction assertCompiler(name, Compiler) {\n  if (typeof Compiler !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n// Assert the processor is not frozen.\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot invoke `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n// Assert `node` is a unist node.\nfunction assertNode(node) {\n  if (!node || typeof node.type !== 'string') {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n}\n\n// Assert that `complete` is `true`.\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n",
    "mapping": {
      "bail": "{DF3C4B3D-D01C-4FEC-93CB-476DA0920D2F}",
      "is-buffer": "{ED9DCE34-36E0-4FB7-A7F1-1288179EE0CD}",
      "extend": "{9EEF02C4-971B-4AA8-82E5-0292ED62EC87}",
      "is-plain-obj": "{538BBE4F-A284-4267-BE48-40991699C2AE}",
      "trough": "{9EFBC458-636D-4976-B2B7-67F5C44F2AA2}",
      "vfile": "{4BC4BA34-C0E0-4D9A-A706-DEF54E7C87B1}"
    },
    "path": "{markdown-translate}/node_modules/unified/index.js"
  },
  "{8B992437-189E-4A8F-A435-8FD2E5EF0A14}": {
    "source": "{\n  \"name\": \"unified\",\n  \"version\": \"9.2.2\",\n  \"description\": \"Interface for parsing, inspecting, transforming, and serializing content through syntax trees\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"process\",\n    \"parse\",\n    \"transform\",\n    \"compile\",\n    \"stringify\",\n    \"serialize\",\n    \"ast\",\n    \"cst\",\n    \"syntax\",\n    \"tree\",\n    \"content\",\n    \"rehype\",\n    \"retext\",\n    \"remark\"\n  ],\n  \"homepage\": \"https://unifiedjs.com\",\n  \"repository\": \"unifiedjs/unified\",\n  \"bugs\": \"https://github.com/unifiedjs/unified/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Junyoung Choi <fluke8259@gmail.com>\",\n    \"Hernan Rajchert <hrajchert@gmail.com>\",\n    \"Christian Murphy <christian.murphy.42@gmail.com>\",\n    \"Vse Mozhet Byt <vsemozhetbyt@gmail.com>\",\n    \"Richard Littauer <richard.littauer@gmail.com>\"\n  ],\n  \"types\": \"types/ts3.4/index.d.ts\",\n  \"typesVersions\": {\n    \">=4.0\": {\n      \"types/ts3.4/*\": [\n        \"types/ts4.0/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"types/ts3.4/index.d.ts\",\n    \"types/ts4.0/index.d.ts\",\n    \"index.js\",\n    \"lib\"\n  ],\n  \"dependencies\": {\n    \"bail\": \"^1.0.0\",\n    \"extend\": \"^3.0.0\",\n    \"is-buffer\": \"^2.0.0\",\n    \"is-plain-obj\": \"^2.0.0\",\n    \"trough\": \"^1.0.0\",\n    \"vfile\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"vfile5\": \"npm:vfile@5\",\n    \"browserify\": \"^17.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"dtslint\": \"^4.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^9.0.0\",\n    \"remark-preset-wooorm\": \"^8.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^3.0.0\",\n    \"xo\": \"^0.38.0\"\n  },\n  \"scripts\": {\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"build-bundle\": \"browserify index.js -s unified -o unified.js\",\n    \"build-mangle\": \"browserify index.js -s unified -p tinyify -o unified.min.js\",\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"c8 --check-coverage --lines 100 --functions 100 --branches 100 --reporter lcov tape test\",\n    \"test-types\": \"npm run test-types-3.4 && npm run test-types-4.0\",\n    \"test-types-3.4\": \"dtslint types/ts3.4\",\n    \"test-types-4.0\": \"dtslint types/ts4.0\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"guard-for-in\": \"off\",\n      \"no-unreachable-loop\": \"off\",\n      \"unicorn/prefer-number-properties\": \"off\",\n      \"unicorn/prefer-optional-catch-binding\": \"off\",\n      \"unicorn/prefer-reflect-apply\": \"off\",\n      \"unicorn/prefer-type-error\": \"off\"\n    },\n    \"ignores\": [\n      \"types\",\n      \"unified.js\"\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unified/package.json"
  },
  "{DF3C4B3D-D01C-4FEC-93CB-476DA0920D2F}": {
    "source": "'use strict'\n\nmodule.exports = bail\n\nfunction bail(err) {\n  if (err) {\n    throw err\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/bail/index.js"
  },
  "{7398B845-9CF4-4C62-9BF4-A0AF11536671}": {
    "source": "{\n  \"_from\": \"bail@^1.0.0\",\n  \"_id\": \"bail@1.0.5\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-xFbRxM1tahm08yHBP16MMjVUAvDaBMD38zsM9EMAUN61omwLmKlOpB/Zku5QkjZ8TZ4vn53pj+t518cH0S03RQ==\",\n  \"_location\": \"/bail\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"bail@^1.0.0\",\n    \"name\": \"bail\",\n    \"escapedName\": \"bail\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/unified\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/bail/-/bail-1.0.5.tgz\",\n  \"_shasum\": \"b6fa133404a392cbc1f8c4bf63f5953351e7a776\",\n  \"_spec\": \"bail@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\unified\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/bail/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Throw a given error\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/bail#readme\",\n  \"keywords\": [\n    \"fail\",\n    \"bail\",\n    \"throw\",\n    \"callback\",\n    \"error\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"bail\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/bail.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify index.js -s bail -o bail.js\",\n    \"build-mangle\": \"browserify index.js -s bail -p tinyify -o bail.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.5\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"bail.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/bail/package.json"
  },
  "{ED9DCE34-36E0-4FB7-A7F1-1288179EE0CD}": {
    "source": "/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/is-buffer/index.js"
  },
  "{1440E751-13CD-495C-890E-4B0F0EFDDEFF}": {
    "source": "{\n  \"_from\": \"is-buffer@^2.0.0\",\n  \"_id\": \"is-buffer@2.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Kq1rokWXOPXWuaMAqZiJW4XxsmD9zGx9q4aePabbn3qCRGedtH7Cm+zV8WETitMfu1wdh+Rvd6w5egwSngUX2A==\",\n  \"_location\": \"/is-buffer\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"is-buffer@^2.0.0\",\n    \"name\": \"is-buffer\",\n    \"escapedName\": \"is-buffer\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/unified\",\n    \"/vfile\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/is-buffer/-/is-buffer-2.0.4.tgz\",\n  \"_shasum\": \"3e572f23c8411a5cfd9557c849e3665e0b290623\",\n  \"_spec\": \"is-buffer@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\vfile\",\n  \"author\": {\n    \"name\": \"Feross Aboukhadijeh\",\n    \"email\": \"feross@feross.org\",\n    \"url\": \"https://feross.org\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/feross/is-buffer/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Determine if an object is a Buffer\",\n  \"devDependencies\": {\n    \"airtap\": \"^2.0.3\",\n    \"standard\": \"*\",\n    \"tape\": \"^4.11.0\"\n  },\n  \"engines\": {\n    \"node\": \">=4\"\n  },\n  \"homepage\": \"https://github.com/feross/is-buffer#readme\",\n  \"keywords\": [\n    \"arraybuffer\",\n    \"browser\",\n    \"browser buffer\",\n    \"browserify\",\n    \"buffer\",\n    \"buffers\",\n    \"core buffer\",\n    \"dataview\",\n    \"float32array\",\n    \"float64array\",\n    \"int16array\",\n    \"int32array\",\n    \"type\",\n    \"typed array\",\n    \"uint32array\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"is-buffer\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/feross/is-buffer.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && npm run test-node && npm run test-browser\",\n    \"test-browser\": \"airtap -- test/*.js\",\n    \"test-browser-local\": \"airtap --local -- test/*.js\",\n    \"test-node\": \"tape test/*.js\"\n  },\n  \"version\": \"2.0.4\"\n}\n",
    "path": "{markdown-translate}/node_modules/is-buffer/package.json"
  },
  "{9EEF02C4-971B-4AA8-82E5-0292ED62EC87}": {
    "source": "'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/extend/index.js"
  },
  "{2B8F3BE3-980D-4B90-9E5D-2F4425AAC30E}": {
    "source": "{\n  \"_from\": \"extend@^3.0.0\",\n  \"_id\": \"extend@3.0.2\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==\",\n  \"_location\": \"/extend\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"extend@^3.0.0\",\n    \"name\": \"extend\",\n    \"escapedName\": \"extend\",\n    \"rawSpec\": \"^3.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\",\n    \"/unified\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.2.tgz\",\n  \"_shasum\": \"f8b1136b4071fbd8eb140aff858b1019ec2915fa\",\n  \"_spec\": \"extend@^3.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\unified\",\n  \"author\": {\n    \"name\": \"Stefan Thomas\",\n    \"email\": \"justmoon@members.fsf.org\",\n    \"url\": \"http://www.justmoon.net\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/justmoon/node-extend/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Jordan Harband\",\n      \"url\": \"https://github.com/ljharb\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Port of jQuery.extend for node.js and the browser\",\n  \"devDependencies\": {\n    \"@ljharb/eslint-config\": \"^12.2.1\",\n    \"covert\": \"^1.1.0\",\n    \"eslint\": \"^4.19.1\",\n    \"jscs\": \"^3.0.7\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"homepage\": \"https://github.com/justmoon/node-extend#readme\",\n  \"keywords\": [\n    \"extend\",\n    \"clone\",\n    \"merge\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index\",\n  \"name\": \"extend\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/justmoon/node-extend.git\"\n  },\n  \"scripts\": {\n    \"coverage\": \"covert test/index.js\",\n    \"coverage-quiet\": \"covert test/index.js --quiet\",\n    \"eslint\": \"eslint *.js */*.js\",\n    \"jscs\": \"jscs *.js */*.js\",\n    \"lint\": \"npm run jscs && npm run eslint\",\n    \"posttest\": \"npm run coverage-quiet\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"npm run tests-only\",\n    \"tests-only\": \"node test\"\n  },\n  \"version\": \"3.0.2\"\n}\n",
    "path": "{markdown-translate}/node_modules/extend/package.json"
  },
  "{538BBE4F-A284-4267-BE48-40991699C2AE}": {
    "source": "'use strict';\n\nmodule.exports = value => {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/is-plain-obj/index.js"
  },
  "{1F9C3F10-B2E2-4529-BDDD-DC3F18F9853F}": {
    "source": "{\n  \"_from\": \"is-plain-obj@^2.0.0\",\n  \"_id\": \"is-plain-obj@2.1.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-YWnfyRwxL/+SsrWYfOpUtz5b3YD+nyfkHvjbcanzk8zgyO4ASD67uVMRt8k5bM4lLMDnXfriRhOpemw+NfT1eA==\",\n  \"_location\": \"/is-plain-obj\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"is-plain-obj@^2.0.0\",\n    \"name\": \"is-plain-obj\",\n    \"escapedName\": \"is-plain-obj\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/unified\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-2.1.0.tgz\",\n  \"_shasum\": \"45e42e37fccf1f40da8e5f76ee21515840c09287\",\n  \"_spec\": \"is-plain-obj@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\unified\",\n  \"author\": {\n    \"name\": \"Sindre Sorhus\",\n    \"email\": \"sindresorhus@gmail.com\",\n    \"url\": \"sindresorhus.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/sindresorhus/is-plain-obj/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"deprecated\": false,\n  \"description\": \"Check if a value is a plain object\",\n  \"devDependencies\": {\n    \"ava\": \"^1.4.1\",\n    \"tsd\": \"^0.7.2\",\n    \"xo\": \"^0.24.0\"\n  },\n  \"engines\": {\n    \"node\": \">=8\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\"\n  ],\n  \"homepage\": \"https://github.com/sindresorhus/is-plain-obj#readme\",\n  \"keywords\": [\n    \"object\",\n    \"is\",\n    \"check\",\n    \"test\",\n    \"type\",\n    \"plain\",\n    \"vanilla\",\n    \"pure\",\n    \"simple\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"is-plain-obj\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/sindresorhus/is-plain-obj.git\"\n  },\n  \"scripts\": {\n    \"test\": \"xo && ava && tsd\"\n  },\n  \"version\": \"2.1.0\"\n}\n",
    "path": "{markdown-translate}/node_modules/is-plain-obj/package.json"
  },
  "{9EFBC458-636D-4976-B2B7-67F5C44F2AA2}": {
    "source": "'use strict'\n\nvar wrap = require('./wrap.js')\n\nmodule.exports = trough\n\ntrough.wrap = wrap\n\nvar slice = [].slice\n\n// Create new middleware.\nfunction trough() {\n  var fns = []\n  var middleware = {}\n\n  middleware.run = run\n  middleware.use = use\n\n  return middleware\n\n  // Run `fns`.  Last argument must be a completion handler.\n  function run() {\n    var index = -1\n    var input = slice.call(arguments, 0, -1)\n    var done = arguments[arguments.length - 1]\n\n    if (typeof done !== 'function') {\n      throw new Error('Expected function as last argument, not ' + done)\n    }\n\n    next.apply(null, [null].concat(input))\n\n    // Run the next `fn`, if any.\n    function next(err) {\n      var fn = fns[++index]\n      var params = slice.call(arguments, 0)\n      var values = params.slice(1)\n      var length = input.length\n      var pos = -1\n\n      if (err) {\n        done(err)\n        return\n      }\n\n      // Copy non-nully input into values.\n      while (++pos < length) {\n        if (values[pos] === null || values[pos] === undefined) {\n          values[pos] = input[pos]\n        }\n      }\n\n      input = values\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next).apply(null, input)\n      } else {\n        done.apply(null, [null].concat(input))\n      }\n    }\n  }\n\n  // Add `fn` to the list.\n  function use(fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('Expected `fn` to be a function, not ' + fn)\n    }\n\n    fns.push(fn)\n\n    return middleware\n  }\n}\n",
    "mapping": {
      "./wrap.js": "{805A66AC-9169-4964-9E64-7DAB93BB88DB}"
    },
    "path": "{markdown-translate}/node_modules/trough/index.js"
  },
  "{2590F8E9-1A31-4603-8F29-B0F5108A2A81}": {
    "source": "{\n  \"_from\": \"trough@^1.0.0\",\n  \"_id\": \"trough@1.0.5\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-rvuRbTarPXmMb79SmzEp8aqXNKcK+y0XaB298IXueQ8I2PsrATcPBCSPyK/dDNa2iWOhKlfNnOjdAOTBU/nkFA==\",\n  \"_location\": \"/trough\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"trough@^1.0.0\",\n    \"name\": \"trough\",\n    \"escapedName\": \"trough\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/unified\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/trough/-/trough-1.0.5.tgz\",\n  \"_shasum\": \"b8b639cefad7d0bb2abd37d433ff8293efa5f406\",\n  \"_spec\": \"trough@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\unified\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/trough/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Middleware: a channel used to convey a liquid\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"wrap.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/trough#readme\",\n  \"keywords\": [\n    \"middleware\",\n    \"ware\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"trough\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/trough.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify index.js -s trough > trough.js\",\n    \"build-mangle\": \"browserify index.js -s trough -p tinyify > trough.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.5\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/prefer-reflect-apply\": \"off\",\n      \"unicorn/prefer-type-error\": \"off\",\n      \"guard-for-in\": \"off\"\n    },\n    \"ignores\": [\n      \"trough.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/trough/package.json"
  },
  "{805A66AC-9169-4964-9E64-7DAB93BB88DB}": {
    "source": "'use strict'\n\nvar slice = [].slice\n\nmodule.exports = wrap\n\n// Wrap `fn`.\n// Can be sync or async; return a promise, receive a completion handler, return\n// new values and errors.\nfunction wrap(fn, callback) {\n  var invoked\n\n  return wrapped\n\n  function wrapped() {\n    var params = slice.call(arguments, 0)\n    var callback = fn.length > params.length\n    var result\n\n    if (callback) {\n      params.push(done)\n    }\n\n    try {\n      result = fn.apply(null, params)\n    } catch (error) {\n      // Well, this is quite the pickle.\n      // `fn` received a callback and invoked it (thus continuing the pipeline),\n      // but later also threw an error.\n      // We’re not about to restart the pipeline again, so the only thing left\n      // to do is to throw the thing instead.\n      if (callback && invoked) {\n        throw error\n      }\n\n      return done(error)\n    }\n\n    if (!callback) {\n      if (result && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  // Invoke `next`, only once.\n  function done() {\n    if (!invoked) {\n      invoked = true\n\n      callback.apply(null, arguments)\n    }\n  }\n\n  // Invoke `done` with one value.\n  // Tracks if an error is passed, too.\n  function then(value) {\n    done(null, value)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/trough/wrap.js"
  },
  "{4BC4BA34-C0E0-4D9A-A706-DEF54E7C87B1}": {
    "source": "'use strict'\n\nvar VMessage = require('vfile-message')\nvar VFile = require('./core.js')\n\nmodule.exports = VFile\n\nvar proto = VFile.prototype\n\nproto.message = message\nproto.info = info\nproto.fail = fail\n\n// Create a message with `reason` at `position`.\n// When an error is passed in as `reason`, copies the stack.\nfunction message(reason, position, origin) {\n  var filePath = this.path\n  var message = new VMessage(reason, position, origin)\n\n  if (filePath) {\n    message.name = filePath + ':' + message.name\n    message.file = filePath\n  }\n\n  message.fatal = false\n\n  this.messages.push(message)\n\n  return message\n}\n\n// Fail: creates a vmessage, associates it with the file, and throws it.\nfunction fail() {\n  var message = this.message.apply(this, arguments)\n\n  message.fatal = true\n\n  throw message\n}\n\n// Info: creates a vmessage, associates it with the file, and marks the fatality\n// as null.\nfunction info() {\n  var message = this.message.apply(this, arguments)\n\n  message.fatal = null\n\n  return message\n}\n",
    "mapping": {
      "vfile-message": "{613EF898-E579-4A3B-881E-60273F9CC208}",
      "./core.js": "{D89D9F26-A9E9-40C2-B1C3-9E9A0643A2B2}"
    },
    "path": "{markdown-translate}/node_modules/vfile/index.js"
  },
  "{C9BCCBC4-1BD3-4414-A1ED-CFBA3CC743CC}": {
    "source": "{\n  \"_from\": \"vfile\",\n  \"_id\": \"vfile@4.2.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-a/alcwCvtuc8OX92rqqo7PflxiCgXRFjdyoGVuYV+qbgCb0GgZJRvIgCD4+U/Kl1yhaRsaTwksF88xbPyGsgpw==\",\n  \"_location\": \"/vfile\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"vfile\",\n    \"name\": \"vfile\",\n    \"escapedName\": \"vfile\",\n    \"rawSpec\": \"\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"latest\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\",\n    \"/hast-util-from-parse5\",\n    \"/unified\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/vfile/-/vfile-4.2.0.tgz\",\n  \"_shasum\": \"26c78ac92eb70816b01d4565e003b7e65a2a0e01\",\n  \"_spec\": \"vfile\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/vfile/vfile/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    },\n    {\n      \"name\": \"Brendan Abbott\",\n      \"email\": \"brendan.abbott@temando.com\"\n    },\n    {\n      \"name\": \"Denys Dovhan\",\n      \"email\": \"email@denysdovhan.com\"\n    },\n    {\n      \"name\": \"Kyle Mathews\",\n      \"email\": \"mathews.kyle@gmail.com\"\n    },\n    {\n      \"name\": \"Shinnosuke Watanabe\",\n      \"email\": \"snnskwtnb@gmail.com\"\n    },\n    {\n      \"name\": \"Sindre Sorhus\",\n      \"email\": \"sindresorhus@gmail.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"is-buffer\": \"^2.0.0\",\n    \"replace-ext\": \"1.0.0\",\n    \"unist-util-stringify-position\": \"^2.0.0\",\n    \"vfile-message\": \"^2.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"Virtual file format for text processing\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.32.0\"\n  },\n  \"files\": [\n    \"types/index.d.ts\",\n    \"core.js\",\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/vfile/vfile#readme\",\n  \"keywords\": [\n    \"vfile\",\n    \"virtual\",\n    \"file\",\n    \"text\",\n    \"processing\",\n    \"message\",\n    \"warning\",\n    \"error\",\n    \"remark\",\n    \"retext\",\n    \"rehype\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"vfile\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\",\n      [\n        \"toc\",\n        {\n          \"heading\": \"contents\"\n        }\n      ]\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/vfile/vfile.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s VFile > vfile.js\",\n    \"build-mangle\": \"browserify . -s VFile -p tinyify > vfile.min.js\",\n    \"format\": \"remark . -qfo && prettier . --write && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"4.2.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"types\",\n      \"vfile.js\"\n    ],\n    \"rules\": {\n      \"unicorn/prefer-includes\": \"off\",\n      \"unicorn/prefer-reflect-apply\": \"off\"\n    }\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/vfile/package.json"
  },
  "{613EF898-E579-4A3B-881E-60273F9CC208}": {
    "source": "'use strict'\n\nvar stringify = require('unist-util-stringify-position')\n\nmodule.exports = VMessage\n\n// Inherit from `Error#`.\nfunction VMessagePrototype() {}\nVMessagePrototype.prototype = Error.prototype\nVMessage.prototype = new VMessagePrototype()\n\n// Message properties.\nvar proto = VMessage.prototype\n\nproto.file = ''\nproto.name = ''\nproto.reason = ''\nproto.message = ''\nproto.stack = ''\nproto.fatal = null\nproto.column = null\nproto.line = null\n\n// Construct a new VMessage.\n//\n// Note: We cannot invoke `Error` on the created context, as that adds readonly\n// `line` and `column` attributes on Safari 9, thus throwing and failing the\n// data.\nfunction VMessage(reason, position, origin) {\n  var parts\n  var range\n  var location\n\n  if (typeof position === 'string') {\n    origin = position\n    position = null\n  }\n\n  parts = parseOrigin(origin)\n  range = stringify(position) || '1:1'\n\n  location = {\n    start: {line: null, column: null},\n    end: {line: null, column: null}\n  }\n\n  // Node.\n  if (position && position.position) {\n    position = position.position\n  }\n\n  if (position) {\n    // Position.\n    if (position.start) {\n      location = position\n      position = position.start\n    } else {\n      // Point.\n      location.start = position\n    }\n  }\n\n  if (reason.stack) {\n    this.stack = reason.stack\n    reason = reason.message\n  }\n\n  this.message = reason\n  this.name = range\n  this.reason = reason\n  this.line = position ? position.line : null\n  this.column = position ? position.column : null\n  this.location = location\n  this.source = parts[0]\n  this.ruleId = parts[1]\n}\n\nfunction parseOrigin(origin) {\n  var result = [null, null]\n  var index\n\n  if (typeof origin === 'string') {\n    index = origin.indexOf(':')\n\n    if (index === -1) {\n      result[1] = origin\n    } else {\n      result[0] = origin.slice(0, index)\n      result[1] = origin.slice(index + 1)\n    }\n  }\n\n  return result\n}\n",
    "mapping": {
      "unist-util-stringify-position": "{2E4FE3AE-702C-4175-B608-677D30D02B91}"
    },
    "path": "{markdown-translate}/node_modules/vfile-message/index.js"
  },
  "{F7947A00-0376-44AA-AB0A-9F8143D14F38}": {
    "source": "{\n  \"_from\": \"vfile-message@^2.0.0\",\n  \"_id\": \"vfile-message@2.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-DjssxRGkMvifUOJre00juHoP9DPWuzjxKuMDrhNbk2TdaYYBNMStsNhEOt3idrtI12VQYM/1+iM0KOzXi4pxwQ==\",\n  \"_location\": \"/vfile-message\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"vfile-message@^2.0.0\",\n    \"name\": \"vfile-message\",\n    \"escapedName\": \"vfile-message\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/vfile\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/vfile-message/-/vfile-message-2.0.4.tgz\",\n  \"_shasum\": \"5b43b88171d409eae58477d13f23dd41d52c371a\",\n  \"_spec\": \"vfile-message@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\vfile\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/vfile/vfile-message/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-stringify-position\": \"^2.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"vfile utility to create a virtual message\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.28.0\"\n  },\n  \"files\": [\n    \"types/index.d.ts\",\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/vfile/vfile-message#readme\",\n  \"keywords\": [\n    \"vfile\",\n    \"vfile-util\",\n    \"util\",\n    \"utility\",\n    \"virtual\",\n    \"file\",\n    \"message\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"vfile-message\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/vfile/vfile-message.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s vfileMessage > vfile-message.js\",\n    \"build-mangle\": \"browserify . -s vfileMessage -p tinyify > vfile-message.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.{js,ts}\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"2.0.4\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"@typescript-eslint/member-ordering\": \"off\"\n    },\n    \"ignores\": [\n      \"types\",\n      \"vfile-message.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/vfile-message/package.json"
  },
  "{2E4FE3AE-702C-4175-B608-677D30D02B91}": {
    "source": "'use strict'\n\nvar own = {}.hasOwnProperty\n\nmodule.exports = stringify\n\nfunction stringify(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    return position(value.position)\n  }\n\n  // Position.\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    return position(value)\n  }\n\n  // Point.\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\nfunction point(point) {\n  if (!point || typeof point !== 'object') {\n    point = {}\n  }\n\n  return index(point.line) + ':' + index(point.column)\n}\n\nfunction position(pos) {\n  if (!pos || typeof pos !== 'object') {\n    pos = {}\n  }\n\n  return point(pos.start) + '-' + point(pos.end)\n}\n\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-stringify-position/index.js"
  },
  "{86193751-AE31-4A68-A385-D0CED1F31518}": {
    "source": "{\n  \"_from\": \"unist-util-stringify-position@^2.0.0\",\n  \"_id\": \"unist-util-stringify-position@2.0.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-3faScn5I+hy9VleOq/qNbAd6pAx7iH5jYBMS9I1HgQVijz/4mv5Bvw5iw1sC/90CODiKo81G/ps8AJrISn687g==\",\n  \"_location\": \"/unist-util-stringify-position\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-stringify-position@^2.0.0\",\n    \"name\": \"unist-util-stringify-position\",\n    \"escapedName\": \"unist-util-stringify-position\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/vfile\",\n    \"/vfile-message\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-stringify-position/-/unist-util-stringify-position-2.0.3.tgz\",\n  \"_shasum\": \"cce3bfa1cdf85ba7375d1d5b17bdc4cada9bd9da\",\n  \"_spec\": \"unist-util-stringify-position@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\vfile\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-stringify-position/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.2\"\n  },\n  \"deprecated\": false,\n  \"description\": \"unist utility to serialize a node, position, or point as a human readable location\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"typescript\": \"^3.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"types/index.d.ts\",\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-stringify-position#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"position\",\n    \"location\",\n    \"point\",\n    \"node\",\n    \"stringify\",\n    \"tostring\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-stringify-position\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-stringify-position.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilStringifyPosition > unist-util-stringify-position.js\",\n    \"build-mangle\": \"browserify . -s unistUtilStringifyPosition -p tinyify > unist-util-stringify-position.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.{js,ts}\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"2.0.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"unist-util-stringify-position.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-stringify-position/package.json"
  },
  "{D89D9F26-A9E9-40C2-B1C3-9E9A0643A2B2}": {
    "source": "'use strict'\n\nvar path = require('pathname')\nvar replace = require('replace-ext')\nvar buffer = require('is-buffer')\n\nmodule.exports = VFile\n\nvar own = {}.hasOwnProperty\nvar proto = VFile.prototype\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nproto.toString = toString\n\n// Access full path (`~/index.min.js`).\nObject.defineProperty(proto, 'path', {get: getPath, set: setPath})\n\n// Access parent path (`~`).\nObject.defineProperty(proto, 'dirname', {get: getDirname, set: setDirname})\n\n// Access basename (`index.min.js`).\nObject.defineProperty(proto, 'basename', {get: getBasename, set: setBasename})\n\n// Access extname (`.js`).\nObject.defineProperty(proto, 'extname', {get: getExtname, set: setExtname})\n\n// Access stem (`index.min`).\nObject.defineProperty(proto, 'stem', {get: getStem, set: setStem})\n\n// Construct a new file.\nfunction VFile(options) {\n  var prop\n  var index\n  var length\n\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options}\n  } else if ('message' in options && 'messages' in options) {\n    return options\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options)\n  }\n\n  this.data = {}\n  this.messages = []\n  this.history = []\n  this.cwd = process.cwd()\n\n  // Set path related properties in the correct order.\n  index = -1\n  length = order.length\n\n  while (++index < length) {\n    prop = order[index]\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop]\n    }\n  }\n\n  // Set non-path related properties.\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop]\n    }\n  }\n}\n\nfunction getPath() {\n  return this.history[this.history.length - 1]\n}\n\nfunction setPath(path) {\n  assertNonEmpty(path, 'path')\n\n  if (path !== this.path) {\n    this.history.push(path)\n  }\n}\n\nfunction getDirname() {\n  return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n}\n\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname')\n  this.path = path.join(dirname || '', this.basename)\n}\n\nfunction getBasename() {\n  return typeof this.path === 'string' ? path.basename(this.path) : undefined\n}\n\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename')\n  assertPart(basename, 'basename')\n  this.path = path.join(this.dirname || '', basename)\n}\n\nfunction getExtname() {\n  return typeof this.path === 'string' ? path.extname(this.path) : undefined\n}\n\nfunction setExtname(extname) {\n  var ext = extname || ''\n\n  assertPart(ext, 'extname')\n  assertPath(this.path, 'extname')\n\n  if (ext) {\n    if (ext.charAt(0) !== '.') {\n      throw new Error('`extname` must start with `.`')\n    }\n\n    if (ext.indexOf('.', 1) !== -1) {\n      throw new Error('`extname` cannot contain multiple dots')\n    }\n  }\n\n  this.path = replace(this.path, ext)\n}\n\nfunction getStem() {\n  return typeof this.path === 'string'\n    ? path.basename(this.path, this.extname)\n    : undefined\n}\n\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem')\n  assertPart(stem, 'stem')\n  this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n}\n\n// Get the value of the file.\nfunction toString(encoding) {\n  var value = this.contents || ''\n  return buffer(value) ? value.toString(encoding) : String(value)\n}\n\n// Assert that `part` is not a path (i.e., does not contain `path.sep`).\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n// Assert that `part` is not empty.\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n// Assert `path` exists.\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n",
    "mapping": {
      "replace-ext": "{DEA0B3FE-A837-42F6-81D0-0AFA54E46284}"
    },
    "path": "{markdown-translate}/node_modules/vfile/core.js"
  },
  "{DEA0B3FE-A837-42F6-81D0-0AFA54E46284}": {
    "source": "'use strict';\n\nvar path = require('pathname');\n\nfunction replaceExt(npath, ext) {\n  if (typeof npath !== 'string') {\n    return npath;\n  }\n\n  if (npath.length === 0) {\n    return npath;\n  }\n\n  var nFileName = path.basename(npath, path.extname(npath)) + ext;\n  return path.join(path.dirname(npath), nFileName);\n}\n\nmodule.exports = replaceExt;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/replace-ext/index.js"
  },
  "{B2327905-C048-4321-82BD-AC46517B5588}": {
    "source": "{\n  \"_from\": \"replace-ext@1.0.0\",\n  \"_id\": \"replace-ext@1.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha1-3mMSg3P8v3w8z6TeWkgMRaZ5WOs=\",\n  \"_location\": \"/replace-ext\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"version\",\n    \"registry\": true,\n    \"raw\": \"replace-ext@1.0.0\",\n    \"name\": \"replace-ext\",\n    \"escapedName\": \"replace-ext\",\n    \"rawSpec\": \"1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/vfile\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/replace-ext/-/replace-ext-1.0.0.tgz\",\n  \"_shasum\": \"de63128373fcbf7c3ccfa4de5a480c45a67958eb\",\n  \"_spec\": \"replace-ext@1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\vfile\",\n  \"author\": {\n    \"name\": \"Gulp Team\",\n    \"email\": \"team@gulpjs.com\",\n    \"url\": \"http://gulpjs.com/\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/gulpjs/replace-ext/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Eric Schoffstall\",\n      \"email\": \"yo@contra.io\"\n    },\n    {\n      \"name\": \"Blaine Bublitz\",\n      \"email\": \"blaine.bublitz@gmail.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Replaces a file extension with another one\",\n  \"devDependencies\": {\n    \"eslint\": \"^1.10.3\",\n    \"eslint-config-gulp\": \"^2.0.0\",\n    \"expect\": \"^1.16.0\",\n    \"istanbul\": \"^0.4.3\",\n    \"istanbul-coveralls\": \"^1.0.3\",\n    \"jscs\": \"^2.3.5\",\n    \"jscs-preset-gulp\": \"^1.0.0\",\n    \"mocha\": \"^2.4.5\"\n  },\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  },\n  \"files\": [\n    \"LICENSE\",\n    \"index.js\"\n  ],\n  \"homepage\": \"https://github.com/gulpjs/replace-ext#readme\",\n  \"keywords\": [\n    \"gulp\",\n    \"extensions\",\n    \"filepath\",\n    \"basename\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"replace-ext\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/gulpjs/replace-ext.git\"\n  },\n  \"scripts\": {\n    \"cover\": \"istanbul cover node_modules/mocha/bin/_mocha --report lcovonly\",\n    \"coveralls\": \"npm run cover && istanbul-coveralls\",\n    \"lint\": \"eslint . && jscs index.js test/\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"mocha --async-only\"\n  },\n  \"version\": \"1.0.0\"\n}\n",
    "path": "{markdown-translate}/node_modules/replace-ext/package.json"
  },
  "{F4B6AF92-938F-4D2B-B5AA-6CA834E96476}": {
    "source": "export {default} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{A1A8198E-D815-4916-8AB4-7B021B1A6F4E}"
    },
    "path": "{markdown-translate}/node_modules/remark-parse/index.js"
  },
  "{15239AD7-AA8E-42B4-9030-DB62203C2AB6}": {
    "source": "{\n  \"name\": \"remark-parse\",\n  \"version\": \"10.0.2\",\n  \"description\": \"remark plugin to add support for parsing markdown input\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"remark\",\n    \"remark-plugin\",\n    \"plugin\",\n    \"markdown\",\n    \"mdast\",\n    \"abstract\",\n    \"syntax\",\n    \"tree\",\n    \"ast\",\n    \"parse\"\n  ],\n  \"homepage\": \"https://remark.js.org\",\n  \"repository\": \"https://github.com/remarkjs/remark/tree/main/packages/remark-parse\",\n  \"bugs\": \"https://github.com/remarkjs/remark/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Eugene Sharygin <eush77@gmail.com>\",\n    \"Junyoung Choi <fluke8259@gmail.com>\",\n    \"Elijah Hamovitz <elijahhamovitz@gmail.com>\",\n    \"Ika <ikatyang@gmail.com>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"unified\": \"^10.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"node --conditions development test.js\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/remark-parse/package.json"
  },
  "{A1A8198E-D815-4916-8AB4-7B021B1A6F4E}": {
    "source": "/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n",
    "mapping": {
      "mdast-util-from-markdown": "{E5CF735E-1984-4894-80DD-E59C685D1E83}"
    },
    "path": "{markdown-translate}/node_modules/remark-parse/lib/index.js"
  },
  "{E5CF735E-1984-4894-80DD-E59C685D1E83}": {
    "source": "// Note: types exported from `index.d.ts`.\nexport {fromMarkdown} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{45ED035E-CE67-49D0-8AEA-30F83A304060}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/index.js"
  },
  "{565DE820-DA35-4518-A7F7-7C5B86CD3F68}": {
    "source": "{\n  \"name\": \"mdast-util-from-markdown\",\n  \"version\": \"1.3.1\",\n  \"description\": \"mdast utility to parse markdown\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"parse\",\n    \"syntax\",\n    \"tree\",\n    \"ast\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-from-markdown\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-from-markdown/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/unist\": \"^2.0.0\",\n    \"decode-named-character-reference\": \"^1.0.0\",\n    \"mdast-util-to-string\": \"^3.1.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-util-decode-numeric-character-reference\": \"^1.0.0\",\n    \"micromark-util-decode-string\": \"^1.0.0\",\n    \"micromark-util-normalize-identifier\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"unist-util-stringify-position\": \"^3.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"commonmark.json\": \"^0.30.0\",\n    \"esbuild\": \"^0.17.0\",\n    \"gzip-size-cli\": \"^5.0.0\",\n    \"hast-util-from-html\": \"^1.0.0\",\n    \"hast-util-to-html\": \"^8.0.0\",\n    \"mdast-util-to-hast\": \"^12.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"terser\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build && esbuild . --bundle --minify | terser | gzip-size --raw\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"complexity\": \"off\",\n      \"n/file-extension-in-import\": \"off\",\n      \"unicorn/prefer-code-point\": \"off\",\n      \"unicorn/prefer-switch\": \"off\",\n      \"unicorn/prefer-node-protocol\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"rules\": {\n          \"no-await-in-loop\": \"off\"\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/package.json"
  },
  "{45ED035E-CE67-49D0-8AEA-30F83A304060}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n",
    "mapping": {
      "mdast-util-to-string": "{FE179917-E78A-47A2-B93C-86A63BAC52CA}",
      "micromark/lib/parse.js": "{8F66A668-ABE8-435E-AB94-73C9CEB67FB5}",
      "micromark/lib/preprocess.js": "{1BBD0C58-3A73-4FCD-B989-7BD1071F6FF6}",
      "micromark/lib/postprocess.js": "{2C3E3164-7B4B-48E3-BFD1-DCC7865AC99A}",
      "micromark-util-decode-numeric-character-reference": "{3AE0E495-B424-4548-A219-B5E94175BDAE}",
      "micromark-util-decode-string": "{385C7CF9-C898-4E5B-A3DE-B979AFF570B4}",
      "unist-util-stringify-position": "{F224305C-28DE-405D-8CE9-8FEC248A7E17}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/lib/index.js"
  },
  "{FE179917-E78A-47A2-B93C-86A63BAC52CA}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport {toString} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{FA31A362-DD84-400E-9D58-D17D4682455E}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/index.js"
  },
  "{C7008D78-6874-4F77-AE6D-E3A0E75C7D48}": {
    "source": "{\n  \"name\": \"mdast-util-to-string\",\n  \"version\": \"3.2.0\",\n  \"description\": \"mdast utility to get the plain text content of a node\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"node\",\n    \"string\",\n    \"serialize\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-to-string\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-to-string/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/package.json"
  },
  "{FA31A362-DD84-400E-9D58-D17D4682455E}": {
    "source": "/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js"
  },
  "{8F66A668-ABE8-435E-AB94-73C9CEB67FB5}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n",
    "mapping": {
      "micromark-util-combine-extensions": "{6ED45549-D374-48F0-B7BA-7FDBB9B5F950}",
      "./initialize/content.js": "{B195A4EC-4BDD-469F-9735-FC5BAD4B6384}",
      "./initialize/document.js": "{E9EE682F-4A69-4B02-A053-BF34865FD884}",
      "./initialize/flow.js": "{3A861FE2-CD0F-4736-BE50-7AE52C301A94}",
      "./initialize/text.js": "{2F9CA912-7912-44DF-A1FB-18A0DA3FAB9B}",
      "./create-tokenizer.js": "{0D0C221F-F6B7-40F3-B5C8-24EA87DA7DCC}",
      "./constructs.js": "{3C71E4D2-A5D8-4EC2-804F-808C31A43654}"
    },
    "path": "{markdown-translate}/node_modules/micromark/lib/parse.js"
  },
  "{A72C5235-15B5-463D-A590-8D8915E36516}": {
    "source": "{\n  \"name\": \"micromark\",\n  \"version\": \"3.2.0\",\n  \"description\": \"small commonmark compliant markdown parser with positional info and concrete tokens\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"commonmark\",\n    \"compiler\",\n    \"gfm\",\n    \"html\",\n    \"lexer\",\n    \"markdown\",\n    \"markup\",\n    \"md\",\n    \"unified\",\n    \"parse\",\n    \"parser\",\n    \"plugin\",\n    \"process\",\n    \"remark\",\n    \"render\",\n    \"renderer\",\n    \"token\",\n    \"tokenizer\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\",\n    \"stream.d.ts\",\n    \"stream.js\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dev/index.d.ts\",\n      \"development\": \"./dev/index.js\",\n      \"default\": \"./index.js\"\n    },\n    \"./stream\": {\n      \"types\": \"./dev/stream.d.ts\",\n      \"development\": \"./dev/stream.js\",\n      \"default\": \"./stream.js\"\n    },\n    \"./stream.js\": {\n      \"types\": \"./dev/stream.d.ts\",\n      \"development\": \"./dev/stream.js\",\n      \"default\": \"./stream.js\"\n    },\n    \"./lib/compile\": {\n      \"types\": \"./dev/lib/compile.d.ts\",\n      \"development\": \"./dev/lib/compile.js\",\n      \"default\": \"./lib/compile.js\"\n    },\n    \"./lib/compile.js\": {\n      \"types\": \"./dev/lib/compile.d.ts\",\n      \"development\": \"./dev/lib/compile.js\",\n      \"default\": \"./lib/compile.js\"\n    },\n    \"./lib/parse\": {\n      \"types\": \"./dev/lib/parse.d.ts\",\n      \"development\": \"./dev/lib/parse.js\",\n      \"default\": \"./lib/parse.js\"\n    },\n    \"./lib/parse.js\": {\n      \"types\": \"./dev/lib/parse.d.ts\",\n      \"development\": \"./dev/lib/parse.js\",\n      \"default\": \"./lib/parse.js\"\n    },\n    \"./lib/postprocess\": {\n      \"types\": \"./dev/lib/postprocess.d.ts\",\n      \"development\": \"./dev/lib/postprocess.js\",\n      \"default\": \"./lib/postprocess.js\"\n    },\n    \"./lib/postprocess.js\": {\n      \"types\": \"./dev/lib/postprocess.d.ts\",\n      \"development\": \"./dev/lib/postprocess.js\",\n      \"default\": \"./lib/postprocess.js\"\n    },\n    \"./lib/preprocess\": {\n      \"types\": \"./dev/lib/preprocess.d.ts\",\n      \"development\": \"./dev/lib/preprocess.js\",\n      \"default\": \"./lib/preprocess.js\"\n    },\n    \"./lib/preprocess.js\": {\n      \"types\": \"./dev/lib/preprocess.d.ts\",\n      \"development\": \"./dev/lib/preprocess.js\",\n      \"default\": \"./lib/preprocess.js\"\n    }\n  },\n  \"dependencies\": {\n    \"@types/debug\": \"^4.0.0\",\n    \"debug\": \"^4.0.0\",\n    \"micromark-core-commonmark\": \"^1.0.1\",\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-chunked\": \"^1.0.0\",\n    \"micromark-util-combine-extensions\": \"^1.0.0\",\n    \"micromark-util-decode-numeric-character-reference\": \"^1.0.0\",\n    \"micromark-util-encode\": \"^1.0.0\",\n    \"micromark-util-normalize-identifier\": \"^1.0.0\",\n    \"micromark-util-resolve-all\": \"^1.0.0\",\n    \"micromark-util-sanitize-uri\": \"^1.0.0\",\n    \"micromark-util-subtokenize\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.1\",\n    \"decode-named-character-reference\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark/package.json"
  },
  "{6ED45549-D374-48F0-B7BA-7FDBB9B5F950}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n",
    "mapping": {
      "micromark-util-chunked": "{828AFED2-6CF1-4587-B187-748254490905}"
    },
    "path": "{markdown-translate}/node_modules/micromark-util-combine-extensions/index.js"
  },
  "{955219C6-89D1-4668-8F9E-EEE0304DD0A0}": {
    "source": "{\n  \"name\": \"micromark-util-combine-extensions\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to combine syntax or html extensions\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"extension\",\n    \"combine\",\n    \"merge\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-combine-extensions\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": \"./index.js\",\n  \"dependencies\": {\n    \"micromark-util-chunked\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {},\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-combine-extensions/package.json"
  },
  "{828AFED2-6CF1-4587-B187-748254490905}": {
    "source": "/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-chunked/index.js"
  },
  "{4121AAB3-ABB7-41A1-AFEF-F8BCBDBBB35B}": {
    "source": "{\n  \"name\": \"micromark-util-chunked\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to splice and push with giant arrays\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"chunk\",\n    \"splice\",\n    \"push\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-chunked\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-symbol\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-chunked/package.json"
  },
  "{B195A4EC-4BDD-469F-9735-FC5BAD4B6384}": {
    "source": "/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n",
    "mapping": {
      "micromark-factory-space": "{320064D9-CCE6-438C-A032-278547D00287}"
    },
    "path": "{markdown-translate}/node_modules/micromark/lib/initialize/content.js"
  },
  "{320064D9-CCE6-438C-A032-278547D00287}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n",
    "mapping": {
      "micromark-util-character": "{D3A00676-C215-4992-818C-F18DD19CF60D}"
    },
    "path": "{markdown-translate}/node_modules/micromark-factory-space/index.js"
  },
  "{6BF8C5D4-EE0F-4564-A02B-11D90E4C3B2C}": {
    "source": "{\n  \"name\": \"micromark-factory-space\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark factory to parse markdown space (found in lots of places)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"factory\",\n    \"space\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-factory-space\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-factory-space/package.json"
  },
  "{D3A00676-C215-4992-818C-F18DD19CF60D}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n",
    "mapping": {
      "./lib/unicode-punctuation-regex.js": "{FCDD92F7-873E-4AFA-BFD7-C5273DA3F137}"
    },
    "path": "{markdown-translate}/node_modules/micromark-util-character/index.js"
  },
  "{69954F80-5CEB-4390-B060-69E4EA97627E}": {
    "source": "{\n  \"name\": \"micromark-util-character\",\n  \"version\": \"1.2.0\",\n  \"description\": \"micromark utility to handle character codes\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"character\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-character\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-character/package.json"
  },
  "{FCDD92F7-873E-4AFA-BFD7-C5273DA3F137}": {
    "source": "// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js"
  },
  "{E9EE682F-4A69-4B02-A053-BF34865FD884}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/initialize/document.js"
  },
  "{3A861FE2-CD0F-4736-BE50-7AE52C301A94}": {
    "source": "/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n",
    "mapping": {
      "micromark-core-commonmark": "{BBC8629F-77B2-4C48-AB2B-F051F1A9F08B}"
    },
    "path": "{markdown-translate}/node_modules/micromark/lib/initialize/flow.js"
  },
  "{BBC8629F-77B2-4C48-AB2B-F051F1A9F08B}": {
    "source": "export {attention} from './lib/attention.js'\nexport {autolink} from './lib/autolink.js'\nexport {blankLine} from './lib/blank-line.js'\nexport {blockQuote} from './lib/block-quote.js'\nexport {characterEscape} from './lib/character-escape.js'\nexport {characterReference} from './lib/character-reference.js'\nexport {codeFenced} from './lib/code-fenced.js'\nexport {codeIndented} from './lib/code-indented.js'\nexport {codeText} from './lib/code-text.js'\nexport {content} from './lib/content.js'\nexport {definition} from './lib/definition.js'\nexport {hardBreakEscape} from './lib/hard-break-escape.js'\nexport {headingAtx} from './lib/heading-atx.js'\nexport {htmlFlow} from './lib/html-flow.js'\nexport {htmlText} from './lib/html-text.js'\nexport {labelEnd} from './lib/label-end.js'\nexport {labelStartImage} from './lib/label-start-image.js'\nexport {labelStartLink} from './lib/label-start-link.js'\nexport {lineEnding} from './lib/line-ending.js'\nexport {list} from './lib/list.js'\nexport {setextUnderline} from './lib/setext-underline.js'\nexport {thematicBreak} from './lib/thematic-break.js'\n",
    "mapping": {
      "./lib/attention.js": "{5663CB34-C77B-41B5-B0F0-111B07D46EEE}",
      "./lib/autolink.js": "{2E372617-A2BD-4D14-9A5C-EEEC2471DF7C}",
      "./lib/blank-line.js": "{07FF0DC3-CC99-4E6F-ACB1-F96A45AD5A30}",
      "./lib/block-quote.js": "{46F37254-5CFF-4817-B942-FE30C1B6F892}",
      "./lib/character-escape.js": "{92D82D2F-FE11-4F4D-9F84-193B159397C5}",
      "./lib/character-reference.js": "{E545681F-5B73-48C8-9D1C-050679F4F9CA}",
      "./lib/code-fenced.js": "{CEE187C5-37F6-42C0-8900-F8B29F4C9C40}",
      "./lib/code-indented.js": "{0D25DF35-09ED-4E69-933D-254E03BF96C8}",
      "./lib/code-text.js": "{16A68EA5-FE4C-40CD-B8AE-55E0B0180902}",
      "./lib/content.js": "{62F05344-F180-4127-9C2B-27ADCFFD3590}",
      "./lib/definition.js": "{C27E5DCB-8522-4A53-BCC2-BF794D1EFBD9}",
      "./lib/hard-break-escape.js": "{20B5A408-2A84-4029-B411-BE4668E1234C}",
      "./lib/heading-atx.js": "{A2627CE6-8F82-4E07-BA2E-2164747E5286}",
      "./lib/html-flow.js": "{5C940374-381B-4873-AB06-5A3A68862951}",
      "./lib/html-text.js": "{8FF8B414-3F85-43C0-A12E-E749052D9AF5}",
      "./lib/label-end.js": "{A1A63CC9-F274-4F0D-BDCD-B053AAF93615}",
      "./lib/label-start-image.js": "{FDDE5322-8A7C-4BDD-93A5-C001DFD75857}",
      "./lib/label-start-link.js": "{F5D0B84A-E88D-4EEB-8943-4153B5AAC433}",
      "./lib/line-ending.js": "{15624100-7552-4060-BDD0-712C61CFCA74}",
      "./lib/list.js": "{72F6892D-9AA8-46E6-93C0-06CA61C09C25}",
      "./lib/setext-underline.js": "{E0B95ED1-7B32-4AF0-AD35-E6DF3DBC32D0}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/index.js"
  },
  "{6E6288B7-9086-45D1-BE67-E686EDA5FC80}": {
    "source": "{\n  \"name\": \"micromark-core-commonmark\",\n  \"version\": \"1.1.0\",\n  \"description\": \"The CommonMark markdown constructs\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"core\",\n    \"commonmark\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-core-commonmark\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-factory-destination\": \"^1.0.0\",\n    \"micromark-factory-label\": \"^1.0.0\",\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-factory-title\": \"^1.0.0\",\n    \"micromark-factory-whitespace\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-chunked\": \"^1.0.0\",\n    \"micromark-util-classify-character\": \"^1.0.0\",\n    \"micromark-util-html-tag-name\": \"^1.0.0\",\n    \"micromark-util-normalize-identifier\": \"^1.0.0\",\n    \"micromark-util-resolve-all\": \"^1.0.0\",\n    \"micromark-util-subtokenize\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.1\",\n    \"decode-named-character-reference\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/package.json"
  },
  "{5663CB34-C77B-41B5-B0F0-111B07D46EEE}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n",
    "mapping": {
      "micromark-util-classify-character": "{3D80FF39-3077-4B27-832F-10A1B1D1C452}",
      "micromark-util-resolve-all": "{0E7156D2-8D0D-4D50-8F97-EFD7B0B17B49}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/attention.js"
  },
  "{3D80FF39-3077-4B27-832F-10A1B1D1C452}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-classify-character/index.js"
  },
  "{572E3787-2423-494F-B4A1-84B6B7A33CC3}": {
    "source": "{\n  \"name\": \"micromark-util-classify-character\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to classify whether a character is whitespace or punctuation\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"attention\",\n    \"classify\",\n    \"character\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-classify-character\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-classify-character/package.json"
  },
  "{0E7156D2-8D0D-4D50-8F97-EFD7B0B17B49}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-resolve-all/index.js"
  },
  "{E0706C38-2C45-4033-B3E7-F765ED7F2A0C}": {
    "source": "{\n  \"name\": \"micromark-util-resolve-all\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to resolve subtokens\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"resolve\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-resolve-all\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": \"./index.js\",\n  \"dependencies\": {\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {},\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-resolve-all/package.json"
  },
  "{2E372617-A2BD-4D14-9A5C-EEEC2471DF7C}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/autolink.js"
  },
  "{07FF0DC3-CC99-4E6F-ACB1-F96A45AD5A30}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/blank-line.js"
  },
  "{46F37254-5CFF-4817-B942-FE30C1B6F892}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/block-quote.js"
  },
  "{92D82D2F-FE11-4F4D-9F84-193B159397C5}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/character-escape.js"
  },
  "{E545681F-5B73-48C8-9D1C-050679F4F9CA}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {
      "decode-named-character-reference": "{EDC22D86-2035-4CC9-A6DA-647F99F974A4}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/character-reference.js"
  },
  "{EDC22D86-2035-4CC9-A6DA-647F99F974A4}": {
    "source": "import {characterEntities} from 'character-entities'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n",
    "mapping": {
      "character-entities": "{E622E172-2F58-4783-AB0C-E5D3FCCA3E84}"
    },
    "path": "{markdown-translate}/node_modules/decode-named-character-reference/index.js"
  },
  "{2FF7ACA7-1ACA-4468-9AA5-6B871F3D2242}": {
    "source": "{\n  \"name\": \"decode-named-character-reference\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Decode named character references\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"decode\",\n    \"named\",\n    \"character\",\n    \"references\"\n  ],\n  \"repository\": \"wooorm/decode-named-character-reference\",\n  \"bugs\": \"https://github.com/wooorm/decode-named-character-reference/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"index.dom.js\",\n    \"index.dom.d.ts\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"deno\": \"./index.js\",\n      \"react-native\": \"./index.js\",\n      \"worker\": \"./index.js\",\n      \"browser\": \"./index.dom.js\",\n      \"default\": \"./index.js\"\n    }\n  },\n  \"dependencies\": {\n    \"character-entities\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.49.0\"\n  },\n  \"scripts\": {\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"unicorn/prefer-code-point\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/decode-named-character-reference/package.json"
  },
  "{E622E172-2F58-4783-AB0C-E5D3FCCA3E84}": {
    "source": "/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/character-entities/index.js"
  },
  "{769C4A90-27A7-4954-AD69-CABA6FE1ECD4}": {
    "source": "{\n  \"name\": \"character-entities\",\n  \"version\": \"2.0.2\",\n  \"description\": \"Map of named character references\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"html\",\n    \"entity\",\n    \"entities\",\n    \"character\",\n    \"reference\",\n    \"name\",\n    \"replacement\"\n  ],\n  \"repository\": \"wooorm/character-entities\",\n  \"bugs\": \"https://github.com/wooorm/character-entities/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.50.0\"\n  },\n  \"scripts\": {\n    \"generate\": \"node build\",\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/character-entities/package.json"
  },
  "{CEE187C5-37F6-42C0-8900-F8B29F4C9C40}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/code-fenced.js"
  },
  "{0D25DF35-09ED-4E69-933D-254E03BF96C8}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/code-indented.js"
  },
  "{16A68EA5-FE4C-40CD-B8AE-55E0B0180902}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/code-text.js"
  },
  "{62F05344-F180-4127-9C2B-27ADCFFD3590}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n",
    "mapping": {
      "micromark-util-subtokenize": "{9E5697A0-CE70-4D1C-BCE5-5BB940DD5EBE}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/content.js"
  },
  "{9E5697A0-CE70-4D1C-BCE5-5BB940DD5EBE}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-subtokenize/index.js"
  },
  "{3DBCD8EE-CEE2-466A-A498-F3B83DDD4586}": {
    "source": "{\n  \"name\": \"micromark-util-subtokenize\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to tokenize subtokens\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"tokenize\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-subtokenize\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-chunked\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-subtokenize/package.json"
  },
  "{C27E5DCB-8522-4A53-BCC2-BF794D1EFBD9}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n",
    "mapping": {
      "micromark-factory-destination": "{BEB34C3D-5A17-4824-8C83-7A5D5A925519}",
      "micromark-factory-label": "{11DFDDA5-A7D1-4722-A46B-DAA429B1ECF4}",
      "micromark-factory-title": "{DEE7B99C-22D9-44BB-B3CA-47E64460B980}",
      "micromark-factory-whitespace": "{43CF9F75-0650-4171-A4BA-2098E45BE68A}",
      "micromark-util-normalize-identifier": "{E4B112D0-1BED-481A-93CC-091A95CB21EF}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/definition.js"
  },
  "{BEB34C3D-5A17-4824-8C83-7A5D5A925519}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-factory-destination/index.js"
  },
  "{AB3AB7A7-CE4C-4E2F-91CA-91A9E42632BC}": {
    "source": "{\n  \"name\": \"micromark-factory-destination\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark factory to parse destinations (found in resources, definitions)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"factory\",\n    \"destination\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-factory-destination\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-factory-destination/package.json"
  },
  "{11DFDDA5-A7D1-4722-A46B-DAA429B1ECF4}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-factory-label/index.js"
  },
  "{32DC2EF7-E5AC-44B4-8EBD-80E56EA93E45}": {
    "source": "{\n  \"name\": \"micromark-factory-label\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark factory to parse labels (found in media, definitions)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"factory\",\n    \"label\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-factory-label\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-factory-label/package.json"
  },
  "{DEE7B99C-22D9-44BB-B3CA-47E64460B980}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-factory-title/index.js"
  },
  "{96A5F846-4BE1-4055-8C6A-9FA0F9896F63}": {
    "source": "{\n  \"name\": \"micromark-factory-title\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark factory to parse markdown titles (found in resources, definitions)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"factory\",\n    \"title\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-factory-title\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-factory-title/package.json"
  },
  "{43CF9F75-0650-4171-A4BA-2098E45BE68A}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-factory-whitespace/index.js"
  },
  "{16C5B821-9417-430F-B26C-080F7852B7D2}": {
    "source": "{\n  \"name\": \"micromark-factory-whitespace\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark factory to parse markdown whitespace (found in lots of places)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"factory\",\n    \"whitespace\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-factory-whitespace\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-factory-whitespace/package.json"
  },
  "{E4B112D0-1BED-481A-93CC-091A95CB21EF}": {
    "source": "/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-normalize-identifier/index.js"
  },
  "{19B9A57F-9F57-46F0-8448-3FF5C5C87576}": {
    "source": "{\n  \"name\": \"micromark-util-normalize-identifier\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility normalize identifiers (as found in references, definitions)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"normalize\",\n    \"id\",\n    \"identifier\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-normalize-identifier\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-symbol\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-normalize-identifier/package.json"
  },
  "{20B5A408-2A84-4029-B411-BE4668E1234C}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/hard-break-escape.js"
  },
  "{A2627CE6-8F82-4E07-BA2E-2164747E5286}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/heading-atx.js"
  },
  "{5C940374-381B-4873-AB06-5A3A68862951}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n",
    "mapping": {
      "micromark-util-html-tag-name": "{57450C20-60BA-4EF2-AF6B-0F1394BF8438}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/html-flow.js"
  },
  "{57450C20-60BA-4EF2-AF6B-0F1394BF8438}": {
    "source": "/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-html-tag-name/index.js"
  },
  "{4E0FB08B-336A-464B-AFAD-A262C11A2933}": {
    "source": "{\n  \"name\": \"micromark-util-html-tag-name\",\n  \"version\": \"1.2.0\",\n  \"description\": \"micromark utility with list of html tag names\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"tag\",\n    \"name\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-html-tag-name\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": \"./index.js\",\n  \"scripts\": {},\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-html-tag-name/package.json"
  },
  "{8FF8B414-3F85-43C0-A12E-E749052D9AF5}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/html-text.js"
  },
  "{A1A63CC9-F274-4F0D-BDCD-B053AAF93615}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/label-end.js"
  },
  "{FDDE5322-8A7C-4BDD-93A5-C001DFD75857}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/label-start-image.js"
  },
  "{F5D0B84A-E88D-4EEB-8943-4153B5AAC433}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/label-start-link.js"
  },
  "{15624100-7552-4060-BDD0-712C61CFCA74}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/line-ending.js"
  },
  "{72F6892D-9AA8-46E6-93C0-06CA61C09C25}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n",
    "mapping": {
      "./thematic-break.js": "{1AA4CE3F-2C2B-4FBC-9F3E-1F095C4522BE}"
    },
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/list.js"
  },
  "{1AA4CE3F-2C2B-4FBC-9F3E-1F095C4522BE}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/thematic-break.js"
  },
  "{E0B95ED1-7B32-4AF0-AD35-E6DF3DBC32D0}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-core-commonmark/lib/setext-underline.js"
  },
  "{2F9CA912-7912-44DF-A1FB-18A0DA3FAB9B}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/initialize/text.js"
  },
  "{0D0C221F-F6B7-40F3-B5C8-24EA87DA7DCC}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/create-tokenizer.js"
  },
  "{3C71E4D2-A5D8-4EC2-804F-808C31A43654}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/constructs.js"
  },
  "{1BBD0C58-3A73-4FCD-B989-7BD1071F6FF6}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/preprocess.js"
  },
  "{2C3E3164-7B4B-48E3-BFD1-DCC7865AC99A}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark/lib/postprocess.js"
  },
  "{3AE0E495-B424-4548-A219-B5E94175BDAE}": {
    "source": "/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-decode-numeric-character-reference/index.js"
  },
  "{D879C6E4-B072-45D6-A6EB-8CF1097728FE}": {
    "source": "{\n  \"name\": \"micromark-util-decode-numeric-character-reference\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to decode numeric character references\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"decode\",\n    \"numeric\",\n    \"number\",\n    \"character\",\n    \"reference\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-decode-numeric-character-reference\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-symbol\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-decode-numeric-character-reference/package.json"
  },
  "{385C7CF9-C898-4E5B-A3DE-B979AFF570B4}": {
    "source": "import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-decode-string/index.js"
  },
  "{EBD5278D-A2C7-49E7-99EF-3A55EED14B14}": {
    "source": "{\n  \"name\": \"micromark-util-decode-string\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to decode markdown strings\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"decode\",\n    \"character\",\n    \"reference\",\n    \"escape\",\n    \"string\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-decode-string\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-decode-numeric-character-reference\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"decode-named-character-reference\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-decode-string/package.json"
  },
  "{F224305C-28DE-405D-8CE9-8FEC248A7E17}": {
    "source": "export {stringifyPosition} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{49B2DAAE-5ADF-46C7-8E65-D05423A5CD70}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/index.js"
  },
  "{AF3FBDB9-4100-45C5-8317-9BCF27F9FC15}": {
    "source": "{\n  \"name\": \"unist-util-stringify-position\",\n  \"version\": \"3.0.3\",\n  \"description\": \"unist utility to serialize a node, position, or point as a human readable location\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"position\",\n    \"location\",\n    \"point\",\n    \"node\",\n    \"stringify\",\n    \"tostring\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-stringify-position\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-stringify-position/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/package.json"
  },
  "{49B2DAAE-5ADF-46C7-8E65-D05423A5CD70}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/lib/index.js"
  },
  "{449741A4-2CBC-4E02-9185-9501DF84BC89}": {
    "source": "/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n",
    "mapping": {
      "micromark-extension-gfm": "{CAB5B5C0-D9E4-4D88-B0DB-0F6E7D125FBE}",
      "mdast-util-gfm": "{0C9E3491-F5A4-454B-8C84-4D30177EA40C}"
    },
    "path": "{markdown-translate}/node_modules/remark-gfm/index.js"
  },
  "{F4DEA882-9CD4-40DA-A061-88873A01581B}": {
    "source": "{\n  \"name\": \"remark-gfm\",\n  \"version\": \"3.0.1\",\n  \"description\": \"remark plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"remark\",\n    \"remark-plugin\",\n    \"plugin\",\n    \"mdast\",\n    \"markdown\",\n    \"table\",\n    \"strikethrough\",\n    \"tasklist\",\n    \"autolink\",\n    \"footnote\",\n    \"github\",\n    \"gfm\"\n  ],\n  \"repository\": \"remarkjs/remark-gfm\",\n  \"bugs\": \"https://github.com/remarkjs/remark-gfm/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-gfm\": \"^2.0.0\",\n    \"micromark-extension-gfm\": \"^2.0.0\",\n    \"unified\": \"^10.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"is-hidden\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark\": \"^14.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"string-width\": \"^5.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"to-vfile\": \"^7.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.46.0\"\n  },\n  \"scripts\": {\n    \"build\": \"rimraf \\\"test/**/*.d.ts\\\" \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo --ignore-pattern test/ && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/remark-gfm/package.json"
  },
  "{CAB5B5C0-D9E4-4D88-B0DB-0F6E7D125FBE}": {
    "source": "/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration.\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n",
    "mapping": {
      "micromark-extension-gfm-autolink-literal": "{A2E0D1B9-0A6D-4AA8-BA33-9F492FD5DEB3}",
      "micromark-extension-gfm-footnote": "{CDEDD424-8143-4EB5-A98F-06316A314B86}",
      "micromark-extension-gfm-strikethrough": "{47F7DA77-4D5E-42F6-B7D1-D80C5B2175B5}",
      "micromark-extension-gfm-table": "{1318CA23-CFA6-4373-B96A-136AB8B190BB}",
      "micromark-extension-gfm-tagfilter": "{8A17B840-96DD-48D9-966C-BBA5B84B4181}",
      "micromark-extension-gfm-task-list-item": "{0EEDA03A-56A1-4AAE-82AF-D7F7034F6493}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm/index.js"
  },
  "{5A2677B5-05E6-4BF5-B434-F8BEC114EC69}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm\",\n  \"version\": \"2.0.3\",\n  \"description\": \"micromark extension to support GFM (GitHub Flavored Markdown)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"table\",\n    \"strikethrough\",\n    \"tasklist\",\n    \"autolink\",\n    \"footnote\",\n    \"tagfilter\",\n    \"github\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"micromark-extension-gfm-autolink-literal\": \"^1.0.0\",\n    \"micromark-extension-gfm-footnote\": \"^1.0.0\",\n    \"micromark-extension-gfm-strikethrough\": \"^1.0.0\",\n    \"micromark-extension-gfm-table\": \"^1.0.0\",\n    \"micromark-extension-gfm-tagfilter\": \"^1.0.0\",\n    \"micromark-extension-gfm-task-list-item\": \"^1.0.0\",\n    \"micromark-util-combine-extensions\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"hast-util-from-html\": \"^1.0.0\",\n    \"hast-util-select\": \"^5.0.0\",\n    \"hast-util-to-text\": \"^3.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype\": \"^12.0.0\",\n    \"rehype-sort-attributes\": \"^4.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"undici\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"overrides\": [\n      {\n        \"files\": [\n          \"{test,script}/**/*.js\"\n        ],\n        \"rules\": {\n          \"no-await-in-loop\": \"off\"\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm/package.json"
  },
  "{A2E0D1B9-0A6D-4AA8-BA33-9F492FD5DEB3}": {
    "source": "export {gfmAutolinkLiteral} from './lib/syntax.js'\nexport {gfmAutolinkLiteralHtml} from './lib/html.js'\n",
    "mapping": {
      "./lib/syntax.js": "{8F1C72EB-BB0B-41BC-B6E1-18B5AE53E059}",
      "./lib/html.js": "{4C8DAA8C-41C7-4D20-BB86-CD75D4D97DF7}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-autolink-literal/index.js"
  },
  "{A9C888E3-587F-4DEE-8A2C-23006DED3AA6}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-autolink-literal\",\n  \"version\": \"1.0.5\",\n  \"description\": \"micromark extension to support GFM autolink literals\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"literal\",\n    \"url\",\n    \"autolink\",\n    \"auto\",\n    \"link\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-autolink-literal\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-autolink-literal/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-sanitize-uri\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype\": \"^12.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"complexity\": \"off\",\n      \"n/file-extension-in-import\": \"off\",\n      \"unicorn/no-this-assignment\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": [\n          \"test/**/*.js\"\n        ],\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-autolink-literal/package.json"
  },
  "{8F1C72EB-BB0B-41BC-B6E1-18B5AE53E059}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * autolink literal syntax.\n *\n * @type {Extension}\n */\nexport const gfmAutolinkLiteral = {\n  text\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js"
  },
  "{4C8DAA8C-41C7-4D20-BB86-CD75D4D97DF7}": {
    "source": "/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to support\n * GFM autolink literals when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {void}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n",
    "mapping": {
      "micromark-util-sanitize-uri": "{6E930383-B016-49EA-84A4-816C312B8E16}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-autolink-literal/lib/html.js"
  },
  "{6E930383-B016-49EA-84A4-816C312B8E16}": {
    "source": "import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n",
    "mapping": {
      "micromark-util-encode": "{3AAA5C93-9407-42C6-9BD5-691319FC908D}"
    },
    "path": "{markdown-translate}/node_modules/micromark-util-sanitize-uri/index.js"
  },
  "{E8B0085A-6452-4AB2-8CDF-E79725D940A9}": {
    "source": "{\n  \"name\": \"micromark-util-sanitize-uri\",\n  \"version\": \"1.2.0\",\n  \"description\": \"micromark utility to sanitize urls\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"sanitize\",\n    \"clear\",\n    \"url\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-sanitize-uri\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"dev/index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"types\": \"./dev/index.d.ts\",\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-encode\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"micromark-build\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-sanitize-uri/package.json"
  },
  "{3AAA5C93-9407-42C6-9BD5-691319FC908D}": {
    "source": "const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   * @returns {string}\n   */\n  function replace(value) {\n    // @ts-expect-error Hush, it’s fine.\n    return '&' + characterReferences[value] + ';'\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-util-encode/index.js"
  },
  "{6E1EC2DE-425D-4957-BD65-6AAB27A1E240}": {
    "source": "{\n  \"name\": \"micromark-util-encode\",\n  \"version\": \"1.1.0\",\n  \"description\": \"micromark utility to encode dangerous html characters\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"encode\"\n  ],\n  \"repository\": \"https://github.com/micromark/micromark/tree/main/packages/micromark-util-encode\",\n  \"bugs\": \"https://github.com/micromark/micromark/issues\",\n  \"funding\": [\n    {\n      \"type\": \"GitHub Sponsors\",\n      \"url\": \"https://github.com/sponsors/unifiedjs\"\n    },\n    {\n      \"type\": \"OpenCollective\",\n      \"url\": \"https://opencollective.com/unified\"\n    }\n  ],\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": \"./index.js\",\n  \"scripts\": {},\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-util-encode/package.json"
  },
  "{CDEDD424-8143-4EB5-A98F-06316A314B86}": {
    "source": "// Note: types are exported from `dev/index.d.ts`.\nexport {gfmFootnote} from './lib/syntax.js'\nexport {gfmFootnoteHtml, defaultBackLabel} from './lib/html.js'\n",
    "mapping": {
      "./lib/syntax.js": "{8040895F-CCDC-4CF0-869A-252B3596506A}",
      "./lib/html.js": "{3E626B48-416B-4993-ABC0-13C1DC668851}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-footnote/index.js"
  },
  "{3A7885A9-92A8-4ECA-9434-BB7F543B5854}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-footnote\",\n  \"version\": \"1.1.2\",\n  \"description\": \"micromark extension to support GFM footnotes\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"gfm\",\n    \"footnote\",\n    \"note\",\n    \"definition\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-footnote\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-footnote/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-core-commonmark\": \"^1.0.0\",\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-normalize-identifier\": \"^1.0.0\",\n    \"micromark-util-sanitize-uri\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"n/file-extension-in-import\": \"off\",\n      \"unicorn/no-this-assignment\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": [\n          \"test/**/*.js\"\n        ],\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-footnote/package.json"
  },
  "{8040895F-CCDC-4CF0-869A-252B3596506A}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-footnote/lib/syntax.js"
  },
  "{3E626B48-416B-4993-ABC0-13C1DC668851}": {
    "source": "/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering*.\n *\n *   The default is `'user-content-'`.\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string} [label='Footnotes']\n *   Textual label to use for the footnotes section.\n *\n *   The default value is `'Footnotes'`.\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label.\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > 👉 **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element.\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string} [backLabel]\n *   Textual label to describe the backreference back to references.\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions\n  const label = config.label || 'Footnotes'\n  const labelTagName = config.labelTagName || 'h2'\n  const labelAttributes =\n    config.labelAttributes === null || config.labelAttributes === undefined\n      ? 'class=\"sr-only\"'\n      : config.labelAttributes\n  const backLabel = config.backLabel || defaultBackLabel\n  const clobberPrefix =\n    config.clobberPrefix === null || config.clobberPrefix === undefined\n      ? 'user-content-'\n      : config.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack')\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions')\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack')\n        const tightStack = this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder')\n        let counts = this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><' +\n              labelTagName +\n              ' id=\"footnote-label\"' +\n              (labelAttributes ? ' ' + labelAttributes : '') +\n              '>'\n          )\n          this.raw(this.encode(label))\n          this.tag('</' + labelTagName + '>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" aria-label=\"' +\n                this.encode(\n                  typeof backLabel === 'string'\n                    ? backLabel\n                    : backLabel(index, referenceIndex)\n                ) +\n                '\" class=\"data-footnote-backref\">↩' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-footnote/lib/html.js"
  },
  "{47F7DA77-4D5E-42F6-B7D1-D80C5B2175B5}": {
    "source": "// Note: more types exposed from `index.d.ts`.\nexport {gfmStrikethroughHtml} from './lib/html.js'\nexport {gfmStrikethrough} from './lib/syntax.js'\n",
    "mapping": {
      "./lib/html.js": "{17C4635E-2F4A-4022-AC27-B9951943BDA4}",
      "./lib/syntax.js": "{440399CA-5752-4DDB-B7D3-66DC100522E8}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-strikethrough/index.js"
  },
  "{74A98498-B98B-410A-9B85-4AAD98DD35AA}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-strikethrough\",\n  \"version\": \"1.0.7\",\n  \"description\": \"micromark extension to support GFM strikethrough\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"strikethrough\",\n    \"strike\",\n    \"through\",\n    \"del\",\n    \"delete\",\n    \"deletion\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-strikethrough\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-strikethrough/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-util-chunked\": \"^1.0.0\",\n    \"micromark-util-classify-character\": \"^1.0.0\",\n    \"micromark-util-resolve-all\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"n/file-extension-in-import\": \"off\",\n      \"max-depth\": \"off\",\n      \"unicorn/prefer-node-protocol\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-strikethrough/package.json"
  },
  "{17C4635E-2F4A-4022-AC27-B9951943BDA4}": {
    "source": "/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n// To do: next major: expose function instead of object.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\n * support GFM strikethrough when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmStrikethroughHtml = {\n  enter: {\n    strikethrough() {\n      this.tag('<del>')\n    }\n  },\n  exit: {\n    strikethrough() {\n      this.tag('</del>')\n    }\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-strikethrough/lib/html.js"
  },
  "{440399CA-5752-4DDB-B7D3-66DC100522E8}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde.\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js"
  },
  "{1318CA23-CFA6-4373-B96A-136AB8B190BB}": {
    "source": "export {gfmTableHtml} from './lib/html.js'\nexport {gfmTable} from './lib/syntax.js'\n",
    "mapping": {
      "./lib/html.js": "{028DD4AE-E7DC-43D2-8E1C-755BAA8EFCDE}",
      "./lib/syntax.js": "{3CBF75FF-2563-41C0-A0E5-5A42AF9CE6D7}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/index.js"
  },
  "{B4E22944-E82B-4849-9BC2-22DD28251165}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-table\",\n  \"version\": \"1.0.7\",\n  \"description\": \"micromark extension to support GFM tables\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"table\",\n    \"row\",\n    \"column\",\n    \"cell\",\n    \"tabular\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-table\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-table/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"max-depth\": \"off\",\n      \"n/file-extension-in-import\": \"off\",\n      \"unicorn/no-this-assignment\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": [\n          \"test/**/*.js\"\n        ],\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/package.json"
  },
  "{028DD4AE-E7DC-43D2-8E1C-755BAA8EFCDE}": {
    "source": "/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @typedef {import('./infer.js').Align} Align\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n}\n\n// To do: next major: expose functions.\n// To do: next major: use `infer` here, when all events are exposed.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to support\n * GFM tables when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmTableHtml = {\n  enter: {\n    table(token) {\n      const tableAlign = token._align\n      this.lineEndingIfNeeded()\n      this.tag('<table>')\n      this.setData('tableAlign', tableAlign)\n    },\n    tableBody() {\n      this.tag('<tbody>')\n    },\n    tableData() {\n      const tableAlign = this.getData('tableAlign')\n      const tableColumn = this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer()\n      } else {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + align + '>')\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('<thead>')\n    },\n    tableHeader() {\n      const tableAlign = this.getData('tableAlign')\n      const tableColumn = this.getData('tableColumn')\n      const align = alignment[tableAlign[tableColumn]]\n      this.lineEndingIfNeeded()\n      this.tag('<th' + align + '>')\n    },\n    tableRow() {\n      this.setData('tableColumn', 0)\n      this.lineEndingIfNeeded()\n      this.tag('<tr>')\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData(token) {\n      let value = this.sliceSerialize(token)\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace)\n      }\n      this.raw(this.encode(value))\n    },\n    table() {\n      this.setData('tableAlign')\n      // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n      // but we do need to reset it to match a funky newline GH generates for\n      // list items combined with tables.\n      this.setData('slurpAllLineEndings')\n      this.lineEndingIfNeeded()\n      this.tag('</table>')\n    },\n    tableBody() {\n      this.lineEndingIfNeeded()\n      this.tag('</tbody>')\n    },\n    tableData() {\n      const tableAlign = this.getData('tableAlign')\n      const tableColumn = this.getData('tableColumn')\n      if (tableColumn in tableAlign) {\n        this.tag('</td>')\n        this.setData('tableColumn', tableColumn + 1)\n      } else {\n        // Stop capturing.\n        this.resume()\n      }\n    },\n    tableHead() {\n      this.lineEndingIfNeeded()\n      this.tag('</thead>')\n    },\n    tableHeader() {\n      const tableColumn = this.getData('tableColumn')\n      this.tag('</th>')\n      this.setData('tableColumn', tableColumn + 1)\n    },\n    tableRow() {\n      const tableAlign = this.getData('tableAlign')\n      let tableColumn = this.getData('tableColumn')\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded()\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>')\n        tableColumn++\n      }\n      this.setData('tableColumn', tableColumn)\n      this.lineEndingIfNeeded()\n      this.tag('</tr>')\n    }\n  }\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/lib/html.js"
  },
  "{3CBF75FF-2563-41C0-A0E5-5A42AF9CE6D7}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n// To do: next major: expose functions.\n\n/**\n * Extension for `micromark` that can be passed in `extensions` to enable GFM\n * table syntax.\n *\n * @type {Extension}\n */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolveAll: resolveTable\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n// eslint-disable-next-line complexity\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/// Generate a cell.\n/**\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {Range} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {EditMap} map\n * @param {TokenizeContext} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {readonly Point}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n",
    "mapping": {
      "./edit-map.js": "{32F63A94-591C-4EAB-900B-456A18947461}",
      "./infer.js": "{BEF0AAD7-7194-4D8E-8CA2-70E64CD02628}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/lib/syntax.js"
  },
  "{32F63A94-591C-4EAB-900B-456A18947461}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {void}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: not used here.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {void}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {void}\n   */\n  consume(events) {\n    this.map.sort((a, b) => a[0] - b[0])\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]))\n      // eslint-disable-next-line unicorn/no-array-push-push\n      vecs.push(this.map[index][2])\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {void}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       console.log('to do: links?', add, rmCurr)\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/lib/edit-map.js"
  },
  "{BEF0AAD7-7194-4D8E-8CA2-70E64CD02628}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-table/lib/infer.js"
  },
  "{8A17B840-96DD-48D9-966C-BBA5B84B4181}": {
    "source": "/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\n * support GitHub’s weird and useless tagfilter when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-tagfilter/index.js"
  },
  "{B2895197-097A-40E0-91F9-193B229664BA}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-tagfilter\",\n  \"version\": \"1.0.2\",\n  \"description\": \"micromark extension to support GFM tagfilter\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"tagfilter\",\n    \"tag\",\n    \"filter\",\n    \"dangerous\",\n    \"html\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-tagfilter\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-tagfilter/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"micromark-util-types\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-tagfilter/package.json"
  },
  "{0EEDA03A-56A1-4AAE-82AF-D7F7034F6493}": {
    "source": "export {gfmTaskListItemHtml} from './lib/html.js'\nexport {gfmTaskListItem} from './lib/syntax.js'\n",
    "mapping": {
      "./lib/html.js": "{E7D292A1-B20F-485A-870C-47887C910227}",
      "./lib/syntax.js": "{E3CE02D1-BE88-4926-BE85-A6407D54B098}"
    },
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-task-list-item/index.js"
  },
  "{2322C57F-85FC-4161-BEF0-85DC05EE6FC5}": {
    "source": "{\n  \"name\": \"micromark-extension-gfm-task-list-item\",\n  \"version\": \"1.0.5\",\n  \"description\": \"micromark extension to support GFM task list items\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"micromark\",\n    \"micromark-extension\",\n    \"task\",\n    \"list\",\n    \"item\",\n    \"check\",\n    \"checkbox\",\n    \"todo\",\n    \"gfm\",\n    \"markdown\",\n    \"unified\"\n  ],\n  \"repository\": \"micromark/micromark-extension-gfm-task-list-item\",\n  \"bugs\": \"https://github.com/micromark/micromark-extension-gfm-task-list-item/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"dev/\",\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"exports\": {\n    \"development\": \"./dev/index.js\",\n    \"default\": \"./index.js\"\n  },\n  \"dependencies\": {\n    \"micromark-factory-space\": \"^1.0.0\",\n    \"micromark-util-character\": \"^1.0.0\",\n    \"micromark-util-symbol\": \"^1.0.0\",\n    \"micromark-util-types\": \"^1.0.0\",\n    \"uvu\": \"^0.5.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"control-pictures\": \"^2.0.0\",\n    \"create-gfm-fixtures\": \"^1.0.0\",\n    \"micromark\": \"^3.0.0\",\n    \"micromark-build\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.54.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage && micromark-build\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api-prod\": \"node --conditions production test/index.js\",\n    \"test-api-dev\": \"node --conditions development test/index.js\",\n    \"test-api\": \"npm run test-api-dev && npm run test-api-prod\",\n    \"test-coverage\": \"c8 --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"n/file-extension-in-import\": \"off\",\n      \"unicorn/no-this-assignment\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": [\n          \"test/**/*.js\"\n        ],\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-task-list-item/package.json"
  },
  "{E7D292A1-B20F-485A-870C-47887C910227}": {
    "source": "/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to\n * support GFM task list items when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmTaskListItemHtml = {\n  enter: {\n    taskListCheck() {\n      this.tag('<input type=\"checkbox\" disabled=\"\" ')\n    }\n  },\n  exit: {\n    taskListCheck() {\n      this.tag('/>')\n    },\n    taskListCheckValueChecked() {\n      this.tag('checked=\"\" ')\n    }\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-task-list-item/lib/html.js"
  },
  "{E3CE02D1-BE88-4926-BE85-A6407D54B098}": {
    "source": "/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js"
  },
  "{0C9E3491-F5A4-454B-8C84-4D30177EA40C}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport {gfmFromMarkdown, gfmToMarkdown} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{2385400D-0B17-4F95-AB7C-97D618815A7F}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm/index.js"
  },
  "{4C5E3596-8EF8-418E-BC8C-731241949734}": {
    "source": "{\n  \"name\": \"mdast-util-gfm\",\n  \"version\": \"2.0.2\",\n  \"description\": \"mdast extension to parse and serialize GFM (GitHub Flavored Markdown)\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"table\",\n    \"strikethrough\",\n    \"tasklist\",\n    \"autolink\",\n    \"tagfilter\",\n    \"github\",\n    \"gfm\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-gfm-autolink-literal\": \"^1.0.0\",\n    \"mdast-util-gfm-footnote\": \"^1.0.0\",\n    \"mdast-util-gfm-strikethrough\": \"^1.0.0\",\n    \"mdast-util-gfm-table\": \"^1.0.0\",\n    \"mdast-util-gfm-task-list-item\": \"^1.0.0\",\n    \"mdast-util-to-markdown\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"github-slugger\": \"^2.0.0\",\n    \"hast-util-to-html\": \"^8.0.0\",\n    \"mdast-util-to-hast\": \"^12.0.0\",\n    \"micromark-extension-gfm\": \"^2.0.0\",\n    \"node-fetch\": \"^3.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"crawl\": \"node --conditions development script/crawl-tests.js\",\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"rules\": {\n          \"no-await-in-loop\": \"off\"\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm/package.json"
  },
  "{2385400D-0B17-4F95-AB7C-97D618815A7F}": {
    "source": "/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n",
    "mapping": {
      "mdast-util-gfm-autolink-literal": "{3DE25D62-6E18-40A2-B011-A4FAC17264D7}",
      "mdast-util-gfm-footnote": "{59EAEA9E-5B9E-499B-8011-A9951FEB406B}",
      "mdast-util-gfm-strikethrough": "{641DA25D-F797-4D8E-8F5A-2AACB9DBE4E2}",
      "mdast-util-gfm-table": "{0E64E3B7-CD58-4CFA-BA83-F1204AE1AC73}",
      "mdast-util-gfm-task-list-item": "{74DBD367-6412-48C5-A306-2C5DF5479504}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm/lib/index.js"
  },
  "{3DE25D62-6E18-40A2-B011-A4FAC17264D7}": {
    "source": "export {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{269D85CD-4625-4BA1-B4E0-584137B4CEB3}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-autolink-literal/index.js"
  },
  "{4B9C7557-9878-47DE-AEDF-5A408D6072FB}": {
    "source": "{\n  \"name\": \"mdast-util-gfm-autolink-literal\",\n  \"version\": \"1.0.3\",\n  \"description\": \"mdast extension to parse and serialize GFM autolink literals\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"autolink\",\n    \"auto\",\n    \"link\",\n    \"literal\",\n    \"url\",\n    \"raw\",\n    \"gfm\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm-autolink-literal\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm-autolink-literal/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"ccount\": \"^2.0.0\",\n    \"mdast-util-find-and-replace\": \"^2.0.0\",\n    \"micromark-util-character\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"hast-util-to-html\": \"^8.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-to-hast\": \"^12.0.0\",\n    \"mdast-util-to-markdown\": \"^1.0.0\",\n    \"micromark-extension-gfm-autolink-literal\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"unicorn/prefer-code-point\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"rules\": {\n          \"no-await-in-loop\": \"off\"\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-autolink-literal/package.json"
  },
  "{269D85CD-4625-4BA1-B4E0-584137B4CEB3}": {
    "source": "/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n",
    "mapping": {
      "ccount": "{9197FFD9-E04E-4765-B3CE-AE115477CE07}",
      "mdast-util-find-and-replace": "{B0912AF4-5E27-4231-A3DD-A73BE307B3B2}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-autolink-literal/lib/index.js"
  },
  "{9197FFD9-E04E-4765-B3CE-AE115477CE07}": {
    "source": "/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/ccount/index.js"
  },
  "{74553088-CF9E-40FF-8932-2F7CC3175179}": {
    "source": "{\n  \"name\": \"ccount\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Count how often a character (or substring) is used in a string\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"character\",\n    \"count\",\n    \"char\"\n  ],\n  \"repository\": \"wooorm/ccount\",\n  \"bugs\": \"https://github.com/wooorm/ccount/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.46.0\"\n  },\n  \"scripts\": {\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/ccount/package.json"
  },
  "{B0912AF4-5E27-4231-A3DD-A73BE307B3B2}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Options} Options\n * @typedef {import('./lib/index.js').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('./lib/index.js').Find} Find\n * @typedef {import('./lib/index.js').Replace} Replace\n * @typedef {import('./lib/index.js').ReplaceFunction} ReplaceFunction\n * @typedef {import('./lib/index.js').FindAndReplaceTuple} FindAndReplaceTuple\n * @typedef {import('./lib/index.js').FindAndReplaceSchema} FindAndReplaceSchema\n * @typedef {import('./lib/index.js').FindAndReplaceList} FindAndReplaceList\n */\n\nexport {findAndReplace} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{03F6A383-72D7-4E9B-B05E-C053D75FE318}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/index.js"
  },
  "{7C4814E0-CD93-45FD-B3AC-C5B4F0FBC07B}": {
    "source": "{\n  \"name\": \"mdast-util-find-and-replace\",\n  \"version\": \"2.2.2\",\n  \"description\": \"mdast utility to find and replace text in a tree\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"find\",\n    \"replace\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-find-and-replace\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-find-and-replace/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"escape-string-regexp\": \"^5.0.0\",\n    \"unist-util-is\": \"^5.0.0\",\n    \"unist-util-visit-parents\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-builder\": \"^3.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreFiles\": [\n      \"lib/index.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/package.json"
  },
  "{03F6A383-72D7-4E9B-B05E-C053D75FE318}": {
    "source": "/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n",
    "mapping": {
      "escape-string-regexp": "{C9B5F03A-C1FC-4B23-9224-9F28CED21D5F}",
      "unist-util-visit-parents": "{DE82F3D4-FEA8-4C9D-BDC8-9BD7B3C85E82}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/lib/index.js"
  },
  "{C9B5F03A-C1FC-4B23-9224-9F28CED21D5F}": {
    "source": "export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/escape-string-regexp/index.js"
  },
  "{6FC4921E-F3CC-451D-ABC3-BCBA08F68300}": {
    "source": "{\n\t\"name\": \"escape-string-regexp\",\n\t\"version\": \"5.0.0\",\n\t\"description\": \"Escape RegExp special characters\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/escape-string-regexp\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": \"./index.js\",\n\t\"engines\": {\n\t\t\"node\": \">=12\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && ava && tsd\"\n\t},\n\t\"files\": [\n\t\t\"index.js\",\n\t\t\"index.d.ts\"\n\t],\n\t\"keywords\": [\n\t\t\"escape\",\n\t\t\"regex\",\n\t\t\"regexp\",\n\t\t\"regular\",\n\t\t\"expression\",\n\t\t\"string\",\n\t\t\"special\",\n\t\t\"characters\"\n\t],\n\t\"devDependencies\": {\n\t\t\"ava\": \"^3.15.0\",\n\t\t\"tsd\": \"^0.14.0\",\n\t\t\"xo\": \"^0.38.2\"\n\t}\n}\n",
    "path": "{markdown-translate}/node_modules/escape-string-regexp/package.json"
  },
  "{DE82F3D4-FEA8-4C9D-BDC8-9BD7B3C85E82}": {
    "source": "// Note: types exported from `index.d.ts`\nexport {CONTINUE, EXIT, SKIP, visitParents} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{CD4FEE10-E2AE-49F1-8F70-CA6D7C3357D9}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/index.js"
  },
  "{D2C5E532-2969-4345-BCBE-7369C08B58EE}": {
    "source": "{\n  \"name\": \"unist-util-visit-parents\",\n  \"version\": \"5.1.3\",\n  \"description\": \"unist utility to recursively walk over nodes, with ancestral information\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"ast\",\n    \"visit\",\n    \"traverse\",\n    \"walk\",\n    \"check\",\n    \"parent\",\n    \"parents\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-visit-parents\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-visit-parents/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"browser\": {\n    \"./lib/color.js\": \"./lib/color.browser.js\"\n  },\n  \"react-native\": {\n    \"./lib/color.js\": \"./lib/color.browser.js\"\n  },\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"complex-types.d.ts\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-is\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-gfm\": \"^2.0.0\",\n    \"micromark-extension-gfm\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"strip-ansi\": \"^7.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.7.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"@typescript-eslint/array-type\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true,\n    \"#\": \"needed `any`s\",\n    \"ignoreFiles\": [\n      \"lib/complex-types.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/package.json"
  },
  "{CD4FEE10-E2AE-49F1-8F70-CA6D7C3357D9}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n",
    "mapping": {
      "unist-util-is": "{60ED3885-998E-4C59-85DC-20B9BCB0E893}",
      "./color.js": "{3E53EC6D-D60F-4CD5-BC70-6E10F74EC508}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js"
  },
  "{60ED3885-998E-4C59-85DC-20B9BCB0E893}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Test} Test\n * @typedef {import('./lib/index.js').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('./lib/index.js').AssertAnything} AssertAnything\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').PredicateTest<Kind>} PredicateTest\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').TestFunctionPredicate<Kind>} TestFunctionPredicate\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').AssertPredicate<Kind>} AssertPredicate\n */\n\nexport {is, convert} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{0DDDFAB6-F31A-46D9-82CF-1EFF0200BCAA}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/index.js"
  },
  "{DC8A903E-107D-478F-B7E0-F374BF814FBC}": {
    "source": "{\n  \"name\": \"unist-util-is\",\n  \"version\": \"5.2.1\",\n  \"description\": \"unist utility to check if a node passes a test\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"node\",\n    \"is\",\n    \"equal\",\n    \"check\",\n    \"test\",\n    \"type\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-is\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-is/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Christian Murphy <christian.murphy.42@gmail.com>\",\n    \"Lucas Brandstaetter <lucas@brandstaetter.tech> (https://github.com/Roang-zero1)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash\": \"^4.0.0\",\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"fast-check\": \"^3.0.0\",\n    \"lodash\": \"^4.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unified\": \"^10.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/package.json"
  },
  "{0DDDFAB6-F31A-46D9-82CF-1EFF0200BCAA}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js"
  },
  "{3E53EC6D-D60F-4CD5-BC70-6E10F74EC508}": {
    "source": "/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/color.js"
  },
  "{59EAEA9E-5B9E-499B-8011-A9951FEB406B}": {
    "source": "// Note: extra types exported from `index.d.ts`.\nexport {gfmFootnoteFromMarkdown, gfmFootnoteToMarkdown} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{892DB003-5E46-4458-967D-81B2568F7DC1}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-footnote/index.js"
  },
  "{5105A02E-CA89-4A5E-80C9-2CDD3B9869A8}": {
    "source": "{\n  \"name\": \"mdast-util-gfm-footnote\",\n  \"version\": \"1.0.2\",\n  \"description\": \"mdast extension to parse and serialize GFM footnotes\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"gfm\",\n    \"footnote\",\n    \"note\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm-footnote\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm-footnote/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-to-markdown\": \"^1.3.0\",\n    \"micromark-util-normalize-identifier\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"micromark-extension-gfm-footnote\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-footnote/package.json"
  },
  "{892DB003-5E46-4458-967D-81B2568F7DC1}": {
    "source": "/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n",
    "mapping": {
      "mdast-util-to-markdown/lib/util/association.js": "{903DD238-C55B-47A5-B355-874A64128720}",
      "mdast-util-to-markdown/lib/util/container-flow.js": "{D5FF9E5E-5B86-4CAE-88C6-1A4ACA69AF48}",
      "mdast-util-to-markdown/lib/util/indent-lines.js": "{D1D83C05-680E-4404-B1F6-D823D4F1E262}",
      "mdast-util-to-markdown/lib/util/safe.js": "{BFD2FBBD-5344-423E-86FB-BE75E4A589DF}",
      "mdast-util-to-markdown/lib/util/track.js": "{F3996980-1E5F-4C5F-B0DB-5578313CA9E7}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-footnote/lib/index.js"
  },
  "{903DD238-C55B-47A5-B355-874A64128720}": {
    "source": "/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/association.js"
  },
  "{CF50BD71-37D7-4A7A-A9A0-6D0687524E48}": {
    "source": "{\n  \"name\": \"mdast-util-to-markdown\",\n  \"version\": \"1.5.0\",\n  \"description\": \"mdast utility to serialize markdown\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"serialize\",\n    \"stringify\",\n    \"compile\",\n    \"syntax\",\n    \"tree\",\n    \"ast\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-to-markdown\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-to-markdown/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/unist\": \"^2.0.0\",\n    \"longest-streak\": \"^3.0.0\",\n    \"mdast-util-phrasing\": \"^3.0.0\",\n    \"mdast-util-to-string\": \"^3.0.0\",\n    \"micromark-util-decode-string\": \"^1.0.0\",\n    \"unist-util-visit\": \"^4.0.0\",\n    \"zwitch\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-util-remove-position\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"complexity\": \"off\",\n      \"unicorn/prefer-code-point\": \"off\",\n      \"unicorn/prefer-switch\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true,\n    \"ignoreFiles\": [\n      \"lib/types.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/package.json"
  },
  "{D5FF9E5E-5B86-4CAE-88C6-1A4ACA69AF48}": {
    "source": "/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/container-flow.js"
  },
  "{D1D83C05-680E-4404-B1F6-D823D4F1E262}": {
    "source": "/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js"
  },
  "{BFD2FBBD-5344-423E-86FB-BE75E4A589DF}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n",
    "mapping": {
      "./pattern-compile.js": "{C15C5F18-63C6-4A30-82A4-D19DE3D88EDD}",
      "./pattern-in-scope.js": "{1A927487-AEE5-490F-BB59-75F9C0988092}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/safe.js"
  },
  "{C15C5F18-63C6-4A30-82A4-D19DE3D88EDD}": {
    "source": "/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js"
  },
  "{1A927487-AEE5-490F-BB59-75F9C0988092}": {
    "source": "/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js"
  },
  "{F3996980-1E5F-4C5F-B0DB-5578313CA9E7}": {
    "source": "/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/track.js"
  },
  "{641DA25D-F797-4D8E-8F5A-2AACB9DBE4E2}": {
    "source": "// Note: extra types in `index.d.ts`.\nexport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{21363CB0-B412-4834-8774-77621EDD88BF}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-strikethrough/index.js"
  },
  "{B717B505-7F7C-4350-9752-AB2BFFA5D883}": {
    "source": "{\n  \"name\": \"mdast-util-gfm-strikethrough\",\n  \"version\": \"1.0.3\",\n  \"description\": \"mdast extension to parse and serialize GFM strikethrough\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"strikethrough\",\n    \"strike\",\n    \"through\",\n    \"del\",\n    \"delete\",\n    \"deletion\",\n    \"gfm\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm-strikethrough\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm-strikethrough/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-to-markdown\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"micromark-extension-gfm-strikethrough\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-util-remove-position\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-strikethrough/package.json"
  },
  "{21363CB0-B412-4834-8774-77621EDD88BF}": {
    "source": "/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n",
    "mapping": {
      "mdast-util-to-markdown/lib/util/container-phrasing.js": "{503CC804-7E20-45AA-A73F-6FD640AA7C3C}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-strikethrough/lib/index.js"
  },
  "{503CC804-7E20-45AA-A73F-6FD640AA7C3C}": {
    "source": "/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"
  },
  "{0E64E3B7-CD58-4CFA-BA83-F1204AE1AC73}": {
    "source": "// Note: types exposed from `index.d.ts`.\nexport {gfmTableFromMarkdown, gfmTableToMarkdown} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{AE8C6CF0-07AF-4DAE-B190-16A93F516738}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-table/index.js"
  },
  "{9B72E8A8-4BF8-415C-9EBC-63951D40F6F0}": {
    "source": "{\n  \"name\": \"mdast-util-gfm-table\",\n  \"version\": \"1.0.7\",\n  \"description\": \"mdast extension to parse and serialize GFM tables\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"table\",\n    \"row\",\n    \"column\",\n    \"cell\",\n    \"tabular\",\n    \"gfm\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm-table\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm-table/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"markdown-table\": \"^3.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-to-markdown\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"micromark-extension-gfm-table\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"string-width\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-util-remove-position\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-table/package.json"
  },
  "{AE8C6CF0-07AF-4DAE-B190-16A93F516738}": {
    "source": "/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n",
    "mapping": {
      "mdast-util-to-markdown/lib/handle/inline-code.js": "{FCD60D44-B84A-4ABA-8447-946905F6A7DB}",
      "markdown-table": "{574E3CEE-25F5-4355-B7DB-3920E301876D}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-table/lib/index.js"
  },
  "{FCD60D44-B84A-4ABA-8447-946905F6A7DB}": {
    "source": "/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js"
  },
  "{574E3CEE-25F5-4355-B7DB-3920E301876D}": {
    "source": "/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/markdown-table/index.js"
  },
  "{6AA53681-E6E9-4B97-8482-63FEB4F28A4B}": {
    "source": "{\n  \"name\": \"markdown-table\",\n  \"version\": \"3.0.3\",\n  \"description\": \"Generate a markdown (GFM) table\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"text\",\n    \"markdown\",\n    \"table\",\n    \"align\",\n    \"rows\",\n    \"tabular\"\n  ],\n  \"repository\": \"wooorm/markdown-table\",\n  \"bugs\": \"https://github.com/wooorm/markdown-table/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"chalk\": \"^5.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"strip-ansi\": \"^7.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"complexity\": \"off\",\n      \"unicorn/prefer-switch\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/markdown-table/package.json"
  },
  "{74DBD367-6412-48C5-A306-2C5DF5479504}": {
    "source": "export {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{BC8C3B9C-129A-472B-BE3D-F93A7A589ED1}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-task-list-item/index.js"
  },
  "{5ED7AD30-2488-4172-98DD-C26F8B99D2D6}": {
    "source": "{\n  \"name\": \"mdast-util-gfm-task-list-item\",\n  \"version\": \"1.0.2\",\n  \"description\": \"mdast extension to parse and serialize GFM task list items\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"markup\",\n    \"task\",\n    \"list\",\n    \"item\",\n    \"check\",\n    \"checkbox\",\n    \"todo\",\n    \"gfm\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-gfm-task-list-item\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-gfm-task-list-item/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-to-markdown\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"micromark-extension-gfm-task-list-item\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-util-remove-position\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-task-list-item/package.json"
  },
  "{BC8C3B9C-129A-472B-BE3D-F93A7A589ED1}": {
    "source": "/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n",
    "mapping": {
      "mdast-util-to-markdown/lib/handle/list-item.js": "{903CAD6A-DE96-4A55-BFA9-541198E6CA56}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-gfm-task-list-item/lib/index.js"
  },
  "{903CAD6A-DE96-4A55-BFA9-541198E6CA56}": {
    "source": "/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n",
    "mapping": {
      "../util/check-bullet.js": "{4CD06D5C-2F93-400E-8B5D-B9E43EDEF6BD}",
      "../util/check-list-item-indent.js": "{D81ED0E9-0B21-4681-B916-A1F9185D77EA}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/list-item.js"
  },
  "{4CD06D5C-2F93-400E-8B5D-B9E43EDEF6BD}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js"
  },
  "{D81ED0E9-0B21-4681-B916-A1F9185D77EA}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js"
  },
  "{85AE91F3-4118-4741-9FA8-50CAF49B8219}": {
    "source": "'use strict'\n\nvar mdast2hast = require('mdast-util-to-hast')\n\nmodule.exports = remark2rehype\n\n// Attacher.\n// If a destination is given, runs the destination with the new hast tree\n// (bridge mode).\n// Without destination, returns the tree: further plugins run on that tree\n// (mutate mode).\nfunction remark2rehype(destination, options) {\n  if (destination && !destination.process) {\n    options = destination\n    destination = null\n  }\n\n  return destination ? bridge(destination, options) : mutate(options)\n}\n\n// Bridge mode.\n// Runs the destination with the new hast tree.\nfunction bridge(destination, options) {\n  return transformer\n\n  function transformer(node, file, next) {\n    destination.run(mdast2hast(node, options), file, done)\n\n    function done(err) {\n      next(err)\n    }\n  }\n}\n\n// Mutate-mode.\n// Further transformers run on the hast tree.\nfunction mutate(options) {\n  return transformer\n\n  function transformer(node) {\n    return mdast2hast(node, options)\n  }\n}\n",
    "mapping": {
      "mdast-util-to-hast": "{B71E3B3C-11DA-41B4-A411-510416BBAEFD}"
    },
    "path": "{markdown-translate}/node_modules/remark-rehype/index.js"
  },
  "{996C11A5-8D23-41E4-B995-1D3810C1B58D}": {
    "source": "{\n  \"_from\": \"remark-rehype\",\n  \"_id\": \"remark-rehype@7.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-uqQ/VbaTdxyu/da6npHAso6hA00cMqhA3a59RziQdOLN2KEIkPykAVy52IcmZEVTuauXO0VtpxkyCey4phtHzQ==\",\n  \"_location\": \"/remark-rehype\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"remark-rehype\",\n    \"name\": \"remark-rehype\",\n    \"escapedName\": \"remark-rehype\",\n    \"rawSpec\": \"\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"latest\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/remark-rehype/-/remark-rehype-7.0.0.tgz\",\n  \"_shasum\": \"8e106e49806c69b2e9523b76d24965119e2da67b\",\n  \"_spec\": \"remark-rehype\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/remarkjs/remark-rehype/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    },\n    {\n      \"name\": \"John Otander\",\n      \"email\": \"johnotander@gmail.com\",\n      \"url\": \"https://johno.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"mdast-util-to-hast\": \"^9.1.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"remark plugin to transform to rehype\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype-stringify\": \"^7.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-parse\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"remark-stringify\": \"^8.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"unified\": \"^9.0.0\",\n    \"xo\": \"^0.30.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"types/index.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/remarkjs/remark-rehype#readme\",\n  \"keywords\": [\n    \"unified\",\n    \"remark\",\n    \"rehype\",\n    \"remark-plugin\",\n    \"rehype-plugin\",\n    \"plugin\",\n    \"html\",\n    \"hast\",\n    \"mdast\",\n    \"markdown\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"remark-rehype\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/remarkjs/remark-rehype.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s remarkRehype > remark-rehype.js\",\n    \"build-mangle\": \"browserify . -s remarkRehype -p tinyify > remark-rehype.min.js\",\n    \"format\": \"remark . -qfo && prettier --write . && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"7.0.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"remark-rehype.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/remark-rehype/package.json"
  },
  "{B71E3B3C-11DA-41B4-A411-510416BBAEFD}": {
    "source": "'use strict'\nmodule.exports = require('./lib')\n",
    "mapping": {
      "./lib": "{2CE323E7-DF62-4302-899C-F64943B7A062}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/index.js"
  },
  "{5BBBA1C5-CCFA-4F30-AF29-70C68A995395}": {
    "source": "{\n  \"_from\": \"mdast-util-to-hast@^9.1.0\",\n  \"_id\": \"mdast-util-to-hast@9.1.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Akl2Vi9y9cSdr19/Dfu58PVwifPXuFt1IrHe7l+Crme1KvgUT+5z+cHLVcQVGCiNTZZcdqjnuv9vPkGsqWytWA==\",\n  \"_location\": \"/mdast-util-to-hast\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"mdast-util-to-hast@^9.1.0\",\n    \"name\": \"mdast-util-to-hast\",\n    \"escapedName\": \"mdast-util-to-hast\",\n    \"rawSpec\": \"^9.1.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^9.1.0\"\n  },\n  \"_requiredBy\": [\n    \"/remark-rehype\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mdast-util-to-hast/-/mdast-util-to-hast-9.1.0.tgz\",\n  \"_shasum\": \"6ef121dd3cd3b006bf8650b1b9454da0faf79ffe\",\n  \"_spec\": \"mdast-util-to-hast@^9.1.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\remark-rehype\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/mdast-util-to-hast/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/unist\": \"^2.0.3\",\n    \"collapse-white-space\": \"^1.0.0\",\n    \"detab\": \"^2.0.0\",\n    \"mdast-util-definitions\": \"^3.0.0\",\n    \"mdurl\": \"^1.0.0\",\n    \"trim-lines\": \"^1.0.0\",\n    \"unist-builder\": \"^2.0.0\",\n    \"unist-util-generated\": \"^1.0.0\",\n    \"unist-util-position\": \"^3.0.0\",\n    \"unist-util-visit\": \"^2.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"mdast utility to transform to hast\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.30.0\"\n  },\n  \"files\": [\n    \"lib\",\n    \"index.js\",\n    \"types/index.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/mdast-util-to-hast#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"html\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"mdast-util-to-hast\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/mdast-util-to-hast.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify index.js -s mdastUtilToHast > mdast-util-to-hast.js\",\n    \"build-mangle\": \"browserify index.js -s mdastUtilToHast -p tinyify > mdast-util-to-hast.min.js\",\n    \"format\": \"remark . -qfo && prettier --write . && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test/index.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"9.1.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"**/*.ts\",\n      \"mdast-util-to-hast.js\"\n    ],\n    \"rules\": {\n      \"unicorn/prefer-includes\": \"off\"\n    }\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/package.json"
  },
  "{2CE323E7-DF62-4302-899C-F64943B7A062}": {
    "source": "'use strict'\n\nmodule.exports = toHast\n\nvar u = require('unist-builder')\nvar visit = require('unist-util-visit')\nvar position = require('unist-util-position')\nvar generated = require('unist-util-generated')\nvar definitions = require('mdast-util-definitions')\nvar one = require('./one')\nvar footer = require('./footer')\nvar handlers = require('./handlers')\n\nvar own = {}.hasOwnProperty\n\nvar deprecationWarningIssued = false\n\n// Factory to transform.\nfunction factory(tree, options) {\n  var settings = options || {}\n\n  // Issue a warning if the deprecated tag 'allowDangerousHTML' is used\n  if (settings.allowDangerousHTML !== undefined && !deprecationWarningIssued) {\n    deprecationWarningIssued = true\n    console.warn(\n      'mdast-util-to-hast: deprecation: `allowDangerousHTML` is nonstandard, use `allowDangerousHtml` instead'\n    )\n  }\n\n  var dangerous = settings.allowDangerousHtml || settings.allowDangerousHTML\n  var footnoteById = {}\n\n  h.dangerous = dangerous\n  h.definition = definitions(tree, settings)\n  h.footnoteById = footnoteById\n  h.footnoteOrder = []\n  h.augment = augment\n  h.handlers = Object.assign({}, handlers, settings.handlers)\n  h.unknownHandler = settings.unknownHandler\n\n  visit(tree, 'footnoteDefinition', onfootnotedefinition)\n\n  return h\n\n  // Finalise the created `right`, a hast node, from `left`, an mdast node.\n  function augment(left, right) {\n    var data\n    var ctx\n\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left) {\n      data = left.data\n\n      if (right.type === 'element' && data.hName) {\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = Object.assign({}, right.properties, data.hProperties)\n      }\n\n      if (right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    ctx = left && left.position ? left : {position: left}\n\n    if (!generated(ctx)) {\n      right.position = {\n        start: position.start(ctx),\n        end: position.end(ctx)\n      }\n    }\n\n    return right\n  }\n\n  // Create an element for `node`.\n  function h(node, tagName, props, children) {\n    if (\n      (children === undefined || children === null) &&\n      typeof props === 'object' &&\n      'length' in props\n    ) {\n      children = props\n      props = {}\n    }\n\n    return augment(node, {\n      type: 'element',\n      tagName: tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n\n  function onfootnotedefinition(definition) {\n    var id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8d48e57/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  }\n}\n\n// Transform `tree`, which is an mdast node, to a hast node.\nfunction toHast(tree, options) {\n  var h = factory(tree, options)\n  var node = one(h, tree)\n  var foot = footer(h)\n\n  if (foot) {\n    node.children = node.children.concat(u('text', '\\n'), foot)\n  }\n\n  return node\n}\n",
    "mapping": {
      "unist-builder": "{F56EF3D0-8C14-45E0-A4A7-CFC1E02A37FA}",
      "unist-util-visit": "{E50938A2-F290-4F72-86F3-BA46E1C7AFF0}",
      "unist-util-position": "{11F99B07-32AB-4AE6-A6B9-92E0AA60BED3}",
      "unist-util-generated": "{81E5BEB2-6C61-4B06-B767-204C35C37BE1}",
      "mdast-util-definitions": "{A6E6FC0E-F21B-4F2D-A88F-A879F6B6144A}",
      "./one": "{3F0B7D63-45B1-491C-A3C5-4011B9C8DBD2}",
      "./footer": "{7A4B1976-8126-4556-B62E-A810C01A1A27}",
      "./handlers": "{650BF5C8-ADB1-4D2E-B6ED-E4BCAEAD1716}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/index.js"
  },
  "{F56EF3D0-8C14-45E0-A4A7-CFC1E02A37FA}": {
    "source": "'use strict'\n\nmodule.exports = u\n\nfunction u(type, props, value) {\n  var node\n\n  if (\n    (value === null || value === undefined) &&\n    (typeof props !== 'object' || Array.isArray(props))\n  ) {\n    value = props\n    props = {}\n  }\n\n  node = Object.assign({type: String(type)}, props)\n\n  if (Array.isArray(value)) {\n    node.children = value\n  } else if (value !== null && value !== undefined) {\n    node.value = String(value)\n  }\n\n  return node\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-builder/index.js"
  },
  "{A8C0F151-E184-443F-B8E4-38FE1D303E71}": {
    "source": "{\n  \"_from\": \"unist-builder\",\n  \"_id\": \"unist-builder@2.0.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-f98yt5pnlMWlzP539tPc4grGMsFaQQlP/vM396b00jngsiINumNmsY8rkXjfoi1c6QaM8nQ3vaGDuoKWbe/1Uw==\",\n  \"_location\": \"/unist-builder\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"unist-builder\",\n    \"name\": \"unist-builder\",\n    \"escapedName\": \"unist-builder\",\n    \"rawSpec\": \"\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"latest\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\",\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-builder/-/unist-builder-2.0.3.tgz\",\n  \"_shasum\": \"77648711b5d86af0942f334397a33c5e91516436\",\n  \"_spec\": \"unist-builder\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\",\n  \"author\": {\n    \"name\": \"Eugene Sharygin\",\n    \"email\": \"eush77@gmail.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-builder/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Eugene Sharygin\",\n      \"email\": \"eush77@gmail.com\"\n    },\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    },\n    {\n      \"name\": \"Christian Murphy\",\n      \"email\": \"christian.murphy.42@gmail.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"unist utility to create a new trees with a nice syntax\",\n  \"devDependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"xo\": \"^0.26.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"types/index.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-builder#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"ast\",\n    \"build\",\n    \"builder\",\n    \"create\",\n    \"dsl\",\n    \"hyperscript\",\n    \"sugar\",\n    \"syntax\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-builder\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-builder.git\"\n  },\n  \"scripts\": {\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"2.0.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-builder/package.json"
  },
  "{E50938A2-F290-4F72-86F3-BA46E1C7AFF0}": {
    "source": "'use strict'\n\nmodule.exports = visit\n\nvar visitParents = require('unist-util-visit-parents')\n\nvar CONTINUE = visitParents.CONTINUE\nvar SKIP = visitParents.SKIP\nvar EXIT = visitParents.EXIT\n\nvisit.CONTINUE = CONTINUE\nvisit.SKIP = SKIP\nvisit.EXIT = EXIT\n\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1]\n    var index = parent ? parent.children.indexOf(node) : null\n    return visitor(node, index, parent)\n  }\n}\n",
    "mapping": {
      "unist-util-visit-parents": "{E2697D2E-208B-4D0C-A902-5FA1DC0E4EA4}"
    },
    "path": "{markdown-translate}/node_modules/unist-util-visit/index.js"
  },
  "{46CD87F4-6BF8-40F4-AEEC-7AED59ABE126}": {
    "source": "{\n  \"_from\": \"unist-util-visit\",\n  \"_id\": \"unist-util-visit@2.0.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-iJ4/RczbJMkD0712mGktuGpm/U4By4FfDonL7N/9tATGIF4imikjOuagyMY53tnZq3NP6BcmlrHhEKAfGWjh7Q==\",\n  \"_location\": \"/unist-util-visit\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"tag\",\n    \"registry\": true,\n    \"raw\": \"unist-util-visit\",\n    \"name\": \"unist-util-visit\",\n    \"escapedName\": \"unist-util-visit\",\n    \"rawSpec\": \"\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"latest\"\n  },\n  \"_requiredBy\": [\n    \"#USER\",\n    \"/\",\n    \"/hast-util-to-mdast\",\n    \"/mdast-util-compact\",\n    \"/mdast-util-definitions\",\n    \"/mdast-util-to-hast\",\n    \"/unist-util-remove-position\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-2.0.3.tgz\",\n  \"_shasum\": \"c3703893146df47203bb8a9795af47d7b971208c\",\n  \"_spec\": \"unist-util-visit\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-visit/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    },\n    {\n      \"name\": \"Eugene Sharygin\",\n      \"email\": \"eush77@gmail.com\"\n    },\n    {\n      \"name\": \"Richard Gibson\",\n      \"email\": \"richard.gibson@gmail.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-is\": \"^4.0.0\",\n    \"unist-util-visit-parents\": \"^3.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"unist utility to visit nodes\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark\": \"^12.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"typescript\": \"^3.0.0\",\n    \"unified\": \"^9.0.0\",\n    \"xo\": \"^0.32.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"types/index.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-visit#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"remark\",\n    \"retext\",\n    \"rehype\",\n    \"mdast\",\n    \"hast\",\n    \"xast\",\n    \"nlcst\",\n    \"natural\",\n    \"language\",\n    \"markdown\",\n    \"html\",\n    \"xml\",\n    \"tree\",\n    \"ast\",\n    \"node\",\n    \"visit\",\n    \"walk\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-visit\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-visit.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilVisit > unist-util-visit.js\",\n    \"build-mangle\": \"browserify . -s unistUtilVisit -p tinyify > unist-util-visit.min.js\",\n    \"format\": \"remark . -qfo && prettier . --write && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"2.0.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/prefer-set-has\": \"off\"\n    },\n    \"ignores\": [\n      \"unist-util-visit.js\",\n      \"types\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-visit/package.json"
  },
  "{E2697D2E-208B-4D0C-A902-5FA1DC0E4EA4}": {
    "source": "'use strict'\n\nmodule.exports = visitParents\n\nvar convert = require('unist-util-is/convert')\nvar color = require('./color')\n\nvar CONTINUE = true\nvar SKIP = 'skip'\nvar EXIT = false\n\nvisitParents.CONTINUE = CONTINUE\nvisitParents.SKIP = SKIP\nvisitParents.EXIT = EXIT\n\nfunction visitParents(tree, test, visitor, reverse) {\n  var is\n\n  if (func(test) && !func(visitor)) {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  is = convert(test)\n\n  one(tree, null, [])()\n\n  function one(child, index, parents) {\n    var value = object(child) ? child : {}\n    var name\n\n    if (string(value.type)) {\n      name = string(value.tagName)\n        ? value.tagName\n        : string(value.name)\n        ? value.name\n        : undefined\n\n      node.displayName =\n        'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'\n    }\n\n    return node\n\n    function node() {\n      var result = []\n      var subresult\n\n      if (!test || is(child, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(child, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if (!child.children || result[0] === SKIP) {\n        return result\n      }\n\n      subresult = toResult(children(child.children, parents.concat(child)))\n      return subresult[0] === EXIT ? subresult : result\n    }\n  }\n\n  // Visit children in `parent`.\n  function children(children, parents) {\n    var min = -1\n    var step = reverse ? -1 : 1\n    var index = (reverse ? children.length : min) + step\n    var child\n    var result\n\n    while (index > min && index < children.length) {\n      child = children[index]\n      result = one(child, index, parents)()\n\n      if (result[0] === EXIT) {\n        return result\n      }\n\n      index = typeof result[1] === 'number' ? result[1] : index + step\n    }\n  }\n}\n\nfunction toResult(value) {\n  if (object(value) && 'length' in value) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n\nfunction func(d) {\n  return typeof d === 'function'\n}\n\nfunction string(d) {\n  return typeof d === 'string'\n}\n\nfunction object(d) {\n  return typeof d === 'object' && d !== null\n}\n",
    "mapping": {
      "unist-util-is/convert": "{3111DD30-80DD-4E90-A9A4-AF4532C3E634}",
      "./color": "{ABDE00E2-658C-4165-ABEE-B0835B2F1FD1}"
    },
    "path": "{markdown-translate}/node_modules/unist-util-visit-parents/index.js"
  },
  "{202DDA89-4EBE-43E2-896B-86B67D9DA038}": {
    "source": "{\n  \"_from\": \"unist-util-visit-parents@^3.0.0\",\n  \"_id\": \"unist-util-visit-parents@3.1.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-0g4wbluTF93npyPrp/ymd3tCDTMnP0yo2akFD2FIBAYXq/Sga3lwaU1D8OYKbtpioaI6CkDcQ6fsMnmtzt7htw==\",\n  \"_location\": \"/unist-util-visit-parents\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-visit-parents@^3.0.0\",\n    \"name\": \"unist-util-visit-parents\",\n    \"escapedName\": \"unist-util-visit-parents\",\n    \"rawSpec\": \"^3.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/unist-util-visit\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-3.1.0.tgz\",\n  \"_shasum\": \"4dd262fb9dcfe44f297d53e882fc6ff3421173d5\",\n  \"_spec\": \"unist-util-visit-parents@^3.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\unist-util-visit\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"browser\": {\n    \"./color.js\": \"./color.browser.js\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-visit-parents/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-is\": \"^4.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"unist utility to recursively walk over nodes, with ancestral information\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark\": \"^12.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"strip-ansi\": \"^6.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"typescript\": \"^3.0.0\",\n    \"unified\": \"^9.0.0\",\n    \"xo\": \"^0.32.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"color.js\",\n    \"color.browser.js\",\n    \"types/index.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-visit-parents#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"ast\",\n    \"visit\",\n    \"traverse\",\n    \"walk\",\n    \"check\",\n    \"parent\",\n    \"parents\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-visit-parents\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"react-native\": {\n    \"./color.js\": \"./color.browser.js\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-visit-parents.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify index.js -s unistUtilVisitParents > unist-util-visit-parents.js\",\n    \"build-mangle\": \"browserify index.js -s unistUtilVisitParents -p tinyify > unist-util-visit-parents.min.js\",\n    \"format\": \"remark . -qfo && prettier . --write && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"3.1.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/prefer-set-has\": \"off\",\n      \"unicorn/prefer-reflect-apply\": \"off\"\n    },\n    \"ignores\": [\n      \"types/\",\n      \"unist-util-visit-parents.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-visit-parents/package.json"
  },
  "{3111DD30-80DD-4E90-A9A4-AF4532C3E634}": {
    "source": "'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return ok\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\nfunction convertAll(tests) {\n  var results = []\n  var length = tests.length\n  var index = -1\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction matchesFactory(test) {\n  return matches\n\n  function matches(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-is/convert.js"
  },
  "{60D5C806-D72B-4D18-8B17-9E98B4AFAB68}": {
    "source": "{\n  \"_from\": \"unist-util-is@^4.0.0\",\n  \"_id\": \"unist-util-is@4.0.2\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Ofx8uf6haexJwI1gxWMGg6I/dLnF2yE+KibhD3/diOqY2TinLcqHXCV6OI5gFVn3xQqDH+u0M625pfKwIwgBKQ==\",\n  \"_location\": \"/unist-util-is\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-is@^4.0.0\",\n    \"name\": \"unist-util-is\",\n    \"escapedName\": \"unist-util-is\",\n    \"rawSpec\": \"^4.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^4.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-html\",\n    \"/mdast-util-phrasing\",\n    \"/rehype-minify-whitespace\",\n    \"/unist-util-find-after\",\n    \"/unist-util-visit\",\n    \"/unist-util-visit-parents\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-is/-/unist-util-is-4.0.2.tgz\",\n  \"_shasum\": \"c7d1341188aa9ce5b3cff538958de9895f14a5de\",\n  \"_spec\": \"unist-util-is@^4.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-html\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-is/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    },\n    {\n      \"name\": \"Christian Murphy\",\n      \"email\": \"christian.murphy.42@gmail.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"unist utility to check if a node passes a test\",\n  \"devDependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"unified\": \"^8.0.0\",\n    \"xo\": \"^0.26.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"convert.js\",\n    \"index.d.ts\",\n    \"convert.d.ts\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-is#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"node\",\n    \"is\",\n    \"equal\",\n    \"check\",\n    \"test\",\n    \"type\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-is\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-is.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilIs > unist-util-is.js\",\n    \"build-mangle\": \"browserify . -s unistUtilIs -p tinyify > unist-util-is.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.{js,ts}\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint .\"\n  },\n  \"types\": \"index.d.ts\",\n  \"version\": \"4.0.2\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/prefer-type-error\": \"off\",\n      \"unicorn/prefer-reflect-apply\": \"off\"\n    },\n    \"ignore\": [\n      \"unist-util-is.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-is/package.json"
  },
  "{ABDE00E2-658C-4165-ABEE-B0835B2F1FD1}": {
    "source": "module.exports = color\nfunction color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-visit-parents/color.js"
  },
  "{11F99B07-32AB-4AE6-A6B9-92E0AA60BED3}": {
    "source": "'use strict'\n\nvar start = factory('start')\nvar end = factory('end')\n\nmodule.exports = position\n\nposition.start = start\nposition.end = end\n\nfunction position(node) {\n  return {start: start(node), end: end(node)}\n}\n\nfunction factory(type) {\n  point.displayName = type\n\n  return point\n\n  function point(node) {\n    var point = (node && node.position && node.position[type]) || {}\n\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: isNaN(point.offset) ? null : point.offset\n    }\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-position/index.js"
  },
  "{CEFE9EC3-9383-4F16-95EF-3F57242643BB}": {
    "source": "{\n  \"_from\": \"unist-util-position@^3.0.0\",\n  \"_id\": \"unist-util-position@3.1.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-w+PkwCbYSFw8vpgWD0v7zRCl1FpY3fjDSQ3/N/wNd9Ffa4gPi8+4keqt99N3XW6F99t/mUzp2xAhNmfKWp95QA==\",\n  \"_location\": \"/unist-util-position\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-position@^3.0.0\",\n    \"name\": \"unist-util-position\",\n    \"escapedName\": \"unist-util-position\",\n    \"rawSpec\": \"^3.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-position/-/unist-util-position-3.1.0.tgz\",\n  \"_shasum\": \"1c42ee6301f8d52f47d14f62bbdb796571fa2d47\",\n  \"_spec\": \"unist-util-position@^3.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-position/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"unist utility to get the position of a node\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.26.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-position#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"node\",\n    \"position\",\n    \"point\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-position\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-position.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilPosition > unist-util-position.js\",\n    \"build-mangle\": \"browserify . -s unistUtilPosition -p tinyify > unist-util-position.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"3.1.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"unist-util-position.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-position/package.json"
  },
  "{81E5BEB2-6C61-4B06-B767-204C35C37BE1}": {
    "source": "'use strict'\n\nmodule.exports = generated\n\nfunction generated(node) {\n  var position = optional(optional(node).position)\n  var start = optional(position.start)\n  var end = optional(position.end)\n\n  return !start.line || !start.column || !end.line || !end.column\n}\n\nfunction optional(value) {\n  return value && typeof value === 'object' ? value : {}\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-generated/index.js"
  },
  "{E8FB42A6-EEA3-43D3-AF76-93F02F98F097}": {
    "source": "{\n  \"_from\": \"unist-util-generated@^1.0.0\",\n  \"_id\": \"unist-util-generated@1.1.5\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-1TC+NxQa4N9pNdayCYA1EGUOCAO0Le3fVp7Jzns6lnua/mYgwHo0tz5WUAfrdpNch1RZLHc61VZ1SDgrtNXLSw==\",\n  \"_location\": \"/unist-util-generated\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-generated@^1.0.0\",\n    \"name\": \"unist-util-generated\",\n    \"escapedName\": \"unist-util-generated\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-generated/-/unist-util-generated-1.1.5.tgz\",\n  \"_shasum\": \"1e903e68467931ebfaea386dae9ea253628acd42\",\n  \"_spec\": \"unist-util-generated@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-generated/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"deprecated\": false,\n  \"description\": \"Check if a Unist node is generated\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^14.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-generated#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"position\",\n    \"location\",\n    \"generated\",\n    \"util\",\n    \"utility\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-generated\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-generated.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilGenerated > unist-util-generated.js\",\n    \"build-mangle\": \"browserify . -s unistUtilGenerated -p tinyify > unist-util-generated.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.1.5\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"unist-util-generated.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-generated/package.json"
  },
  "{A6E6FC0E-F21B-4F2D-A88F-A879F6B6144A}": {
    "source": "'use strict'\n\nvar visit = require('unist-util-visit')\n\nmodule.exports = getDefinitionFactory\n\nvar own = {}.hasOwnProperty\n\n// Get a definition in `node` by `identifier`.\nfunction getDefinitionFactory(node, options) {\n  return getterFactory(gather(node, options))\n}\n\n// Gather all definitions in `node`\nfunction gather(node, options) {\n  var cache = {}\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', options && options.commonmark ? commonmark : normal)\n\n  return cache\n\n  function commonmark(definition) {\n    var id = normalise(definition.identifier)\n    if (!own.call(cache, id)) {\n      cache[id] = definition\n    }\n  }\n\n  function normal(definition) {\n    cache[normalise(definition.identifier)] = definition\n  }\n}\n\n// Factory to get a node from the given definition-cache.\nfunction getterFactory(cache) {\n  return getter\n\n  // Get a node from the bound definition-cache.\n  function getter(identifier) {\n    var id = identifier && normalise(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\nfunction normalise(identifier) {\n  return identifier.toUpperCase()\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-definitions/index.js"
  },
  "{4206B95A-AAFF-4096-91C3-64B94E422A78}": {
    "source": "{\n  \"_from\": \"mdast-util-definitions@^3.0.0\",\n  \"_id\": \"mdast-util-definitions@3.0.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-BAv2iUm/e6IK/b2/t+Fx69EL/AGcq/IG2S+HxHjDJGfLJtd6i9SZUS76aC9cig+IEucsqxKTR0ot3m933R3iuA==\",\n  \"_location\": \"/mdast-util-definitions\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"mdast-util-definitions@^3.0.0\",\n    \"name\": \"mdast-util-definitions\",\n    \"escapedName\": \"mdast-util-definitions\",\n    \"rawSpec\": \"^3.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mdast-util-definitions/-/mdast-util-definitions-3.0.1.tgz\",\n  \"_shasum\": \"06af6c49865fc63d6d7d30125569e2f7ae3d0a86\",\n  \"_spec\": \"mdast-util-definitions@^3.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/mdast-util-definitions/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"unist-util-visit\": \"^2.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"mdast utility to find definition nodes in a tree\",\n  \"devDependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"browserify\": \"^16.0.0\",\n    \"dtslint\": \"^3.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.5\",\n    \"remark\": \"^12.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.30.0\"\n  },\n  \"files\": [\n    \"types\",\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/mdast-util-definitions#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"tree\",\n    \"node\",\n    \"definition\",\n    \"find\",\n    \"cache\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"mdast-util-definitions\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/mdast-util-definitions.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s mdastUtilDefinitions > mdast-util-definitions.js\",\n    \"build-mangle\": \"browserify . -s mdastUtilDefinitions -p tinyify > mdast-util-definitions.min.js\",\n    \"format\": \"remark . -qfo && prettier --write . && xo --fix --ignore types\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage && npm run test-types\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test-types\": \"dtslint types\"\n  },\n  \"types\": \"types/index.d.ts\",\n  \"version\": \"3.0.1\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignore\": [\n      \"types\",\n      \"mdast-util-definitions.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-definitions/package.json"
  },
  "{3F0B7D63-45B1-491C-A3C5-4011B9C8DBD2}": {
    "source": "'use strict'\n\nmodule.exports = one\n\nvar u = require('unist-builder')\nvar all = require('./all')\n\nvar own = {}.hasOwnProperty\n\n// Transform an unknown node.\nfunction unknown(h, node) {\n  if (text(node)) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n// Visit a node.\nfunction one(h, node, parent) {\n  var type = node && node.type\n  var fn = own.call(h.handlers, type) ? h.handlers[type] : h.unknownHandler\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n// Check if the node should be renderered as a text node.\nfunction text(node) {\n  var data = node.data || {}\n\n  if (\n    own.call(data, 'hName') ||\n    own.call(data, 'hProperties') ||\n    own.call(data, 'hChildren')\n  ) {\n    return false\n  }\n\n  return 'value' in node\n}\n",
    "mapping": {
      "./all": "{B40B60DC-ED5C-435A-AE3C-40E82D3C3DB6}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/one.js"
  },
  "{B40B60DC-ED5C-435A-AE3C-40E82D3C3DB6}": {
    "source": "'use strict'\n\nmodule.exports = all\n\nvar one = require('./one')\n\nfunction all(h, parent) {\n  var nodes = parent.children || []\n  var length = nodes.length\n  var values = []\n  var index = -1\n  var result\n  var head\n\n  while (++index < length) {\n    result = one(h, nodes[index], parent)\n\n    if (result) {\n      if (index && nodes[index - 1].type === 'break') {\n        if (result.value) {\n          result.value = result.value.replace(/^\\s+/, '')\n        }\n\n        head = result.children && result.children[0]\n\n        if (head && head.value) {\n          head.value = head.value.replace(/^\\s+/, '')\n        }\n      }\n\n      values = values.concat(result)\n    }\n  }\n\n  return values\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/all.js"
  },
  "{7A4B1976-8126-4556-B62E-A810C01A1A27}": {
    "source": "'use strict'\n\nmodule.exports = generateFootnotes\n\nvar thematicBreak = require('./handlers/thematic-break')\nvar list = require('./handlers/list')\nvar wrap = require('./wrap')\n\nfunction generateFootnotes(h) {\n  var footnoteById = h.footnoteById\n  var footnoteOrder = h.footnoteOrder\n  var length = footnoteOrder.length\n  var index = -1\n  var listItems = []\n  var def\n  var backReference\n  var content\n  var tail\n\n  while (++index < length) {\n    def = footnoteById[footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    content = def.children.concat()\n    tail = content[content.length - 1]\n    backReference = {\n      type: 'link',\n      url: '#fnref-' + def.identifier,\n      data: {hProperties: {className: ['footnote-backref']}},\n      children: [{type: 'text', value: '↩'}]\n    }\n\n    if (!tail || tail.type !== 'paragraph') {\n      tail = {type: 'paragraph', children: []}\n      content.push(tail)\n    }\n\n    tail.children.push(backReference)\n\n    listItems.push({\n      type: 'listItem',\n      data: {hProperties: {id: 'fn-' + def.identifier}},\n      children: content,\n      position: def.position\n    })\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return h(\n    null,\n    'div',\n    {className: ['footnotes']},\n    wrap(\n      [\n        thematicBreak(h),\n        list(h, {type: 'list', ordered: true, children: listItems})\n      ],\n      true\n    )\n  )\n}\n",
    "mapping": {
      "./handlers/thematic-break": "{7D6F88B5-7797-4A2A-A218-AB1E1B9E775C}",
      "./handlers/list": "{69F2A4AB-EC87-41BA-9774-DD0768FADDBA}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/footer.js"
  },
  "{7D6F88B5-7797-4A2A-A218-AB1E1B9E775C}": {
    "source": "'use strict'\n\nmodule.exports = thematicBreak\n\nfunction thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js"
  },
  "{69F2A4AB-EC87-41BA-9774-DD0768FADDBA}": {
    "source": "'use strict'\n\nmodule.exports = list\n\nvar wrap = require('../wrap')\nvar all = require('../all')\n\nfunction list(h, node) {\n  var props = {}\n  var name = node.ordered ? 'ol' : 'ul'\n  var items\n  var index = -1\n  var length\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  items = all(h, node)\n  length = items.length\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < length) {\n    if (\n      items[index].properties.className &&\n      items[index].properties.className.indexOf('task-list-item') !== -1\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n",
    "mapping": {
      "../wrap": "{9B6EC45A-80CE-4EED-9EC1-87D396617390}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/list.js"
  },
  "{9B6EC45A-80CE-4EED-9EC1-87D396617390}": {
    "source": "'use strict'\n\nmodule.exports = wrap\n\nvar u = require('unist-builder')\n\n// Wrap `nodes` with line feeds between each entry.\n// Optionally adds line feeds at the start and end.\nfunction wrap(nodes, loose) {\n  var result = []\n  var index = -1\n  var length = nodes.length\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < length) {\n    if (index) {\n      result.push(u('text', '\\n'))\n    }\n\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length !== 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/wrap.js"
  },
  "{650BF5C8-ADB1-4D2E-B6ED-E4BCAEAD1716}": {
    "source": "'use strict'\n\nmodule.exports = {\n  blockquote: require('./blockquote'),\n  break: require('./break'),\n  code: require('./code'),\n  delete: require('./delete'),\n  emphasis: require('./emphasis'),\n  footnoteReference: require('./footnote-reference'),\n  footnote: require('./footnote'),\n  heading: require('./heading'),\n  html: require('./html'),\n  imageReference: require('./image-reference'),\n  image: require('./image'),\n  inlineCode: require('./inline-code'),\n  linkReference: require('./link-reference'),\n  link: require('./link'),\n  listItem: require('./list-item'),\n  list: require('./list'),\n  paragraph: require('./paragraph'),\n  root: require('./root'),\n  strong: require('./strong'),\n  table: require('./table'),\n  text: require('./text'),\n  thematicBreak: require('./thematic-break'),\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n",
    "mapping": {
      "./blockquote": "{DCA9BCE5-8ECB-482C-8A6B-58E2C9D77675}",
      "./break": "{D2073698-4758-401B-9D4C-DD6264CF226E}",
      "./code": "{57523A81-4F8B-47E2-86D5-BAE446AB93E0}",
      "./delete": "{718215BE-C79F-410A-BE24-AB7EADCDB720}",
      "./emphasis": "{23B8A801-FE84-467D-841B-826A4103FCE3}",
      "./footnote-reference": "{5FCBD58A-683B-479F-A7CE-C2262CBAC8A3}",
      "./footnote": "{D7927E53-422E-47FB-92EA-8E48B471F5FB}",
      "./heading": "{30DFDCEA-3229-4C61-8820-1E23E072AE56}",
      "./html": "{4DF6609A-C1DD-4DEA-BB9F-ADACDB114855}",
      "./image-reference": "{1BE6CE2C-51EC-4D9C-B3E0-D766A98F715E}",
      "./image": "{8BA2468C-2C93-4FAA-BC75-457F1BCE6389}",
      "./inline-code": "{347960B2-8AB1-43C5-B7F7-DBD172F2752D}",
      "./link-reference": "{E55B8E89-06FD-4ABA-B2B0-C70EEF2BCADD}",
      "./link": "{B73B6A56-C885-4864-A1D3-1E9B407375AE}",
      "./list-item": "{8444B8FA-BA5C-4F2B-819B-588D2C8F7E0E}",
      "./paragraph": "{2B0933EE-4142-4B04-B52D-7E6AD4237007}",
      "./root": "{0342CD49-019A-4CFC-8CCF-FBA3D977AF23}",
      "./strong": "{2D0F3611-B1D3-4F7F-B895-8AD53D400AA5}",
      "./table": "{8798EE91-6EC8-45A6-867B-B24102D619FB}",
      "./text": "{20E7B45E-EC16-4FA6-B442-CF9DEB5E1658}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/index.js"
  },
  "{DCA9BCE5-8ECB-482C-8A6B-58E2C9D77675}": {
    "source": "'use strict'\n\nmodule.exports = blockquote\n\nvar wrap = require('../wrap')\nvar all = require('../all')\n\nfunction blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js"
  },
  "{D2073698-4758-401B-9D4C-DD6264CF226E}": {
    "source": "'use strict'\n\nmodule.exports = hardBreak\n\nvar u = require('unist-builder')\n\nfunction hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/break.js"
  },
  "{57523A81-4F8B-47E2-86D5-BAE446AB93E0}": {
    "source": "'use strict'\n\nmodule.exports = code\n\nvar detab = require('detab')\nvar u = require('unist-builder')\n\nfunction code(h, node) {\n  var value = node.value ? detab(node.value + '\\n') : ''\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  var props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  return h(node.position, 'pre', [h(node, 'code', props, [u('text', value)])])\n}\n",
    "mapping": {
      "detab": "{E17FB260-3CFD-45AE-B910-4BFACA71B3BB}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/code.js"
  },
  "{E17FB260-3CFD-45AE-B910-4BFACA71B3BB}": {
    "source": "'use strict'\n\nmodule.exports = detab\n\nvar repeat = require('repeat-string')\n\nvar tab = 0x09\nvar lineFeed = 0x0a\nvar carriageReturn = 0x0d\n\n// Replace tabs with spaces, being smart about which column the tab is at and\n// which size should be used.\nfunction detab(value, size) {\n  var string = typeof value === 'string'\n  var length = string && value.length\n  var start = 0\n  var index = -1\n  var column = -1\n  var tabSize = size || 4\n  var results = []\n  var code\n  var add\n\n  if (!string) {\n    throw new Error('detab expected string')\n  }\n\n  while (++index < length) {\n    code = value.charCodeAt(index)\n\n    if (code === tab) {\n      add = tabSize - ((column + 1) % tabSize)\n      column += add\n      results.push(value.slice(start, index) + repeat(' ', add))\n      start = index + 1\n    } else if (code === lineFeed || code === carriageReturn) {\n      column = -1\n    } else {\n      column++\n    }\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n",
    "mapping": {
      "repeat-string": "{1E5FABA8-CE8C-47A7-B99E-5E5A8CD97577}"
    },
    "path": "{markdown-translate}/node_modules/detab/index.js"
  },
  "{E7523976-48A8-45CD-9576-2365C0578B3A}": {
    "source": "{\n  \"_from\": \"detab@^2.0.0\",\n  \"_id\": \"detab@2.0.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Up8P0clUVwq0FnFjDclzZsy9PadzRn5FFxrr47tQQvMHqyiFYVbpH8oXDzWtF0Q7pYy3l+RPmtBl+BsFF6wH0A==\",\n  \"_location\": \"/detab\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"detab@^2.0.0\",\n    \"name\": \"detab\",\n    \"escapedName\": \"detab\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/detab/-/detab-2.0.3.tgz\",\n  \"_shasum\": \"33e5dd74d230501bd69985a0d2b9a3382699a130\",\n  \"_spec\": \"detab@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/detab/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"repeat-string\": \"^1.5.4\"\n  },\n  \"deprecated\": false,\n  \"description\": \"Detab: tabs -> spaces\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/detab#readme\",\n  \"keywords\": [\n    \"detab\",\n    \"tab\",\n    \"space\",\n    \"tab-size\",\n    \"size\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"detab\",\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/detab.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s detab -o detab.js\",\n    \"build-mangle\": \"browserify . -s detab -p tinyify -o detab.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"2.0.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"detab.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/detab/package.json"
  },
  "{1E5FABA8-CE8C-47A7-B99E-5E5A8CD97577}": {
    "source": "/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/repeat-string/index.js"
  },
  "{021DF55D-103A-45DD-B1BA-5B2BA72FBE29}": {
    "source": "{\n  \"_from\": \"repeat-string@^1.6.1\",\n  \"_id\": \"repeat-string@1.6.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha1-jcrkcOHIirwtYA//Sndihtp15jc=\",\n  \"_location\": \"/repeat-string\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"repeat-string@^1.6.1\",\n    \"name\": \"repeat-string\",\n    \"escapedName\": \"repeat-string\",\n    \"rawSpec\": \"^1.6.1\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.6.1\"\n  },\n  \"_requiredBy\": [\n    \"/detab\",\n    \"/hast-util-to-mdast\",\n    \"/hast-util-to-text\",\n    \"/markdown-table\",\n    \"/remark-parse\",\n    \"/remark-stringify\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz\",\n  \"_shasum\": \"8dcae470e1c88abc2d600fff4a776286da75e637\",\n  \"_spec\": \"repeat-string@^1.6.1\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Jon Schlinkert\",\n    \"url\": \"http://github.com/jonschlinkert\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jonschlinkert/repeat-string/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Brian Woodward\",\n      \"email\": \"brian.woodward@gmail.com\",\n      \"url\": \"https://github.com/doowb\"\n    },\n    {\n      \"name\": \"Jon Schlinkert\",\n      \"email\": \"jon.schlinkert@sellside.com\",\n      \"url\": \"http://twitter.com/jonschlinkert\"\n    },\n    {\n      \"name\": \"Linus Unnebäck\",\n      \"email\": \"linus@folkdatorn.se\",\n      \"url\": \"http://linus.unnebäck.se\"\n    },\n    {\n      \"name\": \"Thijs Busser\",\n      \"email\": \"tbusser@gmail.com\",\n      \"url\": \"http://tbusser.net\"\n    },\n    {\n      \"name\": \"Titus\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"wooorm.com\"\n    }\n  ],\n  \"deprecated\": false,\n  \"description\": \"Repeat the given string n times. Fastest implementation for repeating a string.\",\n  \"devDependencies\": {\n    \"ansi-cyan\": \"^0.1.1\",\n    \"benchmarked\": \"^0.2.5\",\n    \"gulp-format-md\": \"^0.1.11\",\n    \"isobject\": \"^2.1.0\",\n    \"mocha\": \"^3.1.2\",\n    \"repeating\": \"^3.0.0\",\n    \"text-table\": \"^0.2.0\",\n    \"yargs-parser\": \"^4.0.2\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"homepage\": \"https://github.com/jonschlinkert/repeat-string\",\n  \"keywords\": [\n    \"fast\",\n    \"fastest\",\n    \"fill\",\n    \"left\",\n    \"left-pad\",\n    \"multiple\",\n    \"pad\",\n    \"padding\",\n    \"repeat\",\n    \"repeating\",\n    \"repetition\",\n    \"right\",\n    \"right-pad\",\n    \"string\",\n    \"times\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"repeat-string\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jonschlinkert/repeat-string.git\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  },\n  \"verb\": {\n    \"toc\": false,\n    \"layout\": \"default\",\n    \"tasks\": [\n      \"readme\"\n    ],\n    \"plugins\": [\n      \"gulp-format-md\"\n    ],\n    \"related\": {\n      \"list\": [\n        \"repeat-element\"\n      ]\n    },\n    \"helpers\": [\n      \"./benchmark/helper.js\"\n    ],\n    \"reflinks\": [\n      \"verb\"\n    ]\n  },\n  \"version\": \"1.6.1\"\n}\n",
    "path": "{markdown-translate}/node_modules/repeat-string/package.json"
  },
  "{718215BE-C79F-410A-BE24-AB7EADCDB720}": {
    "source": "'use strict'\n\nmodule.exports = strikethrough\n\nvar all = require('../all')\n\nfunction strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/delete.js"
  },
  "{23B8A801-FE84-467D-841B-826A4103FCE3}": {
    "source": "'use strict'\n\nmodule.exports = emphasis\n\nvar all = require('../all')\n\nfunction emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js"
  },
  "{5FCBD58A-683B-479F-A7CE-C2262CBAC8A3}": {
    "source": "'use strict'\n\nmodule.exports = footnoteReference\n\nvar u = require('unist-builder')\n\nfunction footnoteReference(h, node) {\n  var footnoteOrder = h.footnoteOrder\n  var identifier = String(node.identifier)\n\n  if (footnoteOrder.indexOf(identifier) === -1) {\n    footnoteOrder.push(identifier)\n  }\n\n  return h(node.position, 'sup', {id: 'fnref-' + identifier}, [\n    h(node, 'a', {href: '#fn-' + identifier, className: ['footnote-ref']}, [\n      u('text', node.label || identifier)\n    ])\n  ])\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js"
  },
  "{D7927E53-422E-47FB-92EA-8E48B471F5FB}": {
    "source": "'use strict'\n\nmodule.exports = footnote\n\nvar footnoteReference = require('./footnote-reference')\n\nfunction footnote(h, node) {\n  var footnoteById = h.footnoteById\n  var footnoteOrder = h.footnoteOrder\n  var identifier = 1\n\n  while (identifier in footnoteById) {\n    identifier++\n  }\n\n  identifier = String(identifier)\n\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n  footnoteOrder.push(identifier)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier: identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier: identifier,\n    position: node.position\n  })\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/footnote.js"
  },
  "{30DFDCEA-3229-4C61-8820-1E23E072AE56}": {
    "source": "'use strict'\n\nmodule.exports = heading\n\nvar all = require('../all')\n\nfunction heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/heading.js"
  },
  "{4DF6609A-C1DD-4DEA-BB9F-ADACDB114855}": {
    "source": "'use strict'\n\nmodule.exports = html\n\nvar u = require('unist-builder')\n\n// Return either a `raw` node in dangerous mode, otherwise nothing.\nfunction html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/html.js"
  },
  "{1BE6CE2C-51EC-4D9C-B3E0-D766A98F715E}": {
    "source": "'use strict'\n\nmodule.exports = imageReference\n\nvar normalize = require('mdurl/encode')\nvar revert = require('../revert')\n\nfunction imageReference(h, node) {\n  var def = h.definition(node.identifier)\n  var props\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  props = {src: normalize(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n",
    "mapping": {
      "mdurl/encode": "{981DF347-3F68-44C7-9C07-68896105E26C}",
      "../revert": "{84BB4864-5300-4244-992D-20A073E2C1F8}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js"
  },
  "{981DF347-3F68-44C7-9C07-68896105E26C}": {
    "source": "\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdurl/encode.js"
  },
  "{5805BCA7-D32A-4E19-92B2-5517F413E534}": {
    "source": "{\n  \"_from\": \"mdurl@^1.0.0\",\n  \"_id\": \"mdurl@1.0.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha1-/oWy7HWlkDfyrf7BAP1sYBdhFS4=\",\n  \"_location\": \"/mdurl\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"mdurl@^1.0.0\",\n    \"name\": \"mdurl\",\n    \"escapedName\": \"mdurl\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz\",\n  \"_shasum\": \"fe85b2ec75a59037f2adfec100fd6c601761152e\",\n  \"_spec\": \"mdurl@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"bugs\": {\n    \"url\": \"https://github.com/markdown-it/mdurl/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"deprecated\": false,\n  \"description\": \"URL utilities for markdown-it\",\n  \"devDependencies\": {\n    \"eslint\": \"0.13.0\",\n    \"eslint-plugin-nodeca\": \"^1.0.0\",\n    \"istanbul\": \"*\",\n    \"mocha\": \"*\"\n  },\n  \"homepage\": \"https://github.com/markdown-it/mdurl#readme\",\n  \"license\": \"MIT\",\n  \"name\": \"mdurl\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/markdown-it/mdurl.git\"\n  },\n  \"scripts\": {\n    \"test\": \"make test\"\n  },\n  \"version\": \"1.0.1\"\n}\n",
    "path": "{markdown-translate}/node_modules/mdurl/package.json"
  },
  "{84BB4864-5300-4244-992D-20A073E2C1F8}": {
    "source": "'use strict'\n\nmodule.exports = revert\n\nvar u = require('unist-builder')\nvar all = require('./all')\n\n// Return the content of a reference without definition as Markdown.\nfunction revert(h, node) {\n  var subtype = node.referenceType\n  var suffix = ']'\n  var contents\n  var head\n  var tail\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  contents = all(h, node)\n  head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/revert.js"
  },
  "{8BA2468C-2C93-4FAA-BC75-457F1BCE6389}": {
    "source": "'use strict'\n\nvar normalize = require('mdurl/encode')\n\nmodule.exports = image\n\nfunction image(h, node) {\n  var props = {src: normalize(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/image.js"
  },
  "{347960B2-8AB1-43C5-B7F7-DBD172F2752D}": {
    "source": "'use strict'\n\nmodule.exports = inlineCode\n\nvar collapse = require('collapse-white-space')\nvar u = require('unist-builder')\n\nfunction inlineCode(h, node) {\n  return h(node, 'code', [u('text', collapse(node.value))])\n}\n",
    "mapping": {
      "collapse-white-space": "{D7B1F153-6394-49AE-B6E0-05028196391F}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"
  },
  "{D7B1F153-6394-49AE-B6E0-05028196391F}": {
    "source": "'use strict'\n\nmodule.exports = collapse\n\n// `collapse(' \\t\\nbar \\nbaz\\t') // ' bar baz '`\nfunction collapse(value) {\n  return String(value).replace(/\\s+/g, ' ')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/collapse-white-space/index.js"
  },
  "{6F4EAE9C-625E-4F49-BD34-67297E589375}": {
    "source": "{\n  \"_from\": \"collapse-white-space@^1.0.0\",\n  \"_id\": \"collapse-white-space@1.0.6\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-jEovNnrhMuqyCcjfEJA56v0Xq8SkIoPKDyaHahwo3POf4qcSXqMYuwNcOTzp74vTsR9Tn08z4MxWqAhcekogkQ==\",\n  \"_location\": \"/collapse-white-space\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"collapse-white-space@^1.0.0\",\n    \"name\": \"collapse-white-space\",\n    \"escapedName\": \"collapse-white-space\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\",\n    \"/rehype-minify-whitespace\",\n    \"/remark-parse\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/collapse-white-space/-/collapse-white-space-1.0.6.tgz\",\n  \"_shasum\": \"e63629c0016665792060dbbeb79c42239d2c5287\",\n  \"_spec\": \"collapse-white-space@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\rehype-minify-whitespace\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/collapse-white-space/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Replace multiple white-space characters with a single space\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/collapse-white-space#readme\",\n  \"keywords\": [\n    \"collapse\",\n    \"white\",\n    \"space\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"collapse-white-space\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/collapse-white-space.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s collapseWhiteSpace -o collapse-white-space.js\",\n    \"build-mangle\": \"browserify . -s collapseWhiteSpace -p tinyify -o collapse-white-space.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.6\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"collapse-white-space.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/collapse-white-space/package.json"
  },
  "{E55B8E89-06FD-4ABA-B2B0-C70EEF2BCADD}": {
    "source": "'use strict'\n\nmodule.exports = linkReference\n\nvar normalize = require('mdurl/encode')\nvar revert = require('../revert')\nvar all = require('../all')\n\nfunction linkReference(h, node) {\n  var def = h.definition(node.identifier)\n  var props\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  props = {href: normalize(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js"
  },
  "{B73B6A56-C885-4864-A1D3-1E9B407375AE}": {
    "source": "'use strict'\n\nvar normalize = require('mdurl/encode')\nvar all = require('../all')\n\nmodule.exports = link\n\nfunction link(h, node) {\n  var props = {href: normalize(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/link.js"
  },
  "{8444B8FA-BA5C-4F2B-819B-588D2C8F7E0E}": {
    "source": "'use strict'\n\nmodule.exports = listItem\n\nvar u = require('unist-builder')\nvar wrap = require('../wrap')\nvar all = require('../all')\n\nfunction listItem(h, node, parent) {\n  var children = node.children\n  var head = children[0]\n  var raw = all(h, node)\n  var loose = parent ? listLoose(parent) : listItemLoose(node)\n  var props = {}\n  var result\n  var container\n  var index\n  var length\n  var child\n\n  // Tight lists should not render `paragraph` nodes as `p` elements.\n  if (loose) {\n    result = raw\n  } else {\n    result = []\n    length = raw.length\n    index = -1\n\n    while (++index < length) {\n      child = raw[index]\n\n      if (child.tagName === 'p') {\n        result = result.concat(child.children)\n      } else {\n        result.push(child)\n      }\n    }\n  }\n\n  if (typeof node.checked === 'boolean') {\n    if (loose && (!head || head.type !== 'paragraph')) {\n      result.unshift(h(null, 'p', []))\n    }\n\n    container = loose ? result[0].children : result\n\n    if (container.length !== 0) {\n      container.unshift(u('text', ' '))\n    }\n\n    container.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  if (loose && result.length !== 0) {\n    result = wrap(result, true)\n  }\n\n  return h(node, 'li', props, result)\n}\n\nfunction listLoose(node) {\n  var loose = node.spread\n  var children = node.children\n  var length = children.length\n  var index = -1\n\n  while (!loose && ++index < length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return loose\n}\n\nfunction listItemLoose(node) {\n  var spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/list-item.js"
  },
  "{2B0933EE-4142-4B04-B52D-7E6AD4237007}": {
    "source": "'use strict'\n\nmodule.exports = paragraph\n\nvar all = require('../all')\n\nfunction paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js"
  },
  "{0342CD49-019A-4CFC-8CCF-FBA3D977AF23}": {
    "source": "'use strict'\n\nmodule.exports = root\n\nvar u = require('unist-builder')\nvar wrap = require('../wrap')\nvar all = require('../all')\n\nfunction root(h, node) {\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/root.js"
  },
  "{2D0F3611-B1D3-4F7F-B895-8AD53D400AA5}": {
    "source": "'use strict'\n\nmodule.exports = strong\n\nvar all = require('../all')\n\nfunction strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/strong.js"
  },
  "{8798EE91-6EC8-45A6-867B-B24102D619FB}": {
    "source": "'use strict'\n\nmodule.exports = table\n\nvar position = require('unist-util-position')\nvar wrap = require('../wrap')\nvar all = require('../all')\n\nfunction table(h, node) {\n  var rows = node.children\n  var index = rows.length\n  var align = node.align\n  var alignLength = align.length\n  var result = []\n  var pos\n  var row\n  var out\n  var name\n  var cell\n\n  while (index--) {\n    row = rows[index].children\n    name = index === 0 ? 'th' : 'td'\n    pos = alignLength\n    out = []\n\n    while (pos--) {\n      cell = row[pos]\n      out[pos] = h(cell, name, {align: align[pos]}, cell ? all(h, cell) : [])\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [\n        h(result[0].position, 'thead', wrap([result[0]], true)),\n        h(\n          {\n            start: position.start(result[1]),\n            end: position.end(result[result.length - 1])\n          },\n          'tbody',\n          wrap(result.slice(1), true)\n        )\n      ],\n      true\n    )\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/table.js"
  },
  "{20E7B45E-EC16-4FA6-B442-CF9DEB5E1658}": {
    "source": "'use strict'\n\nmodule.exports = text\n\nvar u = require('unist-builder')\nvar trimLines = require('trim-lines')\n\nfunction text(h, node) {\n  return h.augment(node, u('text', trimLines(node.value)))\n}\n",
    "mapping": {
      "trim-lines": "{EBB55973-B7F5-46FC-B66D-65D35D8691F0}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-hast/lib/handlers/text.js"
  },
  "{EBB55973-B7F5-46FC-B66D-65D35D8691F0}": {
    "source": "'use strict'\n\nmodule.exports = trimLines\n\nvar ws = /[ \\t]*\\n+[ \\t]*/g\nvar newline = '\\n'\n\nfunction trimLines(value) {\n  return String(value).replace(ws, newline)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/trim-lines/index.js"
  },
  "{CA92619C-B9E5-44F5-8824-E3EF097D5451}": {
    "source": "{\n  \"_from\": \"trim-lines@^1.0.0\",\n  \"_id\": \"trim-lines@1.1.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-E0ZosSWYK2mkSu+KEtQ9/KqarVjA9HztOSX+9FDdNacRAq29RRV6ZQNgob3iuW8Htar9vAfEa6yyt5qBAHZDBA==\",\n  \"_location\": \"/trim-lines\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"trim-lines@^1.0.0\",\n    \"name\": \"trim-lines\",\n    \"escapedName\": \"trim-lines\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/mdast-util-to-hast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/trim-lines/-/trim-lines-1.1.3.tgz\",\n  \"_shasum\": \"839514be82428fd9e7ec89e35081afe8f6f93115\",\n  \"_spec\": \"trim-lines@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\mdast-util-to-hast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/trim-lines/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Remove spaces and tabs around line-breaks\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/trim-lines#readme\",\n  \"keywords\": [\n    \"space\",\n    \"tab\",\n    \"line\",\n    \"break\",\n    \"trim\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"trim-lines\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/trim-lines.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s trim-lines -o trim-lines.js\",\n    \"build-mangle\": \"browserify . -s trim-lines -p tinyify -o trim-lines.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.1.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignore\": [\n      \"trim-lines.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/trim-lines/package.json"
  },
  "{E771E0AC-1242-40C5-AE71-6C1999E01B2C}": {
    "source": "export {default} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{8BA10486-4FA5-4962-BEE6-E32E3BAEBBA1}"
    },
    "path": "{markdown-translate}/node_modules/rehype-stringify/index.js"
  },
  "{010E32CD-F0B1-4C21-AAF3-99290F5DBC20}": {
    "source": "{\n  \"name\": \"rehype-stringify\",\n  \"version\": \"9.0.3\",\n  \"description\": \"rehype plugin to serialize HTML\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"rehype\",\n    \"rehype-plugin\",\n    \"plugin\",\n    \"html\",\n    \"abstract\",\n    \"syntax\",\n    \"tree\",\n    \"ast\",\n    \"stringify\",\n    \"serialize\",\n    \"compile\"\n  ],\n  \"homepage\": \"https://github.com/rehypejs/rehype\",\n  \"repository\": \"https://github.com/rehypejs/rehype/tree/main/packages/rehype-stringify\",\n  \"bugs\": \"https://github.com/rehypejs/rehype/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"hast-util-to-html\": \"^8.0.0\",\n    \"unified\": \"^10.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"rimraf \\\"lib/**/*.d.ts\\\" && tsc && type-coverage\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/rehype-stringify/package.json"
  },
  "{8BA10486-4FA5-4962-BEE6-E32E3BAEBBA1}": {
    "source": "/**\n * @typedef {import('hast').Root} Root\n * @typedef {Root|Root['children'][number]} Node\n * @typedef {import('hast-util-to-html').Options} Options\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */\nexport default function rehypeStringify(config) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, config)\n\n  Object.assign(this, {Compiler: compiler})\n\n  /**\n   * @type {import('unified').CompilerFunction<Node, string>}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n",
    "mapping": {
      "hast-util-to-html": "{B32B329E-94FF-4DB4-B8CA-9FAF08D6E0EE}"
    },
    "path": "{markdown-translate}/node_modules/rehype-stringify/lib/index.js"
  },
  "{B32B329E-94FF-4DB4-B8CA-9FAF08D6E0EE}": {
    "source": "/**\n * @typedef {import('./lib/types.js').CharacterReferences} CharacterReferences\n * @typedef {import('./lib/types.js').Options} Options\n * @typedef {import('./lib/types.js').Quote} Quote\n * @typedef {import('./lib/types.js').Space} Space\n */\n\nexport {toHtml} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{C62C2184-4EC7-4D0D-A125-CE4FE448CC9A}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/index.js"
  },
  "{3D355E6B-B6D0-4784-82B4-D3C80B453B8F}": {
    "source": "{\n  \"name\": \"hast-util-to-html\",\n  \"version\": \"8.0.4\",\n  \"description\": \"hast utility to serialize to HTML\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"serialize\",\n    \"stringify\",\n    \"tostring\"\n  ],\n  \"repository\": \"syntax-tree/hast-util-to-html\",\n  \"bugs\": \"https://github.com/syntax-tree/hast-util-to-html/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"@types/unist\": \"^2.0.0\",\n    \"ccount\": \"^2.0.0\",\n    \"comma-separated-tokens\": \"^2.0.0\",\n    \"hast-util-raw\": \"^7.0.0\",\n    \"hast-util-whitespace\": \"^2.0.0\",\n    \"html-void-elements\": \"^2.0.0\",\n    \"property-information\": \"^6.0.0\",\n    \"space-separated-tokens\": \"^2.0.0\",\n    \"stringify-entities\": \"^4.0.0\",\n    \"zwitch\": \"^2.0.4\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"hastscript\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-builder\": \"^3.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\",\n      [\n        \"remark-lint-no-html\",\n        false\n      ]\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-to-html/package.json"
  },
  "{C62C2184-4EC7-4D0D-A125-CE4FE448CC9A}": {
    "source": "/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {handle} from './handle/index.js'\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nexport function toHtml(tree, options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n",
    "mapping": {
      "property-information": "{9C42B465-9540-4824-8B07-C9AB6577A3CE}",
      "html-void-elements": "{A67AF05F-2D2D-452B-8BCC-812F955E5ED4}",
      "./handle/index.js": "{44297BA7-6BE7-4507-A098-3E7F05FB319E}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/index.js"
  },
  "{9C42B465-9540-4824-8B07-C9AB6577A3CE}": {
    "source": "/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n",
    "mapping": {
      "./lib/util/merge.js": "{0E325B09-F585-4709-BD12-9BD9C3EF07ED}",
      "./lib/xlink.js": "{DE732A03-434A-48B9-8DE8-172C45D4B55F}",
      "./lib/xml.js": "{4AA37C83-E587-4759-87D6-11009347B4F6}",
      "./lib/xmlns.js": "{82CD27C3-0DAB-401A-8FBC-1F955FA04391}",
      "./lib/aria.js": "{1A46E008-EEDA-4170-8045-07BBF99C6357}",
      "./lib/html.js": "{633F1F44-1122-4800-8C47-601F8D9F0A96}",
      "./lib/svg.js": "{5B83FB8A-ECC2-4EB6-8FC9-6E9CEED34725}",
      "./lib/find.js": "{4AB107B8-649F-444A-A4D9-C4D4F3156D64}",
      "./lib/hast-to-react.js": "{45F1DAC2-9825-4256-AB2A-4BAE91A124BE}"
    },
    "path": "{markdown-translate}/node_modules/property-information/index.js"
  },
  "{45F392CF-9E97-4367-90A9-2902B8954C68}": {
    "source": "{\n  \"name\": \"property-information\",\n  \"version\": \"6.2.0\",\n  \"description\": \"Info on the properties and attributes of the web platform\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"html\",\n    \"svg\",\n    \"aria\",\n    \"property\",\n    \"attribute\",\n    \"information\",\n    \"info\"\n  ],\n  \"repository\": \"wooorm/property-information\",\n  \"bugs\": \"https://github.com/wooorm/property-information/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Dustin Deus <deusdustin@gmail.com> (http://starptech.de)\",\n    \"Andrew Burgess <andrew@andrewburgess.io>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"alpha-sort\": \"^5.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"html-element-attributes\": \"^3.0.0\",\n    \"html-event-attributes\": \"^2.0.0\",\n    \"mdast-zone\": \"^5.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"svg-element-attributes\": \"^2.0.0\",\n    \"svg-event-attributes\": \"^2.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"undici\": \"^5.0.0\",\n    \"unist-builder\": \"^3.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"generate\": \"node --conditions development script/generate-react.js && node --conditions development script/generate-exceptions.js\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"no-bitwise\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\",\n      \"./script/list.js\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/property-information/package.json"
  },
  "{0E325B09-F585-4709-BD12-9BD9C3EF07ED}": {
    "source": "/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n",
    "mapping": {
      "./schema.js": "{FBFA644C-4787-432F-B90B-BACA05B19F99}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/util/merge.js"
  },
  "{FBFA644C-4787-432F-B90B-BACA05B19F99}": {
    "source": "/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/util/schema.js"
  },
  "{DE732A03-434A-48B9-8DE8-172C45D4B55F}": {
    "source": "import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n",
    "mapping": {
      "./util/create.js": "{C5A11185-59BA-4987-945F-86710C439854}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/xlink.js"
  },
  "{C5A11185-59BA-4987-945F-86710C439854}": {
    "source": "/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n",
    "mapping": {
      "../normalize.js": "{5D18897C-5E6B-4427-9280-43AEA6EC70C8}",
      "./defined-info.js": "{CC9E7A87-3C22-42AD-9D39-36108A6C9A56}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/util/create.js"
  },
  "{5D18897C-5E6B-4427-9280-43AEA6EC70C8}": {
    "source": "/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/normalize.js"
  },
  "{CC9E7A87-3C22-42AD-9D39-36108A6C9A56}": {
    "source": "import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n",
    "mapping": {
      "./info.js": "{943C4331-423F-4E92-B399-7A6023C5798C}",
      "./types.js": "{AAEAFB30-0BD3-4A04-ABCB-239293CDB46F}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/util/defined-info.js"
  },
  "{943C4331-423F-4E92-B399-7A6023C5798C}": {
    "source": "export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/util/info.js"
  },
  "{AAEAFB30-0BD3-4A04-ABCB-239293CDB46F}": {
    "source": "let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/util/types.js"
  },
  "{4AA37C83-E587-4759-87D6-11009347B4F6}": {
    "source": "import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/xml.js"
  },
  "{82CD27C3-0DAB-401A-8FBC-1F955FA04391}": {
    "source": "import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n",
    "mapping": {
      "./util/case-insensitive-transform.js": "{4DCBA90B-BA86-4B10-A20C-3D01DB3F506E}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/xmlns.js"
  },
  "{4DCBA90B-BA86-4B10-A20C-3D01DB3F506E}": {
    "source": "import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n",
    "mapping": {
      "./case-sensitive-transform.js": "{DB4FD73A-C954-4D02-A7B3-01F774D05A37}"
    },
    "path": "{markdown-translate}/node_modules/property-information/lib/util/case-insensitive-transform.js"
  },
  "{DB4FD73A-C954-4D02-A7B3-01F774D05A37}": {
    "source": "/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/util/case-sensitive-transform.js"
  },
  "{1A46E008-EEDA-4170-8045-07BBF99C6357}": {
    "source": "import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/aria.js"
  },
  "{633F1F44-1122-4800-8C47-601F8D9F0A96}": {
    "source": "import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/html.js"
  },
  "{5B83FB8A-ECC2-4EB6-8FC9-6E9CEED34725}": {
    "source": "import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/svg.js"
  },
  "{4AB107B8-649F-444A-A4D9-C4D4F3156D64}": {
    "source": "/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/find.js"
  },
  "{45F1DAC2-9825-4256-AB2A-4BAE91A124BE}": {
    "source": "/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/property-information/lib/hast-to-react.js"
  },
  "{A67AF05F-2D2D-452B-8BCC-812F955E5ED4}": {
    "source": "/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'isindex',\n  'keygen',\n  'link',\n  'menuitem',\n  'meta',\n  'nextid',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/html-void-elements/index.js"
  },
  "{61BB35EC-B8AF-4798-A0EA-FDA52727F3CB}": {
    "source": "{\n  \"name\": \"html-void-elements\",\n  \"version\": \"2.0.1\",\n  \"description\": \"List of HTML void tag names\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"html\",\n    \"void\",\n    \"tag\",\n    \"name\",\n    \"element\",\n    \"tagname\",\n    \"w3c\",\n    \"whatwg\"\n  ],\n  \"repository\": \"wooorm/html-void-elements\",\n  \"bugs\": \"https://github.com/wooorm/html-void-elements/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/concat-stream\": \"^1.0.0\",\n    \"@types/node\": \"^16.0.0\",\n    \"@types/tape\": \"^4.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"hast-util-select\": \"^5.0.0\",\n    \"hast-util-to-string\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype-parse\": \"^8.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unified\": \"^10.0.0\",\n    \"xo\": \"^0.46.0\"\n  },\n  \"scripts\": {\n    \"generate\": \"node build\",\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/html-void-elements/package.json"
  },
  "{44297BA7-6BE7-4507-A098-3E7F05FB319E}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n",
    "mapping": {
      "zwitch": "{FEDE59A4-F733-45C0-8F7C-AA133AF3A85B}",
      "./comment.js": "{3D4A26CB-4705-4B72-85AC-664FE54E33B4}",
      "./doctype.js": "{84668602-8F3B-4C0F-B849-AB487E022F62}",
      "./element.js": "{93C36128-ABEA-42AD-9E1A-370BCEF375E8}",
      "./raw.js": "{A20FCAE1-6EB0-49F2-982F-FAFF4C927AE8}",
      "./root.js": "{60BD5DC8-468A-4833-BCFB-841174AA9078}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/index.js"
  },
  "{FEDE59A4-F733-45C0-8F7C-AA133AF3A85B}": {
    "source": "/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/zwitch/index.js"
  },
  "{07957D19-CDEA-4369-838C-378480364461}": {
    "source": "{\n  \"name\": \"zwitch\",\n  \"version\": \"2.0.4\",\n  \"description\": \"Handle values based on a property\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"handle\",\n    \"switch\",\n    \"property\"\n  ],\n  \"repository\": \"wooorm/zwitch\",\n  \"bugs\": \"https://github.com/wooorm/zwitch/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tsd\": \"^0.24.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.52.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreFiles\": [\n      \"index.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/zwitch/package.json"
  },
  "{3D4A26CB-4705-4B72-85AC-664FE54E33B4}": {
    "source": "/**\n * @typedef {import('../types.js').Comment} Comment\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n",
    "mapping": {
      "stringify-entities": "{1B7B2581-B421-4492-9B6C-56101FDE2BE2}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/comment.js"
  },
  "{1B7B2581-B421-4492-9B6C-56101FDE2BE2}": {
    "source": "/**\n * @typedef {import('./lib/index.js').LightOptions} LightOptions\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport * from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{00D1DF94-1E5F-4A42-AE99-2DAC025F716F}"
    },
    "path": "{markdown-translate}/node_modules/stringify-entities/index.js"
  },
  "{A9FE3ECC-82B2-4614-A7F8-805F0ED0A1C6}": {
    "source": "{\n  \"name\": \"stringify-entities\",\n  \"version\": \"4.0.3\",\n  \"description\": \"Serialize (encode) HTML character references\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"stringify\",\n    \"encode\",\n    \"escape\",\n    \"html\",\n    \"character\",\n    \"reference\",\n    \"entity\",\n    \"entities\"\n  ],\n  \"repository\": \"wooorm/stringify-entities\",\n  \"bugs\": \"https://github.com/wooorm/stringify-entities/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"character-entities-html4\": \"^2.0.0\",\n    \"character-entities-legacy\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"character-entities\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.49.0\"\n  },\n  \"scripts\": {\n    \"generate\": \"node build\",\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"lib/**/*.d.ts\\\" \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"unicorn/prefer-code-point\": \"off\",\n      \"unicorn/numeric-separators-style\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/stringify-entities/package.json"
  },
  "{00D1DF94-1E5F-4A42-AE99-2DAC025F716F}": {
    "source": "/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n",
    "mapping": {
      "./core.js": "{04863F72-35CB-48FC-968C-1898605D90E5}",
      "./util/format-smart.js": "{6CACF9BA-BCF4-455A-9D5E-7174EDD0FEBC}",
      "./util/format-basic.js": "{08A344C4-F4C8-4949-AE4D-084037493575}"
    },
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/index.js"
  },
  "{04863F72-35CB-48FC-968C-1898605D90E5}": {
    "source": "/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/core.js"
  },
  "{6CACF9BA-BCF4-455A-9D5E-7174EDD0FEBC}": {
    "source": "/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n",
    "mapping": {
      "./to-hexadecimal.js": "{FE36F6A1-0B2C-4C9F-80A7-8B9DD8365F53}",
      "./to-decimal.js": "{11FB925C-5E43-432C-87E5-666695DA7121}",
      "./to-named.js": "{3B2C1C96-6CEF-406D-A62F-2F00737079EC}"
    },
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/util/format-smart.js"
  },
  "{FE36F6A1-0B2C-4C9F-80A7-8B9DD8365F53}": {
    "source": "/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/util/to-hexadecimal.js"
  },
  "{11FB925C-5E43-432C-87E5-666695DA7121}": {
    "source": "/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/util/to-decimal.js"
  },
  "{3B2C1C96-6CEF-406D-A62F-2F00737079EC}": {
    "source": "import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n",
    "mapping": {
      "character-entities-legacy": "{F734C05F-7777-4219-9E19-33A03DB4B211}",
      "character-entities-html4": "{7570AC3C-23D9-4441-BFCA-606D53ECB639}",
      "../constant/dangerous.js": "{72EAA3AE-BC1A-45F3-BEF7-5F84717A4250}"
    },
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/util/to-named.js"
  },
  "{F734C05F-7777-4219-9E19-33A03DB4B211}": {
    "source": "/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/character-entities-legacy/index.js"
  },
  "{9EC4CD63-E833-408F-8A8F-247346121AF5}": {
    "source": "{\n  \"name\": \"character-entities-legacy\",\n  \"version\": \"3.0.0\",\n  \"description\": \"List of legacy HTML named character references that don’t need a trailing semicolon\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"html\",\n    \"entity\",\n    \"entities\",\n    \"character\",\n    \"reference\",\n    \"name\"\n  ],\n  \"repository\": \"wooorm/character-entities-legacy\",\n  \"bugs\": \"https://github.com/wooorm/character-entities-legacy/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.45.0\"\n  },\n  \"scripts\": {\n    \"generate\": \"node build\",\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/character-entities-legacy/package.json"
  },
  "{7570AC3C-23D9-4441-BFCA-606D53ECB639}": {
    "source": "/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/character-entities-html4/index.js"
  },
  "{BDE28F76-D479-44B7-9B69-B11673C43232}": {
    "source": "{\n  \"name\": \"character-entities-html4\",\n  \"version\": \"2.1.0\",\n  \"description\": \"Map of named character references from HTML 4\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"html\",\n    \"html4\",\n    \"entity\",\n    \"entities\",\n    \"character\",\n    \"reference\",\n    \"name\",\n    \"replacement\"\n  ],\n  \"repository\": \"wooorm/character-entities-html4\",\n  \"bugs\": \"https://github.com/wooorm/character-entities-html4/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.46.0\"\n  },\n  \"scripts\": {\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"generate\": \"node build\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/character-entities-html4/package.json"
  },
  "{72EAA3AE-BC1A-45F3-BEF7-5F84717A4250}": {
    "source": "/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/constant/dangerous.js"
  },
  "{08A344C4-F4C8-4949-AE4D-084037493575}": {
    "source": "/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/stringify-entities/lib/util/format-basic.js"
  },
  "{84668602-8F3B-4C0F-B849-AB487E022F62}": {
    "source": "/**\n * @typedef {import('../types.js').DocType} DocType\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {DocType} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/doctype.js"
  },
  "{93C36128-ABEA-42AD-9E1A-370BCEF375E8}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {opening} from '../omission/opening.js'\nimport {closing} from '../omission/closing.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: constants.unquoted[x][y],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n",
    "mapping": {
      "comma-separated-tokens": "{F1FDC8CE-D3B1-40C9-8C02-6FBE4E6745B3}",
      "space-separated-tokens": "{98705DAE-B0A8-4B11-9682-C00268E8904B}",
      "../omission/opening.js": "{6AA9DBE7-46E4-4E94-98BF-D990F9446DF6}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/element.js"
  },
  "{F1FDC8CE-D3B1-40C9-8C02-6FBE4E6745B3}": {
    "source": "/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/comma-separated-tokens/index.js"
  },
  "{6D16E86B-1A1B-43DF-9613-2D607F45DB8C}": {
    "source": "{\n  \"name\": \"comma-separated-tokens\",\n  \"version\": \"2.0.3\",\n  \"description\": \"Parse and stringify comma-separated tokens\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"dom\",\n    \"html\",\n    \"comma\",\n    \"separated\",\n    \"tokens\",\n    \"parse\",\n    \"stringify\"\n  ],\n  \"repository\": \"wooorm/comma-separated-tokens\",\n  \"bugs\": \"https://github.com/wooorm/comma-separated-tokens/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.52.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/comma-separated-tokens/package.json"
  },
  "{98705DAE-B0A8-4B11-9682-C00268E8904B}": {
    "source": "/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/space-separated-tokens/index.js"
  },
  "{2292FF3A-5182-49C5-8D91-F387A11E8F3F}": {
    "source": "{\n  \"name\": \"space-separated-tokens\",\n  \"version\": \"2.0.2\",\n  \"description\": \"Parse and stringify space separated tokens\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"dom\",\n    \"html\",\n    \"space\",\n    \"separated\",\n    \"tokens\",\n    \"parse\",\n    \"stringify\"\n  ],\n  \"repository\": \"wooorm/space-separated-tokens\",\n  \"bugs\": \"https://github.com/wooorm/space-separated-tokens/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.52.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/space-separated-tokens/package.json"
  },
  "{6AA9DBE7-46E4-4E94-98BF-D990F9446DF6}": {
    "source": "/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingBefore, siblingAfter} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  html,\n  head,\n  body,\n  colgroup,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array<string>} */\n  const seen = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'col'\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return head && head.type === 'element' && head.tagName === 'tr'\n}\n",
    "mapping": {
      "hast-util-whitespace": "{C07DCBCB-1E3D-4CB4-B625-86DD16701D96}",
      "./util/siblings.js": "{6F104BC1-B037-4736-87DE-9F58DCC3E6EE}",
      "./closing.js": "{1C64F96A-0F9A-468D-BB7A-E51B493A8EB9}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/omission/opening.js"
  },
  "{C07DCBCB-1E3D-4CB4-B625-86DD16701D96}": {
    "source": "/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/node_modules/hast-util-whitespace/index.js"
  },
  "{783A418E-D058-4860-A508-741B38C3DC9A}": {
    "source": "{\n  \"name\": \"hast-util-whitespace\",\n  \"version\": \"2.0.1\",\n  \"description\": \"hast utility to check if a node is inter-element whitespace\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"inter\",\n    \"element\",\n    \"inter-element\",\n    \"white-space\",\n    \"whitespace\"\n  ],\n  \"repository\": \"syntax-tree/hast-util-whitespace\",\n  \"bugs\": \"https://github.com/syntax-tree/hast-util-whitespace/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-to-html/node_modules/hast-util-whitespace/package.json"
  },
  "{6F104BC1-B037-4736-87DE-9F58DCC3E6EE}": {
    "source": "/**\n * @typedef {import('../../types.js').Parent} Parent\n * @typedef {import('../../types.js').Content} Content\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @param {Parent | null | undefined} parent\n   * @param {number | null | undefined} index\n   * @param {boolean | null | undefined} [includeWhitespace=false]\n   * @returns {Content}\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : []\n    let offset = (index || 0) + increment\n    let next = siblings && siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    return next\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/omission/util/siblings.js"
  },
  "{1C64F96A-0F9A-468D-BB7A-E51B493A8EB9}": {
    "source": "/**\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  html,\n  head: headOrColgroupOrCaption,\n  body,\n  p,\n  li,\n  dt,\n  dd,\n  rt: rubyElement,\n  rp: rubyElement,\n  optgroup,\n  option,\n  menuitem,\n  colgroup: headOrColgroupOrCaption,\n  caption: headOrColgroupOrCaption,\n  thead,\n  tbody,\n  tfoot,\n  tr,\n  td: cells,\n  th: cells\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\n// eslint-disable-next-line complexity\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</menuitem>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction menuitem(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'menuitem' ||\n        next.tagName === 'hr' ||\n        next.tagName === 'menu'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    next &&\n    next.type === 'element' &&\n    (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parent | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n",
    "mapping": {
      "./omission.js": "{DD11FC76-3B5A-43DD-B2CF-AAEED62045A6}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/omission/closing.js"
  },
  "{DD11FC76-3B5A-43DD-B2CF-AAEED62045A6}": {
    "source": "/**\n * @typedef {import('../types.js').OmitHandle} OmitHandle\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/omission/omission.js"
  },
  "{A20FCAE1-6EB0-49F2-982F-FAFF4C927AE8}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n",
    "mapping": {
      "./text.js": "{4A75136F-3633-4F44-B11B-8B41F5E4664B}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/raw.js"
  },
  "{4A75136F-3633-4F44-B11B-8B41F5E4664B}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/text.js"
  },
  "{60BD5DC8-468A-4833-BCFB-841174AA9078}": {
    "source": "/**\n * @typedef {import('../types.js').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parent | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-html/lib/handle/root.js"
  },
  "{A73F6CAA-6284-45A7-A0D6-41CF1DF136D9}": {
    "source": "export {default} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{6CA6DBB6-6077-4441-A99A-DD68BC364DD6}"
    },
    "path": "{markdown-translate}/node_modules/remark-stringify/index.js"
  },
  "{79C420DE-0904-431B-8904-F9A189BDEC7E}": {
    "source": "{\n  \"name\": \"remark-stringify\",\n  \"version\": \"10.0.3\",\n  \"description\": \"remark plugin to add support for serializing markdown\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"remark\",\n    \"remark-plugin\",\n    \"plugin\",\n    \"markdown\",\n    \"mdast\",\n    \"markdown\",\n    \"abstract\",\n    \"syntax\",\n    \"tree\",\n    \"ast\",\n    \"stringify\",\n    \"serialize\",\n    \"compile\"\n  ],\n  \"homepage\": \"https://remark.js.org\",\n  \"repository\": \"https://github.com/remarkjs/remark/tree/main/packages/remark-stringify\",\n  \"bugs\": \"https://github.com/remarkjs/remark/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Eugene Sharygin <eush77@gmail.com>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"mdast-util-to-markdown\": \"^1.0.0\",\n    \"unified\": \"^10.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"node --conditions development test.js\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/remark-stringify/package.json"
  },
  "{6CA6DBB6-6077-4441-A99A-DD68BC364DD6}": {
    "source": "/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|void[], Node, string>}\n */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n",
    "mapping": {
      "mdast-util-to-markdown": "{A7BC819D-F751-4865-B788-B52180760779}"
    },
    "path": "{markdown-translate}/node_modules/remark-stringify/lib/index.js"
  },
  "{A7BC819D-F751-4865-B788-B52180760779}": {
    "source": "export {toMarkdown} from './lib/index.js'\nexport {handle as defaultHandlers} from './lib/handle/index.js'\n",
    "mapping": {
      "./lib/index.js": "{959EA823-45A5-45D1-8B52-92BB4A79D0E9}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/index.js"
  },
  "{959EA823-45A5-45D1-8B52-92BB4A79D0E9}": {
    "source": "/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n",
    "mapping": {
      "./configure.js": "{A4BFC532-E8DC-48F9-837F-B4BD1506A8FD}",
      "./handle/index.js": "{BC7C7F96-1E01-401D-AC6F-42953DF0C927}",
      "./join.js": "{9758495E-E1EB-48F7-BA3A-145A8CB68F81}",
      "./unsafe.js": "{3DBCC401-BE16-41B8-9E31-74EC1C668CCD}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/index.js"
  },
  "{A4BFC532-E8DC-48F9-837F-B4BD1506A8FD}": {
    "source": "/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/configure.js"
  },
  "{BC7C7F96-1E01-401D-AC6F-42953DF0C927}": {
    "source": "import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n",
    "mapping": {
      "./blockquote.js": "{2D252BC4-900D-4F15-9D81-B71273812005}",
      "./break.js": "{8D21F40D-A258-4606-A6C9-D9AC471CB6D7}",
      "./code.js": "{E540B6D4-2223-40CD-A359-93C31E9B36CF}",
      "./definition.js": "{75271798-853C-44EC-9226-DAA9FFA06D5E}",
      "./emphasis.js": "{F220E3E2-42E5-4147-9DCA-ABC811E15607}",
      "./heading.js": "{56A74DB0-79F2-4575-A2CF-03EFE48D644F}",
      "./html.js": "{1FC6E55C-148C-4E9B-940A-8F190EF25814}",
      "./image.js": "{1299B369-7156-4898-AFBA-CE6A0E3E53D7}",
      "./image-reference.js": "{5657BC40-DC7A-4FAC-8747-142781A2E537}",
      "./link.js": "{49D2FB8E-DFF8-43B2-844D-30E25E4CF997}",
      "./link-reference.js": "{CC3F8B94-7486-4B0A-9BC2-079F49CB719E}",
      "./list.js": "{3EBA2320-AFC6-4F5B-B6E4-EECAB6CB10DB}",
      "./paragraph.js": "{840837CB-8603-4FD3-AE28-B01262D4D06D}",
      "./root.js": "{13748368-DD7D-4247-997F-B802401375D8}",
      "./strong.js": "{4FB68D45-1D94-403E-8019-3AC85D418A36}",
      "./text.js": "{38B08E05-EA8F-4D14-8EBA-82FE16D7CC4F}",
      "./thematic-break.js": "{2B61F534-0E52-46F7-82A0-B97E9A7B6E51}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/index.js"
  },
  "{2D252BC4-900D-4F15-9D81-B71273812005}": {
    "source": "/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js"
  },
  "{8D21F40D-A258-4606-A6C9-D9AC471CB6D7}": {
    "source": "/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/break.js"
  },
  "{E540B6D4-2223-40CD-A359-93C31E9B36CF}": {
    "source": "/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n",
    "mapping": {
      "longest-streak": "{C1841D27-FAA5-4E16-AA3C-67DDE85248CA}",
      "../util/format-code-as-indented.js": "{D2C6715F-754C-44A9-AA9C-E0EB2526CAB5}",
      "../util/check-fence.js": "{C8FAF27F-B843-4537-BA21-94FF633A093A}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/code.js"
  },
  "{C1841D27-FAA5-4E16-AA3C-67DDE85248CA}": {
    "source": "/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/longest-streak/index.js"
  },
  "{BC5BD9A0-1A78-405B-AF8F-6A392B74E111}": {
    "source": "{\n  \"name\": \"longest-streak\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Count the longest repeating streak of a substring\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"count\",\n    \"length\",\n    \"longest\",\n    \"repeating\",\n    \"streak\",\n    \"substring\",\n    \"character\"\n  ],\n  \"repository\": \"wooorm/longest-streak\",\n  \"bugs\": \"https://github.com/wooorm/longest-streak/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.52.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/longest-streak/package.json"
  },
  "{D2C6715F-754C-44A9-AA9C-E0EB2526CAB5}": {
    "source": "/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js"
  },
  "{C8FAF27F-B843-4537-BA21-94FF633A093A}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-fence.js"
  },
  "{75271798-853C-44EC-9226-DAA9FFA06D5E}": {
    "source": "/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n",
    "mapping": {
      "../util/check-quote.js": "{1E09C93F-000D-4784-B735-06944A70D8FE}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/definition.js"
  },
  "{1E09C93F-000D-4784-B735-06944A70D8FE}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-quote.js"
  },
  "{F220E3E2-42E5-4147-9DCA-ABC811E15607}": {
    "source": "/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n",
    "mapping": {
      "../util/check-emphasis.js": "{7A12353F-27BF-42B2-92BA-E9629A099775}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js"
  },
  "{7A12353F-27BF-42B2-92BA-E9629A099775}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js"
  },
  "{56A74DB0-79F2-4575-A2CF-03EFE48D644F}": {
    "source": "/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n",
    "mapping": {
      "../util/format-heading-as-setext.js": "{4A0B9BBF-7375-480A-AB94-79194E67E719}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/heading.js"
  },
  "{4A0B9BBF-7375-480A-AB94-79194E67E719}": {
    "source": "/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n",
    "mapping": {
      "unist-util-visit": "{03133EEC-E91A-4F0F-A47A-510D47247887}",
      "mdast-util-to-string": "{1E316DBE-39D8-458E-A3B5-A2DDE11ACD36}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js"
  },
  "{03133EEC-E91A-4F0F-A47A-510D47247887}": {
    "source": "// Note: types exported from `index.d.ts`\nexport {CONTINUE, EXIT, SKIP, visit} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{1D27BCB5-129B-4CDE-8188-5DD367ABF082}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/index.js"
  },
  "{133CC2F8-A80B-4DF2-BBE5-0FFF423FC45E}": {
    "source": "{\n  \"name\": \"unist-util-visit\",\n  \"version\": \"4.1.2\",\n  \"description\": \"unist utility to visit nodes\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"remark\",\n    \"retext\",\n    \"rehype\",\n    \"mdast\",\n    \"hast\",\n    \"xast\",\n    \"nlcst\",\n    \"natural\",\n    \"language\",\n    \"markdown\",\n    \"html\",\n    \"xml\",\n    \"tree\",\n    \"ast\",\n    \"node\",\n    \"visit\",\n    \"walk\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-visit\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-visit/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Eugene Sharygin <eush77@gmail.com>\",\n    \"Richard Gibson <richard.gibson@gmail.com>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"complex-types.d.ts\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-is\": \"^5.0.0\",\n    \"unist-util-visit-parents\": \"^5.1.1\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-gfm\": \"^2.0.0\",\n    \"micromark-extension-gfm\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.7.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"@typescript-eslint/ban-types\": \"off\",\n      \"@typescript-eslint/array-type\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/package.json"
  },
  "{1D27BCB5-129B-4CDE-8188-5DD367ABF082}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n",
    "mapping": {
      "unist-util-visit-parents": "{32C0266E-BB7C-4871-A486-7A6EBD71E836}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js"
  },
  "{32C0266E-BB7C-4871-A486-7A6EBD71E836}": {
    "source": "// Note: types exported from `index.d.ts`\nexport {CONTINUE, EXIT, SKIP, visitParents} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{DF67BA87-95C5-4B45-86FC-89EA30B3B9D7}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/index.js"
  },
  "{64863CED-43CB-4B8B-A08A-CFE9FCDA1133}": {
    "source": "{\n  \"name\": \"unist-util-visit-parents\",\n  \"version\": \"5.1.3\",\n  \"description\": \"unist utility to recursively walk over nodes, with ancestral information\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"ast\",\n    \"visit\",\n    \"traverse\",\n    \"walk\",\n    \"check\",\n    \"parent\",\n    \"parents\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-visit-parents\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-visit-parents/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"browser\": {\n    \"./lib/color.js\": \"./lib/color.browser.js\"\n  },\n  \"react-native\": {\n    \"./lib/color.js\": \"./lib/color.browser.js\"\n  },\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"complex-types.d.ts\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"unist-util-is\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"mdast-util-from-markdown\": \"^1.0.0\",\n    \"mdast-util-gfm\": \"^2.0.0\",\n    \"micromark-extension-gfm\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"strip-ansi\": \"^7.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.7.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"@typescript-eslint/array-type\": \"off\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true,\n    \"#\": \"needed `any`s\",\n    \"ignoreFiles\": [\n      \"lib/complex-types.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/package.json"
  },
  "{DF67BA87-95C5-4B45-86FC-89EA30B3B9D7}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n",
    "mapping": {
      "unist-util-is": "{FF7FE991-CB35-4F3E-BD9B-F6BEEF198F4F}",
      "./color.js": "{44B3E934-7878-493B-9531-E8F60EA31201}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/index.js"
  },
  "{FF7FE991-CB35-4F3E-BD9B-F6BEEF198F4F}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Test} Test\n * @typedef {import('./lib/index.js').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('./lib/index.js').AssertAnything} AssertAnything\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').PredicateTest<Kind>} PredicateTest\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').TestFunctionPredicate<Kind>} TestFunctionPredicate\n */\n\n/**\n * @template {import('unist').Node} Kind\n * @typedef {import('./lib/index.js').AssertPredicate<Kind>} AssertPredicate\n */\n\nexport {is, convert} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{CBCA572A-C358-4714-95C1-803016997BAC}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-is/index.js"
  },
  "{8A770F1C-D066-454A-B3D2-44FD25F761F5}": {
    "source": "{\n  \"name\": \"unist-util-is\",\n  \"version\": \"5.2.1\",\n  \"description\": \"unist utility to check if a node passes a test\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"tree\",\n    \"node\",\n    \"is\",\n    \"equal\",\n    \"check\",\n    \"test\",\n    \"type\"\n  ],\n  \"repository\": \"syntax-tree/unist-util-is\",\n  \"bugs\": \"https://github.com/syntax-tree/unist-util-is/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Christian Murphy <christian.murphy.42@gmail.com>\",\n    \"Lucas Brandstaetter <lucas@brandstaetter.tech> (https://github.com/Roang-zero1)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash\": \"^4.0.0\",\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"fast-check\": \"^3.0.0\",\n    \"lodash\": \"^4.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unified\": \"^10.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-is/package.json"
  },
  "{CBCA572A-C358-4714-95C1-803016997BAC}": {
    "source": "/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-is/lib/index.js"
  },
  "{44B3E934-7878-493B-9531-E8F60EA31201}": {
    "source": "/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit-parents/lib/color.js"
  },
  "{1E316DBE-39D8-458E-A3B5-A2DDE11ACD36}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Options} Options\n */\n\nexport {toString} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{DB2B6D85-07E1-4564-8FF1-0E5E8A2A0D12}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/index.js"
  },
  "{99B0C65A-17A5-47CE-AB46-F30853B3B59F}": {
    "source": "{\n  \"name\": \"mdast-util-to-string\",\n  \"version\": \"3.2.0\",\n  \"description\": \"mdast utility to get the plain text content of a node\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"node\",\n    \"string\",\n    \"serialize\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-to-string\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-to-string/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^5.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/package.json"
  },
  "{DB2B6D85-07E1-4564-8FF1-0E5E8A2A0D12}": {
    "source": "/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js"
  },
  "{1FC6E55C-148C-4E9B-940A-8F190EF25814}": {
    "source": "/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/html.js"
  },
  "{1299B369-7156-4898-AFBA-CE6A0E3E53D7}": {
    "source": "/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/image.js"
  },
  "{5657BC40-DC7A-4FAC-8747-142781A2E537}": {
    "source": "/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js"
  },
  "{49D2FB8E-DFF8-43B2-844D-30E25E4CF997}": {
    "source": "/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n",
    "mapping": {
      "../util/format-link-as-autolink.js": "{A30387A9-71D9-491B-8D49-C748297819EB}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/link.js"
  },
  "{A30387A9-71D9-491B-8D49-C748297819EB}": {
    "source": "/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js"
  },
  "{CC3F8B94-7486-4B0A-9BC2-079F49CB719E}": {
    "source": "/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js"
  },
  "{3EBA2320-AFC6-4F5B-B6E4-EECAB6CB10DB}": {
    "source": "/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n",
    "mapping": {
      "../util/check-bullet-other.js": "{9350F689-E59F-4821-AC31-CD8C79A1605B}",
      "../util/check-bullet-ordered.js": "{BE99CA0F-A599-41D6-843E-24A2CA9A7B39}",
      "../util/check-bullet-ordered-other.js": "{58414617-3D30-46B6-AA93-0D7F8F7F6B41}",
      "../util/check-rule.js": "{658E5A27-7354-4ECE-B220-86A5A15B6B81}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/list.js"
  },
  "{9350F689-E59F-4821-AC31-CD8C79A1605B}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js"
  },
  "{BE99CA0F-A599-41D6-843E-24A2CA9A7B39}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js"
  },
  "{58414617-3D30-46B6-AA93-0D7F8F7F6B41}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js"
  },
  "{658E5A27-7354-4ECE-B220-86A5A15B6B81}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-rule.js"
  },
  "{840837CB-8603-4FD3-AE28-B01262D4D06D}": {
    "source": "/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js"
  },
  "{13748368-DD7D-4247-997F-B802401375D8}": {
    "source": "/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n",
    "mapping": {
      "mdast-util-phrasing": "{8DA8EFEB-10A0-4F5B-BA41-EB9ADF78937C}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/root.js"
  },
  "{8DA8EFEB-10A0-4F5B-BA41-EB9ADF78937C}": {
    "source": "export {phrasing} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{F477E2FD-D59E-41D6-B1E7-0DD485E37BF4}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/index.js"
  },
  "{253F47DE-95FD-4E05-B633-D75858B83E78}": {
    "source": "{\n  \"name\": \"mdast-util-phrasing\",\n  \"version\": \"3.0.1\",\n  \"description\": \"mdast utility to check if a node is phrasing content\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast=util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"phrasing\"\n  ],\n  \"repository\": \"syntax-tree/mdast-util-phrasing\",\n  \"bugs\": \"https://github.com/syntax-tree/mdast-util-phrasing/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Victor Felder <victor@draft.li> (https://draft.li)\",\n  \"contributors\": [\n    \"Victor Felder <victor@draft.li> (https://draft.li)\",\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/mdast\": \"^3.0.0\",\n    \"unist-util-is\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/package.json"
  },
  "{F477E2FD-D59E-41D6-B1E7-0DD485E37BF4}": {
    "source": "/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * @param\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\nexport const phrasing = /** @type {AssertPredicatePhrasing} */ (\n  convert([\n    'break',\n    'delete',\n    'emphasis',\n    'footnote',\n    'footnoteReference',\n    'image',\n    'imageReference',\n    'inlineCode',\n    'link',\n    'linkReference',\n    'strong',\n    'text'\n  ])\n)\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/lib/index.js"
  },
  "{4FB68D45-1D94-403E-8019-3AC85D418A36}": {
    "source": "/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n",
    "mapping": {
      "../util/check-strong.js": "{C060359D-072B-44C6-A050-B8B10B33BF13}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/strong.js"
  },
  "{C060359D-072B-44C6-A050-B8B10B33BF13}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-strong.js"
  },
  "{38B08E05-EA8F-4D14-8EBA-82FE16D7CC4F}": {
    "source": "/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/text.js"
  },
  "{2B61F534-0E52-46F7-82A0-B97E9A7B6E51}": {
    "source": "/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n",
    "mapping": {
      "../util/check-rule-repetition.js": "{30DD627A-FABB-49C2-829A-ED03256C6C76}"
    },
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js"
  },
  "{30DD627A-FABB-49C2-829A-ED03256C6C76}": {
    "source": "/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js"
  },
  "{9758495E-E1EB-48F7-BA3A-145A8CB68F81}": {
    "source": "/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/join.js"
  },
  "{3DBCC401-BE16-41B8-9E31-74EC1C668CCD}": {
    "source": "/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-markdown/lib/unsafe.js"
  },
  "{BD2284A4-A56F-4F40-91A1-0AB1412E6EAB}": {
    "source": "export {default} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{DB3D3CE6-37CC-4166-9840-59904D20EA15}"
    },
    "path": "{markdown-translate}/node_modules/rehype-parse/index.js"
  },
  "{65BC7480-82A6-4EE2-9D60-AFB4198DAC4B}": {
    "source": "{\n  \"name\": \"rehype-parse\",\n  \"version\": \"8.0.4\",\n  \"description\": \"rehype plugin to parse HTML\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"rehype\",\n    \"rehype-plugin\",\n    \"plugin\",\n    \"html\",\n    \"abstract\",\n    \"syntax\",\n    \"tree\",\n    \"ast\",\n    \"parse\"\n  ],\n  \"homepage\": \"https://github.com/rehypejs/rehype\",\n  \"repository\": \"https://github.com/rehypejs/rehype/tree/main/packages/rehype-parse\",\n  \"bugs\": \"https://github.com/rehypejs/rehype/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"hast-util-from-parse5\": \"^7.0.0\",\n    \"parse5\": \"^6.0.0\",\n    \"unified\": \"^10.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"rimraf \\\"lib/**/*.d.ts\\\" && tsc && type-coverage\"\n  },\n  \"xo\": false,\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/rehype-parse/package.json"
  },
  "{DB3D3CE6-37CC-4166-9840-59904D20EA15}": {
    "source": "/**\n * @typedef {import('hast').Root} Root\n * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options\n *\n * @typedef {keyof errors} ErrorCode\n * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity\n * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields\n *\n * @typedef ParseFields\n * @property {boolean|undefined} [fragment=false]\n *   Specify whether to parse a fragment, instead of a complete document.\n *   In document mode, unopened `html`, `head`, and `body` elements are opened\n *   in just the right places.\n * @property {boolean|undefined} [emitParseErrors=false]\n *   > ⚠️ Parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.\n *   > Some documentation may still be missing.\n *\n *   Emit parse errors while parsing on the vfile.\n *   Setting this to `true` starts emitting HTML parse errors.\n *\n *   Specific rules can be turned off by setting them to `false` (or `0`).\n *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means\n *   that rules emit as warnings.\n *   Rules can also be configured with `2`, to turn them into fatal errors.\n *\n * @typedef {FromParse5Options & ParseFields & ErrorFields} Options\n */\n\n// @ts-expect-error: remove when typed\nimport Parser5 from 'parse5/lib/parser/index.js'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {errors} from './errors.js'\n\nconst base = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-'\n\nconst fatalities = {2: true, 1: false, 0: null}\n\n/** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */\nexport default function rehypeParse(options) {\n  const processorSettings = /** @type {Options} */ (this.data('settings'))\n  const settings = Object.assign({}, processorSettings, options)\n\n  Object.assign(this, {Parser: parser})\n\n  /** @type {import('unified').ParserFunction<Root>} */\n  function parser(doc, file) {\n    const fn = settings.fragment ? 'parseFragment' : 'parse'\n    const onParseError = settings.emitParseErrors ? onerror : null\n    const parse5 = new Parser5({\n      sourceCodeLocationInfo: true,\n      onParseError,\n      scriptingEnabled: false\n    })\n\n    // @ts-expect-error: `parse5` returns document or fragment, which are always\n    // mapped to roots.\n    return fromParse5(parse5[fn](doc), {\n      space: settings.space,\n      file,\n      verbose: settings.verbose\n    })\n\n    /**\n     * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error\n     */\n    function onerror(error) {\n      const code = error.code\n      const name = camelcase(code)\n      const setting = settings[name]\n      const config = setting === undefined || setting === null ? true : setting\n      const level = typeof config === 'number' ? config : config ? 1 : 0\n      const start = {\n        line: error.startLine,\n        column: error.startCol,\n        offset: error.startOffset\n      }\n      const end = {\n        line: error.endLine,\n        column: error.endCol,\n        offset: error.endOffset\n      }\n      if (level) {\n        /* c8 ignore next */\n        const info = errors[name] || {reason: '', description: '', url: ''}\n        const message = file.message(format(info.reason), {start, end})\n        message.source = 'parse-error'\n        message.ruleId = code\n        message.fatal = fatalities[level]\n        message.note = format(info.description)\n        message.url = 'url' in info && info.url === false ? null : base + code\n      }\n\n      /**\n       * @param {string} value\n       * @returns {string}\n       */\n      function format(value) {\n        return value\n          .replace(/%c(?:-(\\d+))?/g, (_, /** @type {string} */ $1) => {\n            const offset = $1 ? -Number.parseInt($1, 10) : 0\n            const char = doc.charAt(error.startOffset + offset)\n            return char === '`' ? '` ` `' : char\n          })\n          .replace(\n            /%x/g,\n            () =>\n              '0x' +\n              doc.charCodeAt(error.startOffset).toString(16).toUpperCase()\n          )\n      }\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {ErrorCode}\n */\nfunction camelcase(value) {\n  // @ts-expect-error: this returns a valid error code.\n  return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())\n}\n",
    "mapping": {
      "parse5/lib/parser/index.js": "{BD1D4777-2DEB-4D2D-8C20-B4604D8AEFA1}",
      "hast-util-from-parse5": "{13956460-69EE-4722-A66F-F76A327CC7BD}",
      "./errors.js": "{0534B42E-A67F-4194-A01A-22DC1437D8ED}"
    },
    "path": "{markdown-translate}/node_modules/rehype-parse/lib/index.js"
  },
  "{BD1D4777-2DEB-4D2D-8C20-B4604D8AEFA1}": {
    "source": "'use strict';\n\nconst Tokenizer = require('../tokenizer');\nconst OpenElementStack = require('./open-element-stack');\nconst FormattingElementList = require('./formatting-element-list');\nconst LocationInfoParserMixin = require('../extensions/location-info/parser-mixin');\nconst ErrorReportingParserMixin = require('../extensions/error-reporting/parser-mixin');\nconst Mixin = require('../utils/mixin');\nconst defaultTreeAdapter = require('../tree-adapters/default');\nconst mergeOptions = require('../utils/merge-options');\nconst doctype = require('../common/doctype');\nconst foreignContent = require('../common/foreign-content');\nconst ERR = require('../common/error-codes');\nconst unicode = require('../common/unicode');\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\nconst DEFAULT_OPTIONS = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    onParseError: null,\n    treeAdapter: defaultTreeAdapter\n};\n\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n\n//Insertion modes\nconst INITIAL_MODE = 'INITIAL_MODE';\nconst BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';\nconst BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';\nconst IN_HEAD_MODE = 'IN_HEAD_MODE';\nconst IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';\nconst AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';\nconst IN_BODY_MODE = 'IN_BODY_MODE';\nconst TEXT_MODE = 'TEXT_MODE';\nconst IN_TABLE_MODE = 'IN_TABLE_MODE';\nconst IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';\nconst IN_CAPTION_MODE = 'IN_CAPTION_MODE';\nconst IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';\nconst IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';\nconst IN_ROW_MODE = 'IN_ROW_MODE';\nconst IN_CELL_MODE = 'IN_CELL_MODE';\nconst IN_SELECT_MODE = 'IN_SELECT_MODE';\nconst IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';\nconst IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';\nconst AFTER_BODY_MODE = 'AFTER_BODY_MODE';\nconst IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';\nconst AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';\nconst AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';\nconst AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';\n\n//Insertion mode reset map\nconst INSERTION_MODE_RESET_MAP = {\n    [$.TR]: IN_ROW_MODE,\n    [$.TBODY]: IN_TABLE_BODY_MODE,\n    [$.THEAD]: IN_TABLE_BODY_MODE,\n    [$.TFOOT]: IN_TABLE_BODY_MODE,\n    [$.CAPTION]: IN_CAPTION_MODE,\n    [$.COLGROUP]: IN_COLUMN_GROUP_MODE,\n    [$.TABLE]: IN_TABLE_MODE,\n    [$.BODY]: IN_BODY_MODE,\n    [$.FRAMESET]: IN_FRAMESET_MODE\n};\n\n//Template insertion mode switch map\nconst TEMPLATE_INSERTION_MODE_SWITCH_MAP = {\n    [$.CAPTION]: IN_TABLE_MODE,\n    [$.COLGROUP]: IN_TABLE_MODE,\n    [$.TBODY]: IN_TABLE_MODE,\n    [$.TFOOT]: IN_TABLE_MODE,\n    [$.THEAD]: IN_TABLE_MODE,\n    [$.COL]: IN_COLUMN_GROUP_MODE,\n    [$.TR]: IN_TABLE_BODY_MODE,\n    [$.TD]: IN_ROW_MODE,\n    [$.TH]: IN_ROW_MODE\n};\n\n//Token handlers map for insertion modes\nconst TOKEN_HANDLERS = {\n    [INITIAL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,\n        [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,\n        [Tokenizer.EOF_TOKEN]: tokenInInitialMode\n    },\n    [BEFORE_HTML_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHtml\n    },\n    [BEFORE_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,\n        [Tokenizer.EOF_TOKEN]: tokenBeforeHead\n    },\n    [IN_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHead,\n        [Tokenizer.EOF_TOKEN]: tokenInHead\n    },\n    [IN_HEAD_NO_SCRIPT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,\n        [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,\n        [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript\n    },\n    [AFTER_HEAD_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,\n        [Tokenizer.EOF_TOKEN]: tokenAfterHead\n    },\n    [IN_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: ignoreToken,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.END_TAG_TOKEN]: endTagInText,\n        [Tokenizer.EOF_TOKEN]: eofInText\n    },\n    [IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_TEXT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTableText,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,\n        [Tokenizer.COMMENT_TOKEN]: tokenInTableText,\n        [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,\n        [Tokenizer.START_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.END_TAG_TOKEN]: tokenInTableText,\n        [Tokenizer.EOF_TOKEN]: tokenInTableText\n    },\n    [IN_CAPTION_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCaption,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCaption,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_COLUMN_GROUP_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,\n        [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TABLE_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_ROW_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInRow,\n        [Tokenizer.END_TAG_TOKEN]: endTagInRow,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_CELL_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInCell,\n        [Tokenizer.END_TAG_TOKEN]: endTagInCell,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelect,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelect,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_SELECT_IN_TABLE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,\n        [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,\n        [Tokenizer.EOF_TOKEN]: eofInBody\n    },\n    [IN_TEMPLATE_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: characterInBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,\n        [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,\n        [Tokenizer.EOF_TOKEN]: eofInTemplate\n    },\n    [AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [IN_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,\n        [Tokenizer.COMMENT_TOKEN]: appendComment,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_BODY_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,\n        [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    },\n    [AFTER_AFTER_FRAMESET_MODE]: {\n        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,\n        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,\n        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,\n        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,\n        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,\n        [Tokenizer.END_TAG_TOKEN]: ignoreToken,\n        [Tokenizer.EOF_TOKEN]: stopParsing\n    }\n};\n\n//Parser\nclass Parser {\n    constructor(options) {\n        this.options = mergeOptions(DEFAULT_OPTIONS, options);\n\n        this.treeAdapter = this.options.treeAdapter;\n        this.pendingScript = null;\n\n        if (this.options.sourceCodeLocationInfo) {\n            Mixin.install(this, LocationInfoParserMixin);\n        }\n\n        if (this.options.onParseError) {\n            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });\n        }\n    }\n\n    // API\n    parse(html) {\n        const document = this.treeAdapter.createDocument();\n\n        this._bootstrap(document, null);\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        return document;\n    }\n\n    parseFragment(html, fragmentContext) {\n        //NOTE: use <template> element as a fragment context if context element was not provided,\n        //so we will parse in \"forgiving\" manner\n        if (!fragmentContext) {\n            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);\n        }\n\n        //NOTE: create fake element which will be used as 'document' for fragment parsing.\n        //This is important for jsdom there 'document' can't be recreated, therefore\n        //fragment parsing causes messing of the main `document`.\n        const documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);\n\n        this._bootstrap(documentMock, fragmentContext);\n\n        if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {\n            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n        }\n\n        this._initTokenizerForFragmentParsing();\n        this._insertFakeRootElement();\n        this._resetInsertionMode();\n        this._findFormInFragmentContext();\n        this.tokenizer.write(html, true);\n        this._runParsingLoop(null);\n\n        const rootElement = this.treeAdapter.getFirstChild(documentMock);\n        const fragment = this.treeAdapter.createDocumentFragment();\n\n        this._adoptNodes(rootElement, fragment);\n\n        return fragment;\n    }\n\n    //Bootstrap parser\n    _bootstrap(document, fragmentContext) {\n        this.tokenizer = new Tokenizer(this.options);\n\n        this.stopped = false;\n\n        this.insertionMode = INITIAL_MODE;\n        this.originalInsertionMode = '';\n\n        this.document = document;\n        this.fragmentContext = fragmentContext;\n\n        this.headElement = null;\n        this.formElement = null;\n\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n\n        this.tmplInsertionModeStack = [];\n        this.tmplInsertionModeStackTop = -1;\n        this.currentTmplInsertionMode = null;\n\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    //Parsing loop\n    _runParsingLoop(scriptHandler) {\n        while (!this.stopped) {\n            this._setupTokenizerCDATAMode();\n\n            const token = this.tokenizer.getNextToken();\n\n            if (token.type === Tokenizer.HIBERNATION_TOKEN) {\n                break;\n            }\n\n            if (this.skipNextNewLine) {\n                this.skipNextNewLine = false;\n\n                if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\\n') {\n                    if (token.chars.length === 1) {\n                        continue;\n                    }\n\n                    token.chars = token.chars.substr(1);\n                }\n            }\n\n            this._processInputToken(token);\n\n            if (scriptHandler && this.pendingScript) {\n                break;\n            }\n        }\n    }\n\n    runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {\n        this._runParsingLoop(scriptHandler);\n\n        if (scriptHandler && this.pendingScript) {\n            const script = this.pendingScript;\n\n            this.pendingScript = null;\n\n            scriptHandler(script);\n\n            return;\n        }\n\n        if (writeCallback) {\n            writeCallback();\n        }\n    }\n\n    //Text parsing\n    _setupTokenizerCDATAMode() {\n        const current = this._getAdjustedCurrentElement();\n\n        this.tokenizer.allowCDATA =\n            current &&\n            current !== this.document &&\n            this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&\n            !this._isIntegrationPoint(current);\n    }\n\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = TEXT_MODE;\n    }\n\n    switchToPlaintextParsing() {\n        this.insertionMode = TEXT_MODE;\n        this.originalInsertionMode = IN_BODY_MODE;\n        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n    }\n\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n\n        do {\n            if (this.treeAdapter.getTagName(node) === $.FORM) {\n                this.formElement = node;\n                break;\n            }\n\n            node = this.treeAdapter.getParentNode(node);\n        } while (node);\n    }\n\n    _initTokenizerForFragmentParsing() {\n        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {\n            const tn = this.treeAdapter.getTagName(this.fragmentContext);\n\n            if (tn === $.TITLE || tn === $.TEXTAREA) {\n                this.tokenizer.state = Tokenizer.MODE.RCDATA;\n            } else if (\n                tn === $.STYLE ||\n                tn === $.XMP ||\n                tn === $.IFRAME ||\n                tn === $.NOEMBED ||\n                tn === $.NOFRAMES ||\n                tn === $.NOSCRIPT\n            ) {\n                this.tokenizer.state = Tokenizer.MODE.RAWTEXT;\n            } else if (tn === $.SCRIPT) {\n                this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;\n            } else if (tn === $.PLAINTEXT) {\n                this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n            }\n        }\n    }\n\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n    }\n\n    _attachElementToTree(element) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n    }\n\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertFakeElement(tagName) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n\n        this._attachElementToTree(element);\n        this.openElements.push(element);\n    }\n\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl);\n        this.openElements.push(tmpl);\n    }\n\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);\n\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element);\n    }\n\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n\n        this.treeAdapter.appendChild(parent, commentNode);\n    }\n\n    _insertCharacters(token) {\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentText(token.chars);\n        } else {\n            const parent = this.openElements.currentTmplContent || this.openElements.current;\n\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n    }\n\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n\n    //Token processing\n    _shouldProcessTokenInForeignContent(token) {\n        const current = this._getAdjustedCurrentElement();\n\n        if (!current || current === this.document) {\n            return false;\n        }\n\n        const ns = this.treeAdapter.getNamespaceURI(current);\n\n        if (ns === NS.HTML) {\n            return false;\n        }\n\n        if (\n            this.treeAdapter.getTagName(current) === $.ANNOTATION_XML &&\n            ns === NS.MATHML &&\n            token.type === Tokenizer.START_TAG_TOKEN &&\n            token.tagName === $.SVG\n        ) {\n            return false;\n        }\n\n        const isCharacterToken =\n            token.type === Tokenizer.CHARACTER_TOKEN ||\n            token.type === Tokenizer.NULL_CHARACTER_TOKEN ||\n            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n\n        const isMathMLTextStartTag =\n            token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;\n\n        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {\n            return false;\n        }\n\n        if (\n            (token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) &&\n            this._isIntegrationPoint(current, NS.HTML)\n        ) {\n            return false;\n        }\n\n        return token.type !== Tokenizer.EOF_TOKEN;\n    }\n\n    _processToken(token) {\n        TOKEN_HANDLERS[this.insertionMode][token.type](this, token);\n    }\n\n    _processTokenInBodyMode(token) {\n        TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);\n    }\n\n    _processTokenInForeignContent(token) {\n        if (token.type === Tokenizer.CHARACTER_TOKEN) {\n            characterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {\n            nullCharacterInForeignContent(this, token);\n        } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {\n            insertCharacters(this, token);\n        } else if (token.type === Tokenizer.COMMENT_TOKEN) {\n            appendComment(this, token);\n        } else if (token.type === Tokenizer.START_TAG_TOKEN) {\n            startTagInForeignContent(this, token);\n        } else if (token.type === Tokenizer.END_TAG_TOKEN) {\n            endTagInForeignContent(this, token);\n        }\n    }\n\n    _processInputToken(token) {\n        if (this._shouldProcessTokenInForeignContent(token)) {\n            this._processTokenInForeignContent(token);\n        } else {\n            this._processToken(token);\n        }\n\n        if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {\n            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n\n    //Integration points\n    _isIntegrationPoint(element, foreignNS) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n\n        return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);\n    }\n\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.length;\n\n        if (listLength) {\n            let unopenIdx = listLength;\n            let entry = null;\n\n            do {\n                unopenIdx--;\n                entry = this.activeFormattingElements.entries[unopenIdx];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {\n                    unopenIdx++;\n                    break;\n                }\n            } while (unopenIdx > 0);\n\n            for (let i = unopenIdx; i < listLength; i++) {\n                entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = IN_ROW_MODE;\n    }\n\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n\n    //Insertion modes\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {\n            let element = this.openElements.items[i];\n\n            if (i === 0) {\n                last = true;\n\n                if (this.fragmentContext) {\n                    element = this.fragmentContext;\n                }\n            }\n\n            const tn = this.treeAdapter.getTagName(element);\n            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];\n\n            if (newInsertionMode) {\n                this.insertionMode = newInsertionMode;\n                break;\n            } else if (!last && (tn === $.TD || tn === $.TH)) {\n                this.insertionMode = IN_CELL_MODE;\n                break;\n            } else if (!last && tn === $.HEAD) {\n                this.insertionMode = IN_HEAD_MODE;\n                break;\n            } else if (tn === $.SELECT) {\n                this._resetInsertionModeForSelect(i);\n                break;\n            } else if (tn === $.TEMPLATE) {\n                this.insertionMode = this.currentTmplInsertionMode;\n                break;\n            } else if (tn === $.HTML) {\n                this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;\n                break;\n            } else if (last) {\n                this.insertionMode = IN_BODY_MODE;\n                break;\n            }\n        }\n    }\n\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const ancestor = this.openElements.items[i];\n                const tn = this.treeAdapter.getTagName(ancestor);\n\n                if (tn === $.TEMPLATE) {\n                    break;\n                } else if (tn === $.TABLE) {\n                    this.insertionMode = IN_SELECT_IN_TABLE_MODE;\n                    return;\n                }\n            }\n        }\n\n        this.insertionMode = IN_SELECT_MODE;\n    }\n\n    _pushTmplInsertionMode(mode) {\n        this.tmplInsertionModeStack.push(mode);\n        this.tmplInsertionModeStackTop++;\n        this.currentTmplInsertionMode = mode;\n    }\n\n    _popTmplInsertionMode() {\n        this.tmplInsertionModeStack.pop();\n        this.tmplInsertionModeStackTop--;\n        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];\n    }\n\n    //Foster parenting\n    _isElementCausesFosterParenting(element) {\n        const tn = this.treeAdapter.getTagName(element);\n\n        return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;\n    }\n\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);\n    }\n\n    _findFosterParentingLocation() {\n        const location = {\n            parent: null,\n            beforeElement: null\n        };\n\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            const tn = this.treeAdapter.getTagName(openElement);\n            const ns = this.treeAdapter.getNamespaceURI(openElement);\n\n            if (tn === $.TEMPLATE && ns === NS.HTML) {\n                location.parent = this.treeAdapter.getTemplateContent(openElement);\n                break;\n            } else if (tn === $.TABLE) {\n                location.parent = this.treeAdapter.getParentNode(openElement);\n\n                if (location.parent) {\n                    location.beforeElement = openElement;\n                } else {\n                    location.parent = this.openElements.items[i - 1];\n                }\n\n                break;\n            }\n        }\n\n        if (!location.parent) {\n            location.parent = this.openElements.items[0];\n        }\n\n        return location;\n    }\n\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        } else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n\n    _fosterParentText(chars) {\n        const location = this._findFosterParentingLocation();\n\n        if (location.beforeElement) {\n            this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);\n        } else {\n            this.treeAdapter.insertText(location.parent, chars);\n        }\n    }\n\n    //Special elements\n    _isSpecialElement(element) {\n        const tn = this.treeAdapter.getTagName(element);\n        const ns = this.treeAdapter.getNamespaceURI(element);\n\n        return HTML.SPECIAL_ELEMENTS[ns][tn];\n    }\n}\n\nmodule.exports = Parser;\n\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        } else if (!p.openElements.hasInScope(token.tagName)) {\n            formattingElementEntry = null;\n        }\n    } else {\n        genericEndTagInBody(p, token);\n    }\n\n    return formattingElementEntry;\n}\n\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            furthestBlock = element;\n        }\n    }\n\n    if (!furthestBlock) {\n        p.openElements.popUntilElementPopped(formattingElementEntry.element);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n\n    return furthestBlock;\n}\n\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n\n            p.openElements.remove(element);\n        } else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n\n    return lastElement;\n}\n\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n\n    return newElement;\n}\n\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    if (p._isElementCausesFosterParenting(commonAncestor)) {\n        p._fosterParentElement(lastElement);\n    } else {\n        const tn = p.treeAdapter.getTagName(commonAncestor);\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n\n        if (tn === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const token = formattingElementEntry.token;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement);\n}\n\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    let formattingElementEntry;\n\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);\n\n        if (!formattingElementEntry) {\n            break;\n        }\n\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n\n        if (!furthestBlock) {\n            break;\n        }\n\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n\n        p.treeAdapter.detachNode(lastElement);\n        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n\n//Generic token handlers\n//------------------------------------------------------------------\nfunction ignoreToken() {\n    //NOTE: do nothing =)\n}\n\nfunction misplacedDoctype(p) {\n    p._err(ERR.misplacedDoctype);\n}\n\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);\n}\n\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\n\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\n\nfunction insertCharacters(p, token) {\n    p._insertCharacters(token);\n}\n\nfunction stopParsing(p) {\n    p.stopped = true;\n}\n\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n\n    const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n\n    if (!doctype.isConforming(token)) {\n        p._err(ERR.nonConformingDoctype);\n    }\n\n    p.treeAdapter.setDocumentMode(p.document, mode);\n\n    p.insertionMode = BEFORE_HTML_MODE;\n}\n\nfunction tokenInInitialMode(p, token) {\n    p._err(ERR.missingDoctype, { beforeToken: true });\n    p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = BEFORE_HTML_MODE;\n    p._processToken(token);\n}\n\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagName === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = BEFORE_HEAD_MODE;\n    } else {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\n\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = BEFORE_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.HEAD) {\n        p._insertElement(token, NS.HTML);\n        p.headElement = p.openElements.current;\n        p.insertionMode = IN_HEAD_MODE;\n    } else {\n        tokenBeforeHead(p, token);\n    }\n}\n\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement($.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TITLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);\n    } else if (tn === $.NOSCRIPT) {\n        if (p.options.scriptingEnabled) {\n            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n        } else {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;\n        }\n    } else if (tn === $.NOFRAMES || tn === $.STYLE) {\n        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n    } else if (tn === $.SCRIPT) {\n        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);\n    } else if (tn === $.TEMPLATE) {\n        p._insertTemplate(token, NS.HTML);\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = IN_TEMPLATE_MODE;\n        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenInHead(p, token);\n    }\n}\n\nfunction endTagInHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HEAD) {\n        p.openElements.pop();\n        p.insertionMode = AFTER_HEAD_MODE;\n    } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {\n        tokenInHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        if (p.openElements.tmplCount > 0) {\n            p.openElements.generateImpliedEndTagsThoroughly();\n\n            if (p.openElements.currentTagName !== $.TEMPLATE) {\n                p._err(ERR.closingOfElementWithOpenChildElements);\n            }\n\n            p.openElements.popUntilTagNamePopped($.TEMPLATE);\n            p.activeFormattingElements.clearToLastMarker();\n            p._popTmplInsertionMode();\n            p._resetInsertionMode();\n        } else {\n            p._err(ERR.endTagWithoutMatchingOpenElement);\n        }\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = AFTER_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.HEAD ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.STYLE\n    ) {\n        startTagInHead(p, token);\n    } else if (tn === $.NOSCRIPT) {\n        p._err(ERR.nestedNoscriptInHead);\n    } else {\n        tokenInHeadNoScript(p, token);\n    }\n}\n\nfunction endTagInHeadNoScript(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.NOSCRIPT) {\n        p.openElements.pop();\n        p.insertionMode = IN_HEAD_MODE;\n    } else if (tn === $.BR) {\n        tokenInHeadNoScript(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenInHeadNoScript(p, token) {\n    const errCode =\n        token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n\n    p._err(errCode);\n    p.openElements.pop();\n    p.insertionMode = IN_HEAD_MODE;\n    p._processToken(token);\n}\n\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.BODY) {\n        p._insertElement(token, NS.HTML);\n        p.framesetOk = false;\n        p.insertionMode = IN_BODY_MODE;\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    } else if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        p._err(ERR.abandonedHeadElementChild);\n        p.openElements.push(p.headElement);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n    } else if (tn === $.HEAD) {\n        p._err(ERR.misplacedStartTagForHeadElement);\n    } else {\n        tokenAfterHead(p, token);\n    }\n}\n\nfunction endTagAfterHead(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenAfterHead(p, token);\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else {\n        p._err(ERR.endTagWithoutMatchingOpenElement);\n    }\n}\n\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement($.BODY);\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\n\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\n\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\n\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_FRAMESET_MODE;\n    }\n}\n\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    const tn = p.openElements.currentTagName;\n\n    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n        p.openElements.pop();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\n\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n\n        p._insertElement(token, NS.HTML);\n\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\n\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const element = p.openElements.items[i];\n        const elementTn = p.treeAdapter.getTagName(element);\n        let closeTn = null;\n\n        if (tn === $.LI && elementTn === $.LI) {\n            closeTn = $.LI;\n        } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {\n            closeTn = elementTn;\n        }\n\n        if (closeTn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);\n            p.openElements.popUntilTagNamePopped(closeTn);\n            break;\n        }\n\n        if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {\n            break;\n        }\n    }\n\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;\n}\n\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\n\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);\n\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\n\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\n\nfunction tableStartTagInBody(p, token) {\n    if (\n        p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS &&\n        p.openElements.hasInButtonScope($.P)\n    ) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = IN_TABLE_MODE;\n}\n\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {\n        p.framesetOk = false;\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\n\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\n\nfunction imageStartTagInBody(p, token) {\n    token.tagName = $.IMG;\n    areaStartTagInBody(p, token);\n}\n\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = Tokenizer.MODE.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = TEXT_MODE;\n}\n\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as a rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);\n}\n\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n\n    if (\n        p.insertionMode === IN_TABLE_MODE ||\n        p.insertionMode === IN_CAPTION_MODE ||\n        p.insertionMode === IN_TABLE_BODY_MODE ||\n        p.insertionMode === IN_ROW_MODE ||\n        p.insertionMode === IN_CELL_MODE\n    ) {\n        p.insertionMode = IN_SELECT_IN_TABLE_MODE;\n    } else {\n        p.insertionMode = IN_SELECT_MODE;\n    }\n}\n\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagName === $.OPTION) {\n        p.openElements.pop();\n    }\n\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction menuStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n\n    p._insertElement(token, NS.HTML);\n}\n\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    } else {\n        p._insertElement(token, NS.MATHML);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    } else {\n        p._insertElement(token, NS.SVG);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction startTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.P) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.A) {\n                aStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.OL || tn === $.UL) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderStartTagInBody(p, token);\n            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {\n                listItemStartTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.BR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.HR) {\n                hrStartTagInBody(p, token);\n            } else if (tn === $.RB) {\n                rbStartTagInBody(p, token);\n            } else if (tn === $.RT || tn === $.RP) {\n                rtStartTagInBody(p, token);\n            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.PRE) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.BIG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.IMG || tn === $.WBR) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.XMP) {\n                xmpStartTagInBody(p, token);\n            } else if (tn === $.SVG) {\n                svgStartTagInBody(p, token);\n            } else if (tn === $.RTC) {\n                rbStartTagInBody(p, token);\n            } else if (tn !== $.COL) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                htmlStartTagInBody(p, token);\n            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {\n                startTagInHead(p, token);\n            } else if (tn === $.BODY) {\n                bodyStartTagInBody(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formStartTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.NOBR) {\n                nobrStartTagInBody(p, token);\n            } else if (tn === $.AREA) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.MATH) {\n                mathStartTagInBody(p, token);\n            } else if (tn === $.MENU) {\n                menuStartTagInBody(p, token);\n            } else if (tn !== $.HEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.STYLE || tn === $.TITLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.ASIDE) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.TABLE) {\n                tableStartTagInBody(p, token);\n            } else if (tn === $.EMBED) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInBody(p, token);\n            } else if (tn === $.PARAM || tn === $.TRACK) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IMAGE) {\n                imageStartTagInBody(p, token);\n            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.BUTTON) {\n                buttonStartTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                bStartTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.KEYGEN) {\n                areaStartTagInBody(p, token);\n            } else if (tn === $.SOURCE) {\n                paramStartTagInBody(p, token);\n            } else if (tn === $.IFRAME) {\n                iframeStartTagInBody(p, token);\n            } else if (tn === $.SELECT) {\n                selectStartTagInBody(p, token);\n            } else if (tn === $.OPTION) {\n                optgroupStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.BGSOUND) {\n                startTagInHead(p, token);\n            } else if (\n                tn === $.DETAILS ||\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY\n            ) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.LISTING) {\n                preStartTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletStartTagInBody(p, token);\n            } else if (tn === $.NOEMBED) {\n                noembedStartTagInBody(p, token);\n            } else if (tn !== $.CAPTION) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.BASEFONT) {\n                startTagInHead(p, token);\n            } else if (tn === $.FRAMESET) {\n                framesetStartTagInBody(p, token);\n            } else if (tn === $.FIELDSET) {\n                addressStartTagInBody(p, token);\n            } else if (tn === $.TEXTAREA) {\n                textareaStartTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else if (tn === $.NOSCRIPT) {\n                if (p.options.scriptingEnabled) {\n                    noembedStartTagInBody(p, token);\n                } else {\n                    genericStartTagInBody(p, token);\n                }\n            } else if (tn === $.OPTGROUP) {\n                optgroupStartTagInBody(p, token);\n            } else if (tn !== $.COLGROUP) {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 9:\n            if (tn === $.PLAINTEXT) {\n                plaintextStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressStartTagInBody(p, token);\n            } else {\n                genericStartTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericStartTagInBody(p, token);\n    }\n}\n\nfunction bodyEndTagInBody(p) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n    }\n}\n\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = AFTER_BODY_MODE;\n        p._processToken(token);\n    }\n}\n\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const formElement = p.formElement;\n\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        } else {\n            p.openElements.remove(formElement);\n        }\n    }\n}\n\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement($.P);\n    }\n\n    p._closePElement();\n}\n\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\n\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\n\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\n\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\n\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement($.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\n\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getTagName(element) === tn) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tn);\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n\n        if (p._isSpecialElement(element)) {\n            break;\n        }\n    }\n}\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction endTagInBody(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 1:\n            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.P) {\n                pEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 2:\n            if (tn === $.DL || tn === $.UL || tn === $.OL) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.LI) {\n                liEndTagInBody(p, token);\n            } else if (tn === $.DD || tn === $.DT) {\n                ddEndTagInBody(p, token);\n            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {\n                numberedHeaderEndTagInBody(p, token);\n            } else if (tn === $.BR) {\n                brEndTagInBody(p, token);\n            } else if (tn === $.EM || tn === $.TT) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.BIG) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.BODY) {\n                bodyEndTagInBody(p, token);\n            } else if (tn === $.HTML) {\n                htmlEndTagInBody(p, token);\n            } else if (tn === $.FORM) {\n                formEndTagInBody(p, token);\n            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {\n                callAdoptionAgency(p, token);\n            } else if (tn === $.MAIN || tn === $.MENU) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.ASIDE) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.SMALL) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (\n                tn === $.CENTER ||\n                tn === $.FIGURE ||\n                tn === $.FOOTER ||\n                tn === $.HEADER ||\n                tn === $.HGROUP ||\n                tn === $.DIALOG\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.APPLET || tn === $.OBJECT) {\n                appletEndTagInBody(p, token);\n            } else if (tn === $.STRIKE || tn === $.STRONG) {\n                callAdoptionAgency(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (\n                tn === $.ADDRESS ||\n                tn === $.ARTICLE ||\n                tn === $.DETAILS ||\n                tn === $.SECTION ||\n                tn === $.SUMMARY ||\n                tn === $.LISTING\n            ) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.MARQUEE) {\n                appletEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.FIELDSET) {\n                addressEndTagInBody(p, token);\n            } else if (tn === $.TEMPLATE) {\n                endTagInHead(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        case 10:\n            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {\n                addressEndTagInBody(p, token);\n            } else {\n                genericEndTagInBody(p, token);\n            }\n\n            break;\n\n        default:\n            genericEndTagInBody(p, token);\n    }\n}\n\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStackTop > -1) {\n        eofInTemplate(p, token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    if (token.tagName === $.SCRIPT) {\n        p.pendingScript = p.openElements.current;\n    }\n\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\n\nfunction eofInText(p, token) {\n    p._err(ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    const curTn = p.openElements.currentTagName;\n\n    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {\n        p.pendingCharacterTokens = [];\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = IN_TABLE_TEXT_MODE;\n        p._processToken(token);\n    } else {\n        tokenInTable(p, token);\n    }\n}\n\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_CAPTION_MODE;\n}\n\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n}\n\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.COLGROUP);\n    p.insertionMode = IN_COLUMN_GROUP_MODE;\n    p._processToken(token);\n}\n\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n}\n\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement($.TBODY);\n    p.insertionMode = IN_TABLE_BODY_MODE;\n    p._processToken(token);\n}\n\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processToken(token);\n    }\n}\n\nfunction inputStartTagInTable(p, token) {\n    const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);\n\n    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {\n        p._appendElement(token, NS.HTML);\n    } else {\n        tokenInTable(p, token);\n    }\n\n    token.ackSelfClosing = true;\n}\n\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\n\nfunction startTagInTable(p, token) {\n    const tn = token.tagName;\n\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH || tn === $.TR) {\n                tdStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 3:\n            if (tn === $.COL) {\n                colStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.FORM) {\n                formStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                tableStartTagInTable(p, token);\n            } else if (tn === $.STYLE) {\n                startTagInHead(p, token);\n            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n                tbodyStartTagInTable(p, token);\n            } else if (tn === $.INPUT) {\n                inputStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 6:\n            if (tn === $.SCRIPT) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 7:\n            if (tn === $.CAPTION) {\n                captionStartTagInTable(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        case 8:\n            if (tn === $.COLGROUP) {\n                colgroupStartTagInTable(p, token);\n            } else if (tn === $.TEMPLATE) {\n                startTagInHead(p, token);\n            } else {\n                tokenInTable(p, token);\n            }\n\n            break;\n\n        default:\n            tokenInTable(p, token);\n    }\n}\n\nfunction endTagInTable(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TABLE)) {\n            p.openElements.popUntilTagNamePopped($.TABLE);\n            p._resetInsertionMode();\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.CAPTION &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        tokenInTable(p, token);\n    }\n}\n\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n\n    p.fosterParentingEnabled = true;\n    p._processTokenInBodyMode(token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\n\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\n\nfunction tokenInTableText(p, token) {\n    let i = 0;\n\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    } else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCaption(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.CAPTION || tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_TABLE_MODE;\n\n            if (tn === $.TABLE) {\n                p._processToken(token);\n            }\n        }\n    } else if (\n        tn !== $.BODY &&\n        tn !== $.COL &&\n        tn !== $.COLGROUP &&\n        tn !== $.HTML &&\n        tn !== $.TBODY &&\n        tn !== $.TD &&\n        tn !== $.TFOOT &&\n        tn !== $.TH &&\n        tn !== $.THEAD &&\n        tn !== $.TR\n    ) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.COL) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    } else {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction endTagInColumnGroup(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.COLGROUP) {\n        if (p.openElements.currentTagName === $.COLGROUP) {\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    } else if (tn !== $.COL) {\n        tokenInColumnGroup(p, token);\n    }\n}\n\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagName === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = IN_TABLE_MODE;\n        p._processToken(token);\n    }\n}\n\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_ROW_MODE;\n    } else if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertFakeElement($.TR);\n        p.insertionMode = IN_ROW_MODE;\n        p._processToken(token);\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD\n    ) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n            p.openElements.clearBackToTableBodyContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TH || tn === $.TD) {\n        p.openElements.clearBackToTableRowContext();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = IN_CELL_MODE;\n        p.activeFormattingElements.insertMarker();\n    } else if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else {\n        startTagInTable(p, token);\n    }\n}\n\nfunction endTagInRow(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TR) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n        }\n    } else if (tn === $.TABLE) {\n        if (p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {\n        if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {\n            p.openElements.clearBackToTableRowContext();\n            p.openElements.pop();\n            p.insertionMode = IN_TABLE_BODY_MODE;\n            p._processToken(token);\n        }\n    } else if (\n        (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||\n        (tn !== $.HTML && tn !== $.TD && tn !== $.TH)\n    ) {\n        endTagInTable(p, token);\n    }\n}\n\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.COL ||\n        tn === $.COLGROUP ||\n        tn === $.TBODY ||\n        tn === $.TD ||\n        tn === $.TFOOT ||\n        tn === $.TH ||\n        tn === $.THEAD ||\n        tn === $.TR\n    ) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\n\nfunction endTagInCell(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.TD || tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped(tn);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = IN_ROW_MODE;\n        }\n    } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p._closeTableCell();\n            p._processToken(token);\n        }\n    } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {\n        endTagInBody(p, token);\n    }\n}\n\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.OPTGROUP) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {\n        if (p.openElements.hasInSelectScope($.SELECT)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n\n            if (tn !== $.SELECT) {\n                p._processToken(token);\n            }\n        }\n    } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInSelect(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.OPTGROUP) {\n        const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];\n        const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);\n\n        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n\n        if (p.openElements.currentTagName === $.OPTGROUP) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.OPTION) {\n        if (p.openElements.currentTagName === $.OPTION) {\n            p.openElements.pop();\n        }\n    } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n    } else if (tn === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\n//12.2.5.4.17 The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        startTagInSelect(p, token);\n    }\n}\n\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH\n    ) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p._processToken(token);\n        }\n    } else {\n        endTagInSelect(p, token);\n    }\n}\n\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    const tn = token.tagName;\n\n    if (\n        tn === $.BASE ||\n        tn === $.BASEFONT ||\n        tn === $.BGSOUND ||\n        tn === $.LINK ||\n        tn === $.META ||\n        tn === $.NOFRAMES ||\n        tn === $.SCRIPT ||\n        tn === $.STYLE ||\n        tn === $.TEMPLATE ||\n        tn === $.TITLE\n    ) {\n        startTagInHead(p, token);\n    } else {\n        const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;\n\n        p._popTmplInsertionMode();\n        p._pushTmplInsertionMode(newInsertionMode);\n        p.insertionMode = newInsertionMode;\n        p._processToken(token);\n    }\n}\n\nfunction endTagInTemplate(p, token) {\n    if (token.tagName === $.TEMPLATE) {\n        endTagInHead(p, token);\n    }\n}\n\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p._popTmplInsertionMode();\n        p._resetInsertionMode();\n        p._processToken(token);\n    } else {\n        p.stopped = true;\n    }\n}\n\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction endTagAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = AFTER_AFTER_BODY_MODE;\n        }\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.FRAMESET) {\n        p._insertElement(token, NS.HTML);\n    } else if (tn === $.FRAME) {\n        p._appendElement(token, NS.HTML);\n        token.ackSelfClosing = true;\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagInFrameset(p, token) {\n    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n\n        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {\n            p.insertionMode = AFTER_FRAMESET_MODE;\n        }\n    }\n}\n\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagName === $.HTML) {\n        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;\n    }\n}\n\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagName === $.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterAfterBody(p, token);\n    }\n}\n\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = IN_BODY_MODE;\n    p._processToken(token);\n}\n\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    const tn = token.tagName;\n\n    if (tn === $.HTML) {\n        startTagInBody(p, token);\n    } else if (tn === $.NOFRAMES) {\n        startTagInHead(p, token);\n    }\n}\n\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\n\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\n\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token) && !p.fragmentContext) {\n        while (\n            p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n            !p._isIntegrationPoint(p.openElements.current)\n        ) {\n            p.openElements.pop();\n        }\n\n        p._processToken(token);\n    } else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n\n        foreignContent.adjustTokenXMLAttrs(token);\n\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        } else {\n            p._insertElement(token, currentNs);\n        }\n\n        token.ackSelfClosing = true;\n    }\n}\n\nfunction endTagInForeignContent(p, token) {\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._processToken(token);\n            break;\n        }\n\n        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {\n            p.openElements.popUntilElementPopped(element);\n            break;\n        }\n    }\n}\n",
    "mapping": {
      "../tokenizer": "{761C0D3D-320B-4B0F-91FE-37B5377C2B31}",
      "./open-element-stack": "{1AD1DE4D-0E73-4336-AF95-DAD192C06A4F}",
      "./formatting-element-list": "{D9EEE9FB-9DE4-43F6-8C43-ECA4500594BC}",
      "../extensions/location-info/parser-mixin": "{34D8CEBC-38CA-4E72-B40E-BF7449535637}",
      "../extensions/error-reporting/parser-mixin": "{D27082BE-812B-4D8B-9DC4-9C29FFDD2D4C}",
      "../tree-adapters/default": "{DFAA114F-94E2-459A-912E-AC7044067C5B}",
      "../utils/merge-options": "{CE574C8F-3CE0-4460-9A45-D891F2126526}",
      "../common/doctype": "{D8D1DD52-E6A1-462E-BBF7-67620D2B96C4}",
      "../common/foreign-content": "{D265EA2E-95FF-400F-BA46-E282B94ABD94}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/parser/index.js"
  },
  "{1107758D-E72A-4397-B84D-F28AE0B2AFCA}": {
    "source": "{\n  \"_from\": \"parse5@^6.0.0\",\n  \"_id\": \"parse5@6.0.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==\",\n  \"_location\": \"/parse5\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"parse5@^6.0.0\",\n    \"name\": \"parse5\",\n    \"escapedName\": \"parse5\",\n    \"rawSpec\": \"^6.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^6.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/rehype-parse\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz\",\n  \"_shasum\": \"e1a1c085c569b3dc08321184f19a39cc27f7c30b\",\n  \"_spec\": \"parse5@^6.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\rehype-parse\",\n  \"author\": {\n    \"name\": \"Ivan Nikulin\",\n    \"email\": \"ifaaan@gmail.com\",\n    \"url\": \"https://github.com/inikulin\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/inikulin/parse5/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": \"https://github.com/inikulin/parse5/graphs/contributors\",\n  \"deprecated\": false,\n  \"description\": \"HTML parser and serializer.\",\n  \"files\": [\n    \"lib\"\n  ],\n  \"gitHead\": \"37227a3429584903cbd1799dade995266fc2dbe6\",\n  \"homepage\": \"https://github.com/inikulin/parse5\",\n  \"keywords\": [\n    \"html\",\n    \"parser\",\n    \"html5\",\n    \"WHATWG\",\n    \"specification\",\n    \"fast\",\n    \"html parser\",\n    \"html5 parser\",\n    \"htmlparser\",\n    \"parse5\",\n    \"serializer\",\n    \"html serializer\",\n    \"htmlserializer\",\n    \"parse\",\n    \"serialize\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"./lib/index.js\",\n  \"name\": \"parse5\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/inikulin/parse5.git\"\n  },\n  \"version\": \"6.0.1\"\n}\n",
    "path": "{markdown-translate}/node_modules/parse5/package.json"
  },
  "{761C0D3D-320B-4B0F-91FE-37B5377C2B31}": {
    "source": "'use strict';\n\nconst Preprocessor = require('./preprocessor');\nconst unicode = require('../common/unicode');\nconst neTree = require('./named-entity-data');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\nconst $$ = unicode.CODE_POINT_SEQUENCES;\n\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = {\n    0x80: 0x20ac,\n    0x82: 0x201a,\n    0x83: 0x0192,\n    0x84: 0x201e,\n    0x85: 0x2026,\n    0x86: 0x2020,\n    0x87: 0x2021,\n    0x88: 0x02c6,\n    0x89: 0x2030,\n    0x8a: 0x0160,\n    0x8b: 0x2039,\n    0x8c: 0x0152,\n    0x8e: 0x017d,\n    0x91: 0x2018,\n    0x92: 0x2019,\n    0x93: 0x201c,\n    0x94: 0x201d,\n    0x95: 0x2022,\n    0x96: 0x2013,\n    0x97: 0x2014,\n    0x98: 0x02dc,\n    0x99: 0x2122,\n    0x9a: 0x0161,\n    0x9b: 0x203a,\n    0x9c: 0x0153,\n    0x9e: 0x017e,\n    0x9f: 0x0178\n};\n\n// Named entity tree flags\nconst HAS_DATA_FLAG = 1 << 0;\nconst DATA_DUPLET_FLAG = 1 << 1;\nconst HAS_BRANCHES_FLAG = 1 << 2;\nconst MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;\n\n//States\nconst DATA_STATE = 'DATA_STATE';\nconst RCDATA_STATE = 'RCDATA_STATE';\nconst RAWTEXT_STATE = 'RAWTEXT_STATE';\nconst SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';\nconst PLAINTEXT_STATE = 'PLAINTEXT_STATE';\nconst TAG_OPEN_STATE = 'TAG_OPEN_STATE';\nconst END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';\nconst TAG_NAME_STATE = 'TAG_NAME_STATE';\nconst RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';\nconst RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';\nconst RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';\nconst RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';\nconst RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';\nconst RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';\nconst SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';\nconst SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';\nconst SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';\nconst BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';\nconst ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';\nconst AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';\nconst BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';\nconst ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';\nconst ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';\nconst AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';\nconst SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';\nconst BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';\nconst MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';\nconst COMMENT_START_STATE = 'COMMENT_START_STATE';\nconst COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';\nconst COMMENT_STATE = 'COMMENT_STATE';\nconst COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';\nconst COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';\nconst COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';\nconst COMMENT_END_STATE = 'COMMENT_END_STATE';\nconst COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';\nconst DOCTYPE_STATE = 'DOCTYPE_STATE';\nconst BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';\nconst DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';\nconst AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';\nconst BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';\nconst AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';\nconst BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';\nconst DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';\nconst AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';\nconst BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';\nconst CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';\nconst CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';\nconst CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';\nconst CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';\nconst NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';\nconst AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';\nconst HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';\nconst DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';\nconst NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';\n\n//Utils\n\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\n\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\n\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\n\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\n\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\n\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\n\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\n\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\n\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\n\nfunction toAsciiLowerCodePoint(cp) {\n    return cp + 0x0020;\n}\n\n//NOTE: String.fromCharCode() function can handle only characters from BMP subset.\n//So, we need to workaround this manually.\n//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)\nfunction toChar(cp) {\n    if (cp <= 0xffff) {\n        return String.fromCharCode(cp);\n    }\n\n    cp -= 0x10000;\n    return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));\n}\n\nfunction toAsciiLowerChar(cp) {\n    return String.fromCharCode(toAsciiLowerCodePoint(cp));\n}\n\nfunction findNamedEntityTreeBranch(nodeIx, cp) {\n    const branchCount = neTree[++nodeIx];\n    let lo = ++nodeIx;\n    let hi = lo + branchCount - 1;\n\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midCp = neTree[mid];\n\n        if (midCp < cp) {\n            lo = mid + 1;\n        } else if (midCp > cp) {\n            hi = mid - 1;\n        } else {\n            return neTree[mid + branchCount];\n        }\n    }\n\n    return -1;\n}\n\n//Tokenizer\nclass Tokenizer {\n    constructor() {\n        this.preprocessor = new Preprocessor();\n\n        this.tokenQueue = [];\n\n        this.allowCDATA = false;\n\n        this.state = DATA_STATE;\n        this.returnState = '';\n\n        this.charRefCode = -1;\n        this.tempBuff = [];\n        this.lastStartTagName = '';\n\n        this.consumedAfterSnapshot = -1;\n        this.active = false;\n\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = null;\n    }\n\n    //Errors\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _errOnNextCodePoint(err) {\n        this._consume();\n        this._err(err);\n        this._unconsume();\n    }\n\n    //API\n    getNextToken() {\n        while (!this.tokenQueue.length && this.active) {\n            this.consumedAfterSnapshot = 0;\n\n            const cp = this._consume();\n\n            if (!this._ensureHibernation()) {\n                this[this.state](cp);\n            }\n        }\n\n        return this.tokenQueue.shift();\n    }\n\n    write(chunk, isLastChunk) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    }\n\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {\n                this.preprocessor.retreat();\n            }\n\n            this.active = false;\n            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n\n    _unconsume() {\n        this.consumedAfterSnapshot--;\n        this.preprocessor.retreat();\n    }\n\n    _reconsumeInState(state) {\n        this.state = state;\n        this._unconsume();\n    }\n\n    _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {\n        let consumedCount = 0;\n        let isMatch = true;\n        const patternLength = pattern.length;\n        let patternPos = 0;\n        let cp = startCp;\n        let patternCp = void 0;\n\n        for (; patternPos < patternLength; patternPos++) {\n            if (patternPos > 0) {\n                cp = this._consume();\n                consumedCount++;\n            }\n\n            if (cp === $.EOF) {\n                isMatch = false;\n                break;\n            }\n\n            patternCp = pattern[patternPos];\n\n            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {\n                isMatch = false;\n                break;\n            }\n        }\n\n        if (!isMatch) {\n            while (consumedCount--) {\n                this._unconsume();\n            }\n        }\n\n        return isMatch;\n    }\n\n    //Temp buffer\n    _isTempBufferEqualToScriptString() {\n        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this.tempBuff.length; i++) {\n            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: Tokenizer.START_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createEndTagToken() {\n        this.currentToken = {\n            type: Tokenizer.END_TAG_TOKEN,\n            tagName: '',\n            selfClosing: false,\n            attrs: []\n        };\n    }\n\n    _createCommentToken() {\n        this.currentToken = {\n            type: Tokenizer.COMMENT_TOKEN,\n            data: ''\n        };\n    }\n\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: Tokenizer.DOCTYPE_TOKEN,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null\n        };\n    }\n\n    _createCharacterToken(type, ch) {\n        this.currentCharacterToken = {\n            type: type,\n            chars: ch\n        };\n    }\n\n    _createEOFToken() {\n        this.currentToken = { type: Tokenizer.EOF_TOKEN };\n    }\n\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: ''\n        };\n    }\n\n    _leaveAttrName(toState) {\n        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {\n            this.currentToken.attrs.push(this.currentAttr);\n        } else {\n            this._err(ERR.duplicateAttribute);\n        }\n\n        this.state = toState;\n    }\n\n    _leaveAttrValue(toState) {\n        this.state = toState;\n    }\n\n    //Token emission\n    _emitCurrentToken() {\n        this._emitCurrentCharacterToken();\n\n        const ct = this.currentToken;\n\n        this.currentToken = null;\n\n        //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.\n        if (ct.type === Tokenizer.START_TAG_TOKEN) {\n            this.lastStartTagName = ct.tagName;\n        } else if (ct.type === Tokenizer.END_TAG_TOKEN) {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n        }\n\n        this.tokenQueue.push(ct);\n    }\n\n    _emitCurrentCharacterToken() {\n        if (this.currentCharacterToken) {\n            this.tokenQueue.push(this.currentCharacterToken);\n            this.currentCharacterToken = null;\n        }\n    }\n\n    _emitEOFToken() {\n        this._createEOFToken();\n        this._emitCurrentToken();\n    }\n\n    //Characters emission\n\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)NULL_CHARACTER_TOKEN - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {\n            this._emitCurrentCharacterToken();\n        }\n\n        if (this.currentCharacterToken) {\n            this.currentCharacterToken.chars += ch;\n        } else {\n            this._createCharacterToken(type, ch);\n        }\n    }\n\n    _emitCodePoint(cp) {\n        let type = Tokenizer.CHARACTER_TOKEN;\n\n        if (isWhitespace(cp)) {\n            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;\n        } else if (cp === $.NULL) {\n            type = Tokenizer.NULL_CHARACTER_TOKEN;\n        }\n\n        this._appendCharToCurrentCharacterToken(type, toChar(cp));\n    }\n\n    _emitSeveralCodePoints(codePoints) {\n        for (let i = 0; i < codePoints.length; i++) {\n            this._emitCodePoint(codePoints[i]);\n        }\n    }\n\n    //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.\n    //So we can avoid additional checks here.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);\n    }\n\n    // Character reference helpers\n    _matchNamedCharacterReference(startCp) {\n        let result = null;\n        let excess = 1;\n        let i = findNamedEntityTreeBranch(0, startCp);\n\n        this.tempBuff.push(startCp);\n\n        while (i > -1) {\n            const current = neTree[i];\n            const inNode = current < MAX_BRANCH_MARKER_VALUE;\n            const nodeWithData = inNode && current & HAS_DATA_FLAG;\n\n            if (nodeWithData) {\n                //NOTE: we use greedy search, so we continue lookup at this point\n                result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];\n                excess = 0;\n            }\n\n            const cp = this._consume();\n\n            this.tempBuff.push(cp);\n            excess++;\n\n            if (cp === $.EOF) {\n                break;\n            }\n\n            if (inNode) {\n                i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;\n            } else {\n                i = cp === current ? ++i : -1;\n            }\n        }\n\n        while (excess--) {\n            this.tempBuff.pop();\n            this._unconsume();\n        }\n\n        return result;\n    }\n\n    _isCharacterReferenceInAttribute() {\n        return (\n            this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||\n            this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE\n        );\n    }\n\n    _isCharacterReferenceAttributeQuirk(withSemicolon) {\n        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {\n            const nextCp = this._consume();\n\n            this._unconsume();\n\n            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n        }\n\n        return false;\n    }\n\n    _flushCodePointsConsumedAsCharacterReference() {\n        if (this._isCharacterReferenceInAttribute()) {\n            for (let i = 0; i < this.tempBuff.length; i++) {\n                this.currentAttr.value += toChar(this.tempBuff[i]);\n            }\n        } else {\n            this._emitSeveralCodePoints(this.tempBuff);\n        }\n\n        this.tempBuff = [];\n    }\n\n    // State machine\n\n    // Data state\n    //------------------------------------------------------------------\n    [DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = TAG_OPEN_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = DATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitCodePoint(cp);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    //  RCDATA state\n    //------------------------------------------------------------------\n    [RCDATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.AMPERSAND) {\n            this.returnState = RCDATA_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = RCDATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    [RAWTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    [PLAINTEXT_STATE](cp) {\n        this.preprocessor.dropParsedChunk();\n\n        if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Tag open state\n    //------------------------------------------------------------------\n    [TAG_OPEN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.state = MARKUP_DECLARATION_OPEN_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.QUESTION_MARK) {\n            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('<');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._emitChars('<');\n            this._reconsumeInState(DATA_STATE);\n        }\n    }\n\n    // End tag open state\n    //------------------------------------------------------------------\n    [END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(TAG_NAME_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingEndTagName);\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofBeforeTagName);\n            this._emitChars('</');\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.invalidFirstCharacterOfTagName);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Tag name state\n    //------------------------------------------------------------------\n    [TAG_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n        } else if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentToken.tagName += toChar(cp);\n        }\n    }\n\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    [RCDATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RCDATA_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    [RCDATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this.state = DATA_STATE;\n                    this._emitCurrentToken();\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RCDATA_STATE);\n        }\n    }\n\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = RAWTEXT_END_TAG_OPEN_STATE;\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    [RAWTEXT_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(RAWTEXT_STATE);\n        }\n    }\n\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = SCRIPT_DATA_ESCAPE_START_STATE;\n            this._emitChars('<!');\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                } else if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                } else if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_STATE);\n        }\n    }\n\n    // Script data escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;\n        } else if (isAsciiLetter(cp)) {\n            this.tempBuff = [];\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);\n        } else {\n            this._emitChars('<');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);\n        } else {\n            this._emitChars('</');\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {\n        if (isAsciiUpper(cp)) {\n            this.currentToken.tagName += toAsciiLowerChar(cp);\n            this.tempBuff.push(cp);\n        } else if (isAsciiLower(cp)) {\n            this.currentToken.tagName += toChar(cp);\n            this.tempBuff.push(cp);\n        } else {\n            if (this.lastStartTagName === this.currentToken.tagName) {\n                if (isWhitespace(cp)) {\n                    this.state = BEFORE_ATTRIBUTE_NAME_STATE;\n                    return;\n                }\n\n                if (cp === $.SOLIDUS) {\n                    this.state = SELF_CLOSING_START_TAG_STATE;\n                    return;\n                }\n\n                if (cp === $.GREATER_THAN_SIGN) {\n                    this._emitCurrentToken();\n                    this.state = DATA_STATE;\n                    return;\n                }\n            }\n\n            this._emitChars('</');\n            this._emitSeveralCodePoints(this.tempBuff);\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE\n                : SCRIPT_DATA_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this._emitChars('-');\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;\n            this._emitChars('<');\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = SCRIPT_DATA_STATE;\n            this._emitChars('>');\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitChars(unicode.REPLACEMENT_CHARACTER);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInScriptHtmlCommentLikeText);\n            this._emitEOFToken();\n        } else {\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.SOLIDUS) {\n            this.tempBuff = [];\n            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;\n            this._emitChars('/');\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {\n            this.state = this._isTempBufferEqualToScriptString()\n                ? SCRIPT_DATA_ESCAPED_STATE\n                : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;\n\n            this._emitCodePoint(cp);\n        } else if (isAsciiUpper(cp)) {\n            this.tempBuff.push(toAsciiLowerCodePoint(cp));\n            this._emitCodePoint(cp);\n        } else if (isAsciiLower(cp)) {\n            this.tempBuff.push(cp);\n            this._emitCodePoint(cp);\n        } else {\n            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);\n        }\n    }\n\n    // Before attribute name state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.EQUALS_SIGN) {\n            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n            this._createAttr('=');\n            this.state = ATTRIBUTE_NAME_STATE;\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Attribute name state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {\n            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);\n            this._unconsume();\n        } else if (cp === $.EQUALS_SIGN) {\n            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);\n        } else if (isAsciiUpper(cp)) {\n            this.currentAttr.name += toAsciiLowerChar(cp);\n        } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {\n            this._err(ERR.unexpectedCharacterInAttributeName);\n            this.currentAttr.name += toChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentAttr.name += toChar(cp);\n        }\n    }\n\n    // After attribute name state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.SOLIDUS) {\n            this.state = SELF_CLOSING_START_TAG_STATE;\n        } else if (cp === $.EQUALS_SIGN) {\n            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._createAttr('');\n            this._reconsumeInState(ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Before attribute value state\n    //------------------------------------------------------------------\n    [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingAttributeValue);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);\n        }\n    }\n\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.AMPERSAND) {\n            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;\n            this.state = CHARACTER_REFERENCE_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;\n        } else if (\n            cp === $.QUOTATION_MARK ||\n            cp === $.APOSTROPHE ||\n            cp === $.LESS_THAN_SIGN ||\n            cp === $.EQUALS_SIGN ||\n            cp === $.GRAVE_ACCENT\n        ) {\n            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n            this.currentAttr.value += toChar(cp);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this.currentAttr.value += toChar(cp);\n        }\n    }\n\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);\n        } else if (cp === $.SOLIDUS) {\n            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._leaveAttrValue(DATA_STATE);\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBetweenAttributes);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    [SELF_CLOSING_START_TAG_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.currentToken.selfClosing = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInTag);\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedSolidusInTag);\n            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);\n        }\n    }\n\n    // Bogus comment state\n    //------------------------------------------------------------------\n    [BOGUS_COMMENT_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    [MARKUP_DECLARATION_OPEN_STATE](cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {\n            this._createCommentToken();\n            this.state = COMMENT_START_STATE;\n        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {\n            this.state = DOCTYPE_STATE;\n        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {\n            if (this.allowCDATA) {\n                this.state = CDATA_SECTION_STATE;\n            } else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken();\n                this.currentToken.data = '[CDATA[';\n                this.state = BOGUS_COMMENT_STATE;\n            }\n        }\n\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken();\n            this._reconsumeInState(BOGUS_COMMENT_STATE);\n        }\n    }\n\n    // Comment start state\n    //------------------------------------------------------------------\n    [COMMENT_START_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_START_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment start dash state\n    //------------------------------------------------------------------\n    [COMMENT_START_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptClosingOfEmptyComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment state\n    //------------------------------------------------------------------\n    [COMMENT_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '<';\n            this.state = COMMENT_LESS_THAN_SIGN_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += toChar(cp);\n        }\n    }\n\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_STATE](cp) {\n        if (cp === $.EXCLAMATION_MARK) {\n            this.currentToken.data += '!';\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;\n        } else if (cp === $.LESS_THAN_SIGN) {\n            this.currentToken.data += '!';\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;\n        } else {\n            this._reconsumeInState(COMMENT_END_DASH_STATE);\n        }\n    }\n\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n\n        this._reconsumeInState(COMMENT_END_STATE);\n    }\n\n    // Comment end dash state\n    //------------------------------------------------------------------\n    [COMMENT_END_DASH_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = COMMENT_END_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '-';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end state\n    //------------------------------------------------------------------\n    [COMMENT_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EXCLAMATION_MARK) {\n            this.state = COMMENT_END_BANG_STATE;\n        } else if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '-';\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // Comment end bang state\n    //------------------------------------------------------------------\n    [COMMENT_END_BANG_STATE](cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.currentToken.data += '--!';\n            this.state = COMMENT_END_DASH_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.incorrectlyClosedComment);\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInComment);\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.data += '--!';\n            this._reconsumeInState(COMMENT_STATE);\n        }\n    }\n\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    [DOCTYPE_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingWhitespaceBeforeDoctypeName);\n            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);\n        }\n    }\n\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(toAsciiLowerChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);\n            this.state = DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeName);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this._createDoctypeToken(null);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._createDoctypeToken(toChar(cp));\n            this.state = DOCTYPE_NAME_STATE;\n        }\n    }\n\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    [DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = AFTER_DOCTYPE_NAME_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (isAsciiUpper(cp)) {\n            this.currentToken.name += toAsciiLowerChar(cp);\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.name += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_NAME_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;\n        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {\n            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;\n        }\n        //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.publicId = '';\n            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypePublicIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.publicId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {\n        if (isWhitespace(cp)) {\n            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.QUOTATION_MARK) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.QUOTATION_MARK) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;\n        } else if (cp === $.APOSTROPHE) {\n            this.currentToken.systemId = '';\n            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.missingDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this.state = DATA_STATE;\n            this._emitCurrentToken();\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {\n        if (cp === $.QUOTATION_MARK) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {\n        if (cp === $.APOSTROPHE) {\n            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;\n        } else if (cp === $.GREATER_THAN_SIGN) {\n            this._err(ERR.abruptDoctypeSystemIdentifier);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this.currentToken.systemId += toChar(cp);\n        }\n    }\n\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {\n        if (isWhitespace(cp)) {\n            return;\n        }\n\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInDoctype);\n            this.currentToken.forceQuirks = true;\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        } else {\n            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n            this._reconsumeInState(BOGUS_DOCTYPE_STATE);\n        }\n    }\n\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    [BOGUS_DOCTYPE_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this._emitCurrentToken();\n            this.state = DATA_STATE;\n        } else if (cp === $.NULL) {\n            this._err(ERR.unexpectedNullCharacter);\n        } else if (cp === $.EOF) {\n            this._emitCurrentToken();\n            this._emitEOFToken();\n        }\n    }\n\n    // CDATA section state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_BRACKET_STATE;\n        } else if (cp === $.EOF) {\n            this._err(ERR.eofInCdata);\n            this._emitEOFToken();\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_BRACKET_STATE](cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = CDATA_SECTION_END_STATE;\n        } else {\n            this._emitChars(']');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // CDATA section end state\n    //------------------------------------------------------------------\n    [CDATA_SECTION_END_STATE](cp) {\n        if (cp === $.GREATER_THAN_SIGN) {\n            this.state = DATA_STATE;\n        } else if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this._emitChars(']');\n        } else {\n            this._emitChars(']]');\n            this._reconsumeInState(CDATA_SECTION_STATE);\n        }\n    }\n\n    // Character reference state\n    //------------------------------------------------------------------\n    [CHARACTER_REFERENCE_STATE](cp) {\n        this.tempBuff = [$.AMPERSAND];\n\n        if (cp === $.NUMBER_SIGN) {\n            this.tempBuff.push(cp);\n            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Named character reference state\n    //------------------------------------------------------------------\n    [NAMED_CHARACTER_REFERENCE_STATE](cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n\n        //NOTE: matching can be abrupted by hibernation. In that case match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            this.tempBuff = [$.AMPERSAND];\n        } else if (matchResult) {\n            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;\n\n            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {\n                if (!withSemicolon) {\n                    this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);\n                }\n\n                this.tempBuff = matchResult;\n            }\n\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointsConsumedAsCharacterReference();\n            this.state = AMBIGUOUS_AMPERSAND_STATE;\n        }\n    }\n\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    [AMBIGUOUS_AMPERSAND_STATE](cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            if (this._isCharacterReferenceInAttribute()) {\n                this.currentAttr.value += toChar(cp);\n            } else {\n                this._emitCodePoint(cp);\n            }\n        } else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {\n        this.charRefCode = 0;\n\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.tempBuff.push(cp);\n            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;\n        } else {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);\n        }\n    }\n\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiHexDigit(cp)) {\n            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Decimal character reference start state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);\n        } else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointsConsumedAsCharacterReference();\n            this._reconsumeInState(this.returnState);\n        }\n    }\n\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === $.SEMICOLON) {\n            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;\n        } else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);\n        }\n    }\n\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 0x10ffff) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];\n\n            if (replacement) {\n                this.charRefCode = replacement;\n            }\n        }\n\n        this.tempBuff = [this.charRefCode];\n\n        this._flushCodePointsConsumedAsCharacterReference();\n        this._reconsumeInState(this.returnState);\n    }\n}\n\n//Token types\nTokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';\nTokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';\nTokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';\nTokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';\nTokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';\nTokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';\nTokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';\nTokenizer.EOF_TOKEN = 'EOF_TOKEN';\nTokenizer.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';\n\n//Tokenizer initial states for different modes\nTokenizer.MODE = {\n    DATA: DATA_STATE,\n    RCDATA: RCDATA_STATE,\n    RAWTEXT: RAWTEXT_STATE,\n    SCRIPT_DATA: SCRIPT_DATA_STATE,\n    PLAINTEXT: PLAINTEXT_STATE\n};\n\n//Static\nTokenizer.getTokenAttr = function(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n\n    return null;\n};\n\nmodule.exports = Tokenizer;\n",
    "mapping": {
      "./preprocessor": "{0F62DB0A-B5F9-4F45-8758-E6B15016059E}",
      "./named-entity-data": "{F76F2BDC-A3BC-40F7-860E-3E8F405CEC40}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/tokenizer/index.js"
  },
  "{0F62DB0A-B5F9-4F45-8758-E6B15016059E}": {
    "source": "'use strict';\n\nconst unicode = require('../common/unicode');\nconst ERR = require('../common/error-codes');\n\n//Aliases\nconst $ = unicode.CODE_POINTS;\n\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    constructor() {\n        this.html = null;\n\n        this.pos = -1;\n        this.lastGapPos = -1;\n        this.lastCharPos = -1;\n\n        this.gapStack = [];\n\n        this.skipNextNewLine = false;\n\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n    }\n\n    _err() {\n        // NOTE: err reporting is noop by default. Enabled by mixin.\n    }\n\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.lastCharPos) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n\n            if (unicode.isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n\n                //NOTE: add gap that should be avoided during retreat\n                this._addGap();\n\n                return unicode.getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n\n        //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n\n        return cp;\n    }\n\n    dropParsedChunk() {\n        if (this.pos > this.bufferWaterline) {\n            this.lastCharPos -= this.pos;\n            this.html = this.html.substring(this.pos);\n            this.pos = 0;\n            this.lastGapPos = -1;\n            this.gapStack = [];\n        }\n    }\n\n    write(chunk, isLastChunk) {\n        if (this.html) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n\n        this.lastCharPos = this.html.length - 1;\n        this.endOfChunkHit = false;\n    }\n\n    advance() {\n        this.pos++;\n\n        if (this.pos > this.lastCharPos) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n\n        let cp = this.html.charCodeAt(this.pos);\n\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (this.skipNextNewLine && cp === $.LINE_FEED) {\n            this.skipNextNewLine = false;\n            this._addGap();\n            return this.advance();\n        }\n\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n\n        this.skipNextNewLine = false;\n\n        if (unicode.isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange =\n            (cp > 0x1f && cp < 0x7f) || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);\n\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n\n        return cp;\n    }\n\n    _checkForProblematicCharacters(cp) {\n        if (unicode.isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        } else if (unicode.isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n\n    retreat() {\n        if (this.pos === this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n\n        this.pos--;\n    }\n}\n\nmodule.exports = Preprocessor;\n",
    "mapping": {
      "../common/unicode": "{D7C78295-A801-4F85-B3A4-7C49659EF7A2}",
      "../common/error-codes": "{162A2224-FF97-4FD7-87B9-844E5AA96009}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/tokenizer/preprocessor.js"
  },
  "{D7C78295-A801-4F85-B3A4-7C49659EF7A2}": {
    "source": "'use strict';\n\nconst UNDEFINED_CODE_POINTS = [\n    0xfffe,\n    0xffff,\n    0x1fffe,\n    0x1ffff,\n    0x2fffe,\n    0x2ffff,\n    0x3fffe,\n    0x3ffff,\n    0x4fffe,\n    0x4ffff,\n    0x5fffe,\n    0x5ffff,\n    0x6fffe,\n    0x6ffff,\n    0x7fffe,\n    0x7ffff,\n    0x8fffe,\n    0x8ffff,\n    0x9fffe,\n    0x9ffff,\n    0xafffe,\n    0xaffff,\n    0xbfffe,\n    0xbffff,\n    0xcfffe,\n    0xcffff,\n    0xdfffe,\n    0xdffff,\n    0xefffe,\n    0xeffff,\n    0xffffe,\n    0xfffff,\n    0x10fffe,\n    0x10ffff\n];\n\nexports.REPLACEMENT_CHARACTER = '\\uFFFD';\n\nexports.CODE_POINTS = {\n    EOF: -1,\n    NULL: 0x00,\n    TABULATION: 0x09,\n    CARRIAGE_RETURN: 0x0d,\n    LINE_FEED: 0x0a,\n    FORM_FEED: 0x0c,\n    SPACE: 0x20,\n    EXCLAMATION_MARK: 0x21,\n    QUOTATION_MARK: 0x22,\n    NUMBER_SIGN: 0x23,\n    AMPERSAND: 0x26,\n    APOSTROPHE: 0x27,\n    HYPHEN_MINUS: 0x2d,\n    SOLIDUS: 0x2f,\n    DIGIT_0: 0x30,\n    DIGIT_9: 0x39,\n    SEMICOLON: 0x3b,\n    LESS_THAN_SIGN: 0x3c,\n    EQUALS_SIGN: 0x3d,\n    GREATER_THAN_SIGN: 0x3e,\n    QUESTION_MARK: 0x3f,\n    LATIN_CAPITAL_A: 0x41,\n    LATIN_CAPITAL_F: 0x46,\n    LATIN_CAPITAL_X: 0x58,\n    LATIN_CAPITAL_Z: 0x5a,\n    RIGHT_SQUARE_BRACKET: 0x5d,\n    GRAVE_ACCENT: 0x60,\n    LATIN_SMALL_A: 0x61,\n    LATIN_SMALL_F: 0x66,\n    LATIN_SMALL_X: 0x78,\n    LATIN_SMALL_Z: 0x7a,\n    REPLACEMENT_CHARACTER: 0xfffd\n};\n\nexports.CODE_POINT_SEQUENCES = {\n    DASH_DASH_STRING: [0x2d, 0x2d], //--\n    DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE\n    CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[\n    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script\n    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC\n    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM\n};\n\n//Surrogates\nexports.isSurrogate = function(cp) {\n    return cp >= 0xd800 && cp <= 0xdfff;\n};\n\nexports.isSurrogatePair = function(cp) {\n    return cp >= 0xdc00 && cp <= 0xdfff;\n};\n\nexports.getSurrogatePairCodePoint = function(cp1, cp2) {\n    return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;\n};\n\n//NOTE: excluding NULL and ASCII whitespace\nexports.isControlCodePoint = function(cp) {\n    return (\n        (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f)\n    );\n};\n\nexports.isUndefinedCodePoint = function(cp) {\n    return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/common/unicode.js"
  },
  "{162A2224-FF97-4FD7-87B9-844E5AA96009}": {
    "source": "'use strict';\n\nmodule.exports = {\n    controlCharacterInInputStream: 'control-character-in-input-stream',\n    noncharacterInInputStream: 'noncharacter-in-input-stream',\n    surrogateInInputStream: 'surrogate-in-input-stream',\n    nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',\n    endTagWithAttributes: 'end-tag-with-attributes',\n    endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',\n    unexpectedSolidusInTag: 'unexpected-solidus-in-tag',\n    unexpectedNullCharacter: 'unexpected-null-character',\n    unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',\n    invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',\n    unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',\n    missingEndTagName: 'missing-end-tag-name',\n    unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',\n    unknownNamedCharacterReference: 'unknown-named-character-reference',\n    missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',\n    unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',\n    unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',\n    eofBeforeTagName: 'eof-before-tag-name',\n    eofInTag: 'eof-in-tag',\n    missingAttributeValue: 'missing-attribute-value',\n    missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',\n    missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',\n    missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:\n        'missing-whitespace-between-doctype-public-and-system-identifiers',\n    missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',\n    missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',\n    missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',\n    missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',\n    missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',\n    abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',\n    abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',\n    cdataInHtmlContent: 'cdata-in-html-content',\n    incorrectlyOpenedComment: 'incorrectly-opened-comment',\n    eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',\n    eofInDoctype: 'eof-in-doctype',\n    nestedComment: 'nested-comment',\n    abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',\n    eofInComment: 'eof-in-comment',\n    incorrectlyClosedComment: 'incorrectly-closed-comment',\n    eofInCdata: 'eof-in-cdata',\n    absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',\n    nullCharacterReference: 'null-character-reference',\n    surrogateCharacterReference: 'surrogate-character-reference',\n    characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',\n    controlCharacterReference: 'control-character-reference',\n    noncharacterCharacterReference: 'noncharacter-character-reference',\n    missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',\n    missingDoctypeName: 'missing-doctype-name',\n    invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',\n    duplicateAttribute: 'duplicate-attribute',\n    nonConformingDoctype: 'non-conforming-doctype',\n    missingDoctype: 'missing-doctype',\n    misplacedDoctype: 'misplaced-doctype',\n    endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',\n    closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',\n    disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',\n    openElementsLeftAfterEof: 'open-elements-left-after-eof',\n    abandonedHeadElementChild: 'abandoned-head-element-child',\n    misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',\n    nestedNoscriptInHead: 'nested-noscript-in-head',\n    eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/common/error-codes.js"
  },
  "{F76F2BDC-A3BC-40F7-860E-3E8F405CEC40}": {
    "source": "'use strict';\n\n//NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption\n//(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)\nmodule.exports = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/tokenizer/named-entity-data.js"
  },
  "{1AD1DE4D-0E73-4336-AF95-DAD192C06A4F}": {
    "source": "'use strict';\n\nconst HTML = require('../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\n\n//Element utils\n\n//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.\n//It's faster than using dictionary.\nfunction isImpliedEndTagRequired(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;\n\n        case 3:\n            return tn === $.RTC;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 8:\n            return tn === $.OPTGROUP;\n    }\n\n    return false;\n}\n\nfunction isImpliedEndTagRequiredThoroughly(tn) {\n    switch (tn.length) {\n        case 1:\n            return tn === $.P;\n\n        case 2:\n            return (\n                tn === $.RB ||\n                tn === $.RP ||\n                tn === $.RT ||\n                tn === $.DD ||\n                tn === $.DT ||\n                tn === $.LI ||\n                tn === $.TD ||\n                tn === $.TH ||\n                tn === $.TR\n            );\n\n        case 3:\n            return tn === $.RTC;\n\n        case 5:\n            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;\n\n        case 6:\n            return tn === $.OPTION;\n\n        case 7:\n            return tn === $.CAPTION;\n\n        case 8:\n            return tn === $.OPTGROUP || tn === $.COLGROUP;\n    }\n\n    return false;\n}\n\nfunction isScopingElement(tn, ns) {\n    switch (tn.length) {\n        case 2:\n            if (tn === $.TD || tn === $.TH) {\n                return ns === NS.HTML;\n            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {\n                return ns === NS.MATHML;\n            }\n\n            break;\n\n        case 4:\n            if (tn === $.HTML) {\n                return ns === NS.HTML;\n            } else if (tn === $.DESC) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 5:\n            if (tn === $.TABLE) {\n                return ns === NS.HTML;\n            } else if (tn === $.MTEXT) {\n                return ns === NS.MATHML;\n            } else if (tn === $.TITLE) {\n                return ns === NS.SVG;\n            }\n\n            break;\n\n        case 6:\n            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;\n\n        case 7:\n            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;\n\n        case 8:\n            return tn === $.TEMPLATE && ns === NS.HTML;\n\n        case 13:\n            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;\n\n        case 14:\n            return tn === $.ANNOTATION_XML && ns === NS.MATHML;\n    }\n\n    return false;\n}\n\n//Stack of open elements\nclass OpenElementStack {\n    constructor(document, treeAdapter) {\n        this.stackTop = -1;\n        this.items = [];\n        this.current = document;\n        this.currentTagName = null;\n        this.currentTmplContent = null;\n        this.tmplCount = 0;\n        this.treeAdapter = treeAdapter;\n    }\n\n    //Index of element\n    _indexOf(element) {\n        let idx = -1;\n\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                idx = i;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);\n\n        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;\n    }\n\n    //Mutations\n    push(element) {\n        this.items[++this.stackTop] = element;\n        this._updateCurrentElement();\n\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n    }\n\n    pop() {\n        this.stackTop--;\n\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n\n        this._updateCurrentElement();\n    }\n\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n\n        this.items[idx] = newElement;\n\n        if (idx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    insertAfter(referenceElement, newElement) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n\n        this.items.splice(insertionIdx, 0, newElement);\n\n        if (insertionIdx === ++this.stackTop) {\n            this._updateCurrentElement();\n        }\n    }\n\n    popUntilTagNamePopped(tagName) {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === tagName && ns === NS.HTML) {\n                break;\n            }\n        }\n    }\n\n    popUntilElementPopped(element) {\n        while (this.stackTop > -1) {\n            const poppedElement = this.current;\n\n            this.pop();\n\n            if (poppedElement === element) {\n                break;\n            }\n        }\n    }\n\n    popUntilNumberedHeaderPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (\n                tn === $.H1 ||\n                tn === $.H2 ||\n                tn === $.H3 ||\n                tn === $.H4 ||\n                tn === $.H5 ||\n                (tn === $.H6 && ns === NS.HTML)\n            ) {\n                break;\n            }\n        }\n    }\n\n    popUntilTableCellPopped() {\n        while (this.stackTop > -1) {\n            const tn = this.currentTagName;\n            const ns = this.treeAdapter.getNamespaceURI(this.current);\n\n            this.pop();\n\n            if (tn === $.TD || (tn === $.TH && ns === NS.HTML)) {\n                break;\n            }\n        }\n    }\n\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.stackTop = 0;\n        this._updateCurrentElement();\n    }\n\n    clearBackToTableContext() {\n        while (\n            (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableBodyContext() {\n        while (\n            (this.currentTagName !== $.TBODY &&\n                this.currentTagName !== $.TFOOT &&\n                this.currentTagName !== $.THEAD &&\n                this.currentTagName !== $.TEMPLATE &&\n                this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    clearBackToTableRowContext() {\n        while (\n            (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML) ||\n            this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML\n        ) {\n            this.pop();\n        }\n    }\n\n    remove(element) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.items[i] === element) {\n                this.items.splice(i, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                break;\n            }\n        }\n    }\n\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        const element = this.items[1];\n\n        return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;\n    }\n\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n\n    getCommonAncestor(element) {\n        let elementIdx = this._indexOf(element);\n\n        return --elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.currentTagName === $.HTML;\n    }\n\n    //Element in scope\n    hasInScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (\n                (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) &&\n                ns === NS.HTML\n            ) {\n                return true;\n            }\n\n            if (isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInListItemScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInButtonScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n\n            if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {\n                return true;\n            }\n\n            if (tn === $.TABLE || tn === $.HTML) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.treeAdapter.getTagName(this.items[i]);\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n\n            if (ns !== NS.HTML) {\n                continue;\n            }\n\n            if (tn === tagName) {\n                return true;\n            }\n\n            if (tn !== $.OPTION && tn !== $.OPTGROUP) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (isImpliedEndTagRequired(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsThoroughly() {\n        while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {\n            this.pop();\n        }\n    }\n\n    generateImpliedEndTagsWithExclusion(exclusionTagName) {\n        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {\n            this.pop();\n        }\n    }\n}\n\nmodule.exports = OpenElementStack;\n",
    "mapping": {
      "../common/html": "{C6DD7E63-A04B-4080-AE19-FBA62298104D}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/parser/open-element-stack.js"
  },
  "{C6DD7E63-A04B-4080-AE19-FBA62298104D}": {
    "source": "'use strict';\n\nconst NS = (exports.NAMESPACES = {\n    HTML: 'http://www.w3.org/1999/xhtml',\n    MATHML: 'http://www.w3.org/1998/Math/MathML',\n    SVG: 'http://www.w3.org/2000/svg',\n    XLINK: 'http://www.w3.org/1999/xlink',\n    XML: 'http://www.w3.org/XML/1998/namespace',\n    XMLNS: 'http://www.w3.org/2000/xmlns/'\n});\n\nexports.ATTRS = {\n    TYPE: 'type',\n    ACTION: 'action',\n    ENCODING: 'encoding',\n    PROMPT: 'prompt',\n    NAME: 'name',\n    COLOR: 'color',\n    FACE: 'face',\n    SIZE: 'size'\n};\n\nexports.DOCUMENT_MODE = {\n    NO_QUIRKS: 'no-quirks',\n    QUIRKS: 'quirks',\n    LIMITED_QUIRKS: 'limited-quirks'\n};\n\nconst $ = (exports.TAG_NAMES = {\n    A: 'a',\n    ADDRESS: 'address',\n    ANNOTATION_XML: 'annotation-xml',\n    APPLET: 'applet',\n    AREA: 'area',\n    ARTICLE: 'article',\n    ASIDE: 'aside',\n\n    B: 'b',\n    BASE: 'base',\n    BASEFONT: 'basefont',\n    BGSOUND: 'bgsound',\n    BIG: 'big',\n    BLOCKQUOTE: 'blockquote',\n    BODY: 'body',\n    BR: 'br',\n    BUTTON: 'button',\n\n    CAPTION: 'caption',\n    CENTER: 'center',\n    CODE: 'code',\n    COL: 'col',\n    COLGROUP: 'colgroup',\n\n    DD: 'dd',\n    DESC: 'desc',\n    DETAILS: 'details',\n    DIALOG: 'dialog',\n    DIR: 'dir',\n    DIV: 'div',\n    DL: 'dl',\n    DT: 'dt',\n\n    EM: 'em',\n    EMBED: 'embed',\n\n    FIELDSET: 'fieldset',\n    FIGCAPTION: 'figcaption',\n    FIGURE: 'figure',\n    FONT: 'font',\n    FOOTER: 'footer',\n    FOREIGN_OBJECT: 'foreignObject',\n    FORM: 'form',\n    FRAME: 'frame',\n    FRAMESET: 'frameset',\n\n    H1: 'h1',\n    H2: 'h2',\n    H3: 'h3',\n    H4: 'h4',\n    H5: 'h5',\n    H6: 'h6',\n    HEAD: 'head',\n    HEADER: 'header',\n    HGROUP: 'hgroup',\n    HR: 'hr',\n    HTML: 'html',\n\n    I: 'i',\n    IMG: 'img',\n    IMAGE: 'image',\n    INPUT: 'input',\n    IFRAME: 'iframe',\n\n    KEYGEN: 'keygen',\n\n    LABEL: 'label',\n    LI: 'li',\n    LINK: 'link',\n    LISTING: 'listing',\n\n    MAIN: 'main',\n    MALIGNMARK: 'malignmark',\n    MARQUEE: 'marquee',\n    MATH: 'math',\n    MENU: 'menu',\n    META: 'meta',\n    MGLYPH: 'mglyph',\n    MI: 'mi',\n    MO: 'mo',\n    MN: 'mn',\n    MS: 'ms',\n    MTEXT: 'mtext',\n\n    NAV: 'nav',\n    NOBR: 'nobr',\n    NOFRAMES: 'noframes',\n    NOEMBED: 'noembed',\n    NOSCRIPT: 'noscript',\n\n    OBJECT: 'object',\n    OL: 'ol',\n    OPTGROUP: 'optgroup',\n    OPTION: 'option',\n\n    P: 'p',\n    PARAM: 'param',\n    PLAINTEXT: 'plaintext',\n    PRE: 'pre',\n\n    RB: 'rb',\n    RP: 'rp',\n    RT: 'rt',\n    RTC: 'rtc',\n    RUBY: 'ruby',\n\n    S: 's',\n    SCRIPT: 'script',\n    SECTION: 'section',\n    SELECT: 'select',\n    SOURCE: 'source',\n    SMALL: 'small',\n    SPAN: 'span',\n    STRIKE: 'strike',\n    STRONG: 'strong',\n    STYLE: 'style',\n    SUB: 'sub',\n    SUMMARY: 'summary',\n    SUP: 'sup',\n\n    TABLE: 'table',\n    TBODY: 'tbody',\n    TEMPLATE: 'template',\n    TEXTAREA: 'textarea',\n    TFOOT: 'tfoot',\n    TD: 'td',\n    TH: 'th',\n    THEAD: 'thead',\n    TITLE: 'title',\n    TR: 'tr',\n    TRACK: 'track',\n    TT: 'tt',\n\n    U: 'u',\n    UL: 'ul',\n\n    SVG: 'svg',\n\n    VAR: 'var',\n\n    WBR: 'wbr',\n\n    XMP: 'xmp'\n});\n\nexports.SPECIAL_ELEMENTS = {\n    [NS.HTML]: {\n        [$.ADDRESS]: true,\n        [$.APPLET]: true,\n        [$.AREA]: true,\n        [$.ARTICLE]: true,\n        [$.ASIDE]: true,\n        [$.BASE]: true,\n        [$.BASEFONT]: true,\n        [$.BGSOUND]: true,\n        [$.BLOCKQUOTE]: true,\n        [$.BODY]: true,\n        [$.BR]: true,\n        [$.BUTTON]: true,\n        [$.CAPTION]: true,\n        [$.CENTER]: true,\n        [$.COL]: true,\n        [$.COLGROUP]: true,\n        [$.DD]: true,\n        [$.DETAILS]: true,\n        [$.DIR]: true,\n        [$.DIV]: true,\n        [$.DL]: true,\n        [$.DT]: true,\n        [$.EMBED]: true,\n        [$.FIELDSET]: true,\n        [$.FIGCAPTION]: true,\n        [$.FIGURE]: true,\n        [$.FOOTER]: true,\n        [$.FORM]: true,\n        [$.FRAME]: true,\n        [$.FRAMESET]: true,\n        [$.H1]: true,\n        [$.H2]: true,\n        [$.H3]: true,\n        [$.H4]: true,\n        [$.H5]: true,\n        [$.H6]: true,\n        [$.HEAD]: true,\n        [$.HEADER]: true,\n        [$.HGROUP]: true,\n        [$.HR]: true,\n        [$.HTML]: true,\n        [$.IFRAME]: true,\n        [$.IMG]: true,\n        [$.INPUT]: true,\n        [$.LI]: true,\n        [$.LINK]: true,\n        [$.LISTING]: true,\n        [$.MAIN]: true,\n        [$.MARQUEE]: true,\n        [$.MENU]: true,\n        [$.META]: true,\n        [$.NAV]: true,\n        [$.NOEMBED]: true,\n        [$.NOFRAMES]: true,\n        [$.NOSCRIPT]: true,\n        [$.OBJECT]: true,\n        [$.OL]: true,\n        [$.P]: true,\n        [$.PARAM]: true,\n        [$.PLAINTEXT]: true,\n        [$.PRE]: true,\n        [$.SCRIPT]: true,\n        [$.SECTION]: true,\n        [$.SELECT]: true,\n        [$.SOURCE]: true,\n        [$.STYLE]: true,\n        [$.SUMMARY]: true,\n        [$.TABLE]: true,\n        [$.TBODY]: true,\n        [$.TD]: true,\n        [$.TEMPLATE]: true,\n        [$.TEXTAREA]: true,\n        [$.TFOOT]: true,\n        [$.TH]: true,\n        [$.THEAD]: true,\n        [$.TITLE]: true,\n        [$.TR]: true,\n        [$.TRACK]: true,\n        [$.UL]: true,\n        [$.WBR]: true,\n        [$.XMP]: true\n    },\n    [NS.MATHML]: {\n        [$.MI]: true,\n        [$.MO]: true,\n        [$.MN]: true,\n        [$.MS]: true,\n        [$.MTEXT]: true,\n        [$.ANNOTATION_XML]: true\n    },\n    [NS.SVG]: {\n        [$.TITLE]: true,\n        [$.FOREIGN_OBJECT]: true,\n        [$.DESC]: true\n    }\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/common/html.js"
  },
  "{D9EEE9FB-9DE4-43F6-8C43-ECA4500594BC}": {
    "source": "'use strict';\n\n//Const\nconst NOAH_ARK_CAPACITY = 3;\n\n//List of formatting elements\nclass FormattingElementList {\n    constructor(treeAdapter) {\n        this.length = 0;\n        this.entries = [];\n        this.treeAdapter = treeAdapter;\n        this.bookmark = null;\n    }\n\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement) {\n        const candidates = [];\n\n        if (this.length >= NOAH_ARK_CAPACITY) {\n            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;\n            const neTagName = this.treeAdapter.getTagName(newElement);\n            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n            for (let i = this.length - 1; i >= 0; i--) {\n                const entry = this.entries[i];\n\n                if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                    break;\n                }\n\n                const element = entry.element;\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n\n                const isCandidate =\n                    this.treeAdapter.getTagName(element) === neTagName &&\n                    this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&\n                    elementAttrs.length === neAttrsLength;\n\n                if (isCandidate) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n\n        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;\n    }\n\n    _ensureNoahArkCondition(newElement) {\n        const candidates = this._getNoahArkConditionCandidates(newElement);\n        let cLength = candidates.length;\n\n        if (cLength) {\n            const neAttrs = this.treeAdapter.getAttrList(newElement);\n            const neAttrsLength = neAttrs.length;\n            const neAttrsMap = Object.create(null);\n\n            //NOTE: build attrs map for the new element so we can perform fast lookups\n            for (let i = 0; i < neAttrsLength; i++) {\n                const neAttr = neAttrs[i];\n\n                neAttrsMap[neAttr.name] = neAttr.value;\n            }\n\n            for (let i = 0; i < neAttrsLength; i++) {\n                for (let j = 0; j < cLength; j++) {\n                    const cAttr = candidates[j].attrs[i];\n\n                    if (neAttrsMap[cAttr.name] !== cAttr.value) {\n                        candidates.splice(j, 1);\n                        cLength--;\n                    }\n\n                    if (candidates.length < NOAH_ARK_CAPACITY) {\n                        return;\n                    }\n                }\n            }\n\n            //NOTE: remove bottommost candidates until Noah's Ark condition will not be met\n            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {\n                this.entries.splice(candidates[i].idx, 1);\n                this.length--;\n            }\n        }\n    }\n\n    //Mutations\n    insertMarker() {\n        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });\n        this.length++;\n    }\n\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n\n        this.entries.push({\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    insertElementAfterBookmark(element, token) {\n        let bookmarkIdx = this.length - 1;\n\n        for (; bookmarkIdx >= 0; bookmarkIdx--) {\n            if (this.entries[bookmarkIdx] === this.bookmark) {\n                break;\n            }\n        }\n\n        this.entries.splice(bookmarkIdx + 1, 0, {\n            type: FormattingElementList.ELEMENT_ENTRY,\n            element: element,\n            token: token\n        });\n\n        this.length++;\n    }\n\n    removeEntry(entry) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            if (this.entries[i] === entry) {\n                this.entries.splice(i, 1);\n                this.length--;\n                break;\n            }\n        }\n    }\n\n    clearToLastMarker() {\n        while (this.length) {\n            const entry = this.entries.pop();\n\n            this.length--;\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                break;\n            }\n        }\n    }\n\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.MARKER_ENTRY) {\n                return null;\n            }\n\n            if (this.treeAdapter.getTagName(entry.element) === tagName) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n\n    getElementEntry(element) {\n        for (let i = this.length - 1; i >= 0; i--) {\n            const entry = this.entries[i];\n\n            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {\n                return entry;\n            }\n        }\n\n        return null;\n    }\n}\n\n//Entry types\nFormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';\nFormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';\n\nmodule.exports = FormattingElementList;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/parser/formatting-element-list.js"
  },
  "{34D8CEBC-38CA-4E72-B40E-BF7449535637}": {
    "source": "'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst LocationInfoTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\nconst HTML = require('../../common/html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\n\nclass LocationInfoParserMixin extends Mixin {\n    constructor(parser) {\n        super(parser);\n\n        this.parser = parser;\n        this.treeAdapter = this.parser.treeAdapter;\n        this.posTracker = null;\n        this.lastStartTagToken = null;\n        this.lastFosterParentingLocation = null;\n        this.currentToken = null;\n    }\n\n    _setStartLocation(element) {\n        let loc = null;\n\n        if (this.lastStartTagToken) {\n            loc = Object.assign({}, this.lastStartTagToken.location);\n            loc.startTag = this.lastStartTagToken.location;\n        }\n\n        this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n\n    _setEndLocation(element, closingToken) {\n        const loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n        if (loc) {\n            if (closingToken.location) {\n                const ctLoc = closingToken.location;\n                const tn = this.treeAdapter.getTagName(element);\n\n                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n                const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n                const endLoc = {};\n                if (isClosingEndTag) {\n                    endLoc.endTag = Object.assign({}, ctLoc);\n                    endLoc.endLine = ctLoc.endLine;\n                    endLoc.endCol = ctLoc.endCol;\n                    endLoc.endOffset = ctLoc.endOffset;\n                } else {\n                    endLoc.endLine = ctLoc.startLine;\n                    endLoc.endCol = ctLoc.startCol;\n                    endLoc.endOffset = ctLoc.startOffset;\n                }\n\n                this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n            }\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                mxn.lastStartTagToken = null;\n                mxn.lastFosterParentingLocation = null;\n                mxn.currentToken = null;\n\n                const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n\n                mxn.posTracker = tokenizerMixin.posTracker;\n\n                Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n                    onItemPop: function(element) {\n                        mxn._setEndLocation(element, mxn.currentToken);\n                    }\n                });\n            },\n\n            _runParsingLoop(scriptHandler) {\n                orig._runParsingLoop.call(this, scriptHandler);\n\n                // NOTE: generate location info for elements\n                // that remains on open element stack\n                for (let i = this.openElements.stackTop; i >= 0; i--) {\n                    mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n                }\n            },\n\n            //Token processing\n            _processTokenInForeignContent(token) {\n                mxn.currentToken = token;\n                orig._processTokenInForeignContent.call(this, token);\n            },\n\n            _processToken(token) {\n                mxn.currentToken = token;\n                orig._processToken.call(this, token);\n\n                //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n                //their end location explicitly.\n                const requireExplicitUpdate =\n                    token.type === Tokenizer.END_TAG_TOKEN &&\n                    (token.tagName === $.HTML || (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)));\n\n                if (requireExplicitUpdate) {\n                    for (let i = this.openElements.stackTop; i >= 0; i--) {\n                        const element = this.openElements.items[i];\n\n                        if (this.treeAdapter.getTagName(element) === token.tagName) {\n                            mxn._setEndLocation(element, token);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            //Doctype\n            _setDocumentType(token) {\n                orig._setDocumentType.call(this, token);\n\n                const documentChildren = this.treeAdapter.getChildNodes(this.document);\n                const cnLength = documentChildren.length;\n\n                for (let i = 0; i < cnLength; i++) {\n                    const node = documentChildren[i];\n\n                    if (this.treeAdapter.isDocumentTypeNode(node)) {\n                        this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n                        break;\n                    }\n                }\n            },\n\n            //Elements\n            _attachElementToTree(element) {\n                //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n                //So we will use token location stored in this methods for the element.\n                mxn._setStartLocation(element);\n                mxn.lastStartTagToken = null;\n                orig._attachElementToTree.call(this, element);\n            },\n\n            _appendElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._appendElement.call(this, token, namespaceURI);\n            },\n\n            _insertElement(token, namespaceURI) {\n                mxn.lastStartTagToken = token;\n                orig._insertElement.call(this, token, namespaceURI);\n            },\n\n            _insertTemplate(token) {\n                mxn.lastStartTagToken = token;\n                orig._insertTemplate.call(this, token);\n\n                const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n\n                this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n            },\n\n            _insertFakeRootElement() {\n                orig._insertFakeRootElement.call(this);\n                this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n            },\n\n            //Comments\n            _appendCommentNode(token, parent) {\n                orig._appendCommentNode.call(this, token, parent);\n\n                const children = this.treeAdapter.getChildNodes(parent);\n                const commentNode = children[children.length - 1];\n\n                this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n            },\n\n            //Text\n            _findFosterParentingLocation() {\n                //NOTE: store last foster parenting location, so we will be able to find inserted text\n                //in case of foster parenting\n                mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n\n                return mxn.lastFosterParentingLocation;\n            },\n\n            _insertCharacters(token) {\n                orig._insertCharacters.call(this, token);\n\n                const hasFosterParent = this._shouldFosterParentOnInsertion();\n\n                const parent =\n                    (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||\n                    this.openElements.currentTmplContent ||\n                    this.openElements.current;\n\n                const siblings = this.treeAdapter.getChildNodes(parent);\n\n                const textNodeIdx =\n                    hasFosterParent && mxn.lastFosterParentingLocation.beforeElement\n                        ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1\n                        : siblings.length - 1;\n\n                const textNode = siblings[textNodeIdx];\n\n                //NOTE: if we have location assigned by another token, then just update end position\n                const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n                if (tnLoc) {\n                    const { endLine, endCol, endOffset } = token.location;\n                    this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n                } else {\n                    this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n                }\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoParserMixin;\n",
    "mapping": {
      "../../utils/mixin": "{EB21E6EA-3168-4E92-85B8-EB8E62169B2F}",
      "./tokenizer-mixin": "{59310481-794F-412B-8818-E2096B1BBC60}",
      "./open-element-stack-mixin": "{23E8662A-4877-4819-95BC-162DDE6DC281}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/location-info/parser-mixin.js"
  },
  "{EB21E6EA-3168-4E92-85B8-EB8E62169B2F}": {
    "source": "'use strict';\n\nclass Mixin {\n    constructor(host) {\n        const originalMethods = {};\n        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);\n\n        for (const key of Object.keys(overriddenMethods)) {\n            if (typeof overriddenMethods[key] === 'function') {\n                originalMethods[key] = host[key];\n                host[key] = overriddenMethods[key];\n            }\n        }\n    }\n\n    _getOverriddenMethods() {\n        throw new Error('Not implemented');\n    }\n}\n\nMixin.install = function(host, Ctor, opts) {\n    if (!host.__mixins) {\n        host.__mixins = [];\n    }\n\n    for (let i = 0; i < host.__mixins.length; i++) {\n        if (host.__mixins[i].constructor === Ctor) {\n            return host.__mixins[i];\n        }\n    }\n\n    const mixin = new Ctor(host, opts);\n\n    host.__mixins.push(mixin);\n\n    return mixin;\n};\n\nmodule.exports = Mixin;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/utils/mixin.js"
  },
  "{59310481-794F-412B-8818-E2096B1BBC60}": {
    "source": "'use strict';\n\nconst Mixin = require('../../utils/mixin');\nconst Tokenizer = require('../../tokenizer');\nconst PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');\n\nclass LocationInfoTokenizerMixin extends Mixin {\n    constructor(tokenizer) {\n        super(tokenizer);\n\n        this.tokenizer = tokenizer;\n        this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);\n        this.currentAttrLocation = null;\n        this.ctLoc = null;\n    }\n\n    _getCurrentLocation() {\n        return {\n            startLine: this.posTracker.line,\n            startCol: this.posTracker.col,\n            startOffset: this.posTracker.offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n    }\n\n    _attachCurrentAttrLocationInfo() {\n        this.currentAttrLocation.endLine = this.posTracker.line;\n        this.currentAttrLocation.endCol = this.posTracker.col;\n        this.currentAttrLocation.endOffset = this.posTracker.offset;\n\n        const currentToken = this.tokenizer.currentToken;\n        const currentAttr = this.tokenizer.currentAttr;\n\n        if (!currentToken.location.attrs) {\n            currentToken.location.attrs = Object.create(null);\n        }\n\n        currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        const methods = {\n            _createStartTagToken() {\n                orig._createStartTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createEndTagToken() {\n                orig._createEndTagToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCommentToken() {\n                orig._createCommentToken.call(this);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createDoctypeToken(initialName) {\n                orig._createDoctypeToken.call(this, initialName);\n                this.currentToken.location = mxn.ctLoc;\n            },\n\n            _createCharacterToken(type, ch) {\n                orig._createCharacterToken.call(this, type, ch);\n                this.currentCharacterToken.location = mxn.ctLoc;\n            },\n\n            _createEOFToken() {\n                orig._createEOFToken.call(this);\n                this.currentToken.location = mxn._getCurrentLocation();\n            },\n\n            _createAttr(attrNameFirstCh) {\n                orig._createAttr.call(this, attrNameFirstCh);\n                mxn.currentAttrLocation = mxn._getCurrentLocation();\n            },\n\n            _leaveAttrName(toState) {\n                orig._leaveAttrName.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _leaveAttrValue(toState) {\n                orig._leaveAttrValue.call(this, toState);\n                mxn._attachCurrentAttrLocationInfo();\n            },\n\n            _emitCurrentToken() {\n                const ctLoc = this.currentToken.location;\n\n                //NOTE: if we have pending character token make it's end location equal to the\n                //current token's start location.\n                if (this.currentCharacterToken) {\n                    this.currentCharacterToken.location.endLine = ctLoc.startLine;\n                    this.currentCharacterToken.location.endCol = ctLoc.startCol;\n                    this.currentCharacterToken.location.endOffset = ctLoc.startOffset;\n                }\n\n                if (this.currentToken.type === Tokenizer.EOF_TOKEN) {\n                    ctLoc.endLine = ctLoc.startLine;\n                    ctLoc.endCol = ctLoc.startCol;\n                    ctLoc.endOffset = ctLoc.startOffset;\n                } else {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col + 1;\n                    ctLoc.endOffset = mxn.posTracker.offset + 1;\n                }\n\n                orig._emitCurrentToken.call(this);\n            },\n\n            _emitCurrentCharacterToken() {\n                const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;\n\n                //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),\n                //then set it's location at the current preprocessor position.\n                //We don't need to increment preprocessor position, since character token\n                //emission is always forced by the start of the next character token here.\n                //So, we already have advanced position.\n                if (ctLoc && ctLoc.endOffset === -1) {\n                    ctLoc.endLine = mxn.posTracker.line;\n                    ctLoc.endCol = mxn.posTracker.col;\n                    ctLoc.endOffset = mxn.posTracker.offset;\n                }\n\n                orig._emitCurrentCharacterToken.call(this);\n            }\n        };\n\n        //NOTE: patch initial states for each mode to obtain token start position\n        Object.keys(Tokenizer.MODE).forEach(modeName => {\n            const state = Tokenizer.MODE[modeName];\n\n            methods[state] = function(cp) {\n                mxn.ctLoc = mxn._getCurrentLocation();\n                orig[state].call(this, cp);\n            };\n        });\n\n        return methods;\n    }\n}\n\nmodule.exports = LocationInfoTokenizerMixin;\n",
    "mapping": {
      "../position-tracking/preprocessor-mixin": "{152EDC1E-BE48-4E60-81E8-68DAF2CAE8D2}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js"
  },
  "{152EDC1E-BE48-4E60-81E8-68DAF2CAE8D2}": {
    "source": "'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass PositionTrackingPreprocessorMixin extends Mixin {\n    constructor(preprocessor) {\n        super(preprocessor);\n\n        this.preprocessor = preprocessor;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n\n        this.offset = 0;\n        this.col = 0;\n        this.line = 1;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            advance() {\n                const pos = this.pos + 1;\n                const ch = this.html[pos];\n\n                //NOTE: LF should be in the last column of the line\n                if (mxn.isEol) {\n                    mxn.isEol = false;\n                    mxn.line++;\n                    mxn.lineStartPos = pos;\n                }\n\n                if (ch === '\\n' || (ch === '\\r' && this.html[pos + 1] !== '\\n')) {\n                    mxn.isEol = true;\n                }\n\n                mxn.col = pos - mxn.lineStartPos + 1;\n                mxn.offset = mxn.droppedBufferSize + pos;\n\n                return orig.advance.call(this);\n            },\n\n            retreat() {\n                orig.retreat.call(this);\n\n                mxn.isEol = false;\n                mxn.col = this.pos - mxn.lineStartPos + 1;\n            },\n\n            dropParsedChunk() {\n                const prevPos = this.pos;\n\n                orig.dropParsedChunk.call(this);\n\n                const reduction = prevPos - this.pos;\n\n                mxn.lineStartPos -= reduction;\n                mxn.droppedBufferSize += reduction;\n                mxn.offset = mxn.droppedBufferSize + this.pos;\n            }\n        };\n    }\n}\n\nmodule.exports = PositionTrackingPreprocessorMixin;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"
  },
  "{23E8662A-4877-4819-95BC-162DDE6DC281}": {
    "source": "'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass LocationInfoOpenElementStackMixin extends Mixin {\n    constructor(stack, opts) {\n        super(stack);\n\n        this.onItemPop = opts.onItemPop;\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            pop() {\n                mxn.onItemPop(this.current);\n                orig.pop.call(this);\n            },\n\n            popAllUpToHtmlElement() {\n                for (let i = this.stackTop; i > 0; i--) {\n                    mxn.onItemPop(this.items[i]);\n                }\n\n                orig.popAllUpToHtmlElement.call(this);\n            },\n\n            remove(element) {\n                mxn.onItemPop(this.current);\n                orig.remove.call(this, element);\n            }\n        };\n    }\n}\n\nmodule.exports = LocationInfoOpenElementStackMixin;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js"
  },
  "{D27082BE-812B-4D8B-9DC4-9C29FFDD2D4C}": {
    "source": "'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingTokenizerMixin = require('./tokenizer-mixin');\nconst LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingParserMixin extends ErrorReportingMixinBase {\n    constructor(parser, opts) {\n        super(parser, opts);\n\n        this.opts = opts;\n        this.ctLoc = null;\n        this.locBeforeToken = false;\n    }\n\n    _setErrorLocation(err) {\n        if (this.ctLoc) {\n            err.startLine = this.ctLoc.startLine;\n            err.startCol = this.ctLoc.startCol;\n            err.startOffset = this.ctLoc.startOffset;\n\n            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;\n            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;\n            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;\n        }\n    }\n\n    _getOverriddenMethods(mxn, orig) {\n        return {\n            _bootstrap(document, fragmentContext) {\n                orig._bootstrap.call(this, document, fragmentContext);\n\n                Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);\n                Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n            },\n\n            _processInputToken(token) {\n                mxn.ctLoc = token.location;\n\n                orig._processInputToken.call(this, token);\n            },\n\n            _err(code, options) {\n                mxn.locBeforeToken = options && options.beforeToken;\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingParserMixin;\n",
    "mapping": {
      "./mixin-base": "{B50E0ECA-7E24-4B17-AC97-75DFB5CC4BFF}",
      "./tokenizer-mixin": "{69191B7A-C3FD-4D8B-857A-77A7F63016D4}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"
  },
  "{B50E0ECA-7E24-4B17-AC97-75DFB5CC4BFF}": {
    "source": "'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingMixinBase extends Mixin {\n    constructor(host, opts) {\n        super(host);\n\n        this.posTracker = null;\n        this.onParseError = opts.onParseError;\n    }\n\n    _setErrorLocation(err) {\n        err.startLine = err.endLine = this.posTracker.line;\n        err.startCol = err.endCol = this.posTracker.col;\n        err.startOffset = err.endOffset = this.posTracker.offset;\n    }\n\n    _reportError(code) {\n        const err = {\n            code: code,\n            startLine: -1,\n            startCol: -1,\n            startOffset: -1,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n\n        this._setErrorLocation(err);\n        this.onParseError(err);\n    }\n\n    _getOverriddenMethods(mxn) {\n        return {\n            _err(code) {\n                mxn._reportError(code);\n            }\n        };\n    }\n}\n\nmodule.exports = ErrorReportingMixinBase;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"
  },
  "{69191B7A-C3FD-4D8B-857A-77A7F63016D4}": {
    "source": "'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst ErrorReportingPreprocessorMixin = require('./preprocessor-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingTokenizerMixin extends ErrorReportingMixinBase {\n    constructor(tokenizer, opts) {\n        super(tokenizer, opts);\n\n        const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);\n\n        this.posTracker = preprocessorMixin.posTracker;\n    }\n}\n\nmodule.exports = ErrorReportingTokenizerMixin;\n",
    "mapping": {
      "./preprocessor-mixin": "{CA4706EC-373F-428A-8043-BCED347CF454}"
    },
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js"
  },
  "{CA4706EC-373F-428A-8043-BCED347CF454}": {
    "source": "'use strict';\n\nconst ErrorReportingMixinBase = require('./mixin-base');\nconst PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');\nconst Mixin = require('../../utils/mixin');\n\nclass ErrorReportingPreprocessorMixin extends ErrorReportingMixinBase {\n    constructor(preprocessor, opts) {\n        super(preprocessor, opts);\n\n        this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);\n        this.lastErrOffset = -1;\n    }\n\n    _reportError(code) {\n        //NOTE: avoid reporting error twice on advance/retreat\n        if (this.lastErrOffset !== this.posTracker.offset) {\n            this.lastErrOffset = this.posTracker.offset;\n            super._reportError(code);\n        }\n    }\n}\n\nmodule.exports = ErrorReportingPreprocessorMixin;\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js"
  },
  "{DFAA114F-94E2-459A-912E-AC7044067C5B}": {
    "source": "'use strict';\n\nconst { DOCUMENT_MODE } = require('../common/html');\n\n//Node construction\nexports.createDocument = function() {\n    return {\n        nodeName: '#document',\n        mode: DOCUMENT_MODE.NO_QUIRKS,\n        childNodes: []\n    };\n};\n\nexports.createDocumentFragment = function() {\n    return {\n        nodeName: '#document-fragment',\n        childNodes: []\n    };\n};\n\nexports.createElement = function(tagName, namespaceURI, attrs) {\n    return {\n        nodeName: tagName,\n        tagName: tagName,\n        attrs: attrs,\n        namespaceURI: namespaceURI,\n        childNodes: [],\n        parentNode: null\n    };\n};\n\nexports.createCommentNode = function(data) {\n    return {\n        nodeName: '#comment',\n        data: data,\n        parentNode: null\n    };\n};\n\nconst createTextNode = function(value) {\n    return {\n        nodeName: '#text',\n        value: value,\n        parentNode: null\n    };\n};\n\n//Tree mutation\nconst appendChild = (exports.appendChild = function(parentNode, newNode) {\n    parentNode.childNodes.push(newNode);\n    newNode.parentNode = parentNode;\n});\n\nconst insertBefore = (exports.insertBefore = function(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n\n    parentNode.childNodes.splice(insertionIdx, 0, newNode);\n    newNode.parentNode = parentNode;\n});\n\nexports.setTemplateContent = function(templateElement, contentElement) {\n    templateElement.content = contentElement;\n};\n\nexports.getTemplateContent = function(templateElement) {\n    return templateElement.content;\n};\n\nexports.setDocumentType = function(document, name, publicId, systemId) {\n    let doctypeNode = null;\n\n    for (let i = 0; i < document.childNodes.length; i++) {\n        if (document.childNodes[i].nodeName === '#documentType') {\n            doctypeNode = document.childNodes[i];\n            break;\n        }\n    }\n\n    if (doctypeNode) {\n        doctypeNode.name = name;\n        doctypeNode.publicId = publicId;\n        doctypeNode.systemId = systemId;\n    } else {\n        appendChild(document, {\n            nodeName: '#documentType',\n            name: name,\n            publicId: publicId,\n            systemId: systemId\n        });\n    }\n};\n\nexports.setDocumentMode = function(document, mode) {\n    document.mode = mode;\n};\n\nexports.getDocumentMode = function(document) {\n    return document.mode;\n};\n\nexports.detachNode = function(node) {\n    if (node.parentNode) {\n        const idx = node.parentNode.childNodes.indexOf(node);\n\n        node.parentNode.childNodes.splice(idx, 1);\n        node.parentNode = null;\n    }\n};\n\nexports.insertText = function(parentNode, text) {\n    if (parentNode.childNodes.length) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n        if (prevNode.nodeName === '#text') {\n            prevNode.value += text;\n            return;\n        }\n    }\n\n    appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function(parentNode, text, referenceNode) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n    if (prevNode && prevNode.nodeName === '#text') {\n        prevNode.value += text;\n    } else {\n        insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n};\n\nexports.adoptAttributes = function(recipient, attrs) {\n    const recipientAttrsMap = [];\n\n    for (let i = 0; i < recipient.attrs.length; i++) {\n        recipientAttrsMap.push(recipient.attrs[i].name);\n    }\n\n    for (let j = 0; j < attrs.length; j++) {\n        if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {\n            recipient.attrs.push(attrs[j]);\n        }\n    }\n};\n\n//Tree traversing\nexports.getFirstChild = function(node) {\n    return node.childNodes[0];\n};\n\nexports.getChildNodes = function(node) {\n    return node.childNodes;\n};\n\nexports.getParentNode = function(node) {\n    return node.parentNode;\n};\n\nexports.getAttrList = function(element) {\n    return element.attrs;\n};\n\n//Node data\nexports.getTagName = function(element) {\n    return element.tagName;\n};\n\nexports.getNamespaceURI = function(element) {\n    return element.namespaceURI;\n};\n\nexports.getTextNodeContent = function(textNode) {\n    return textNode.value;\n};\n\nexports.getCommentNodeContent = function(commentNode) {\n    return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function(doctypeNode) {\n    return doctypeNode.name;\n};\n\nexports.getDocumentTypeNodePublicId = function(doctypeNode) {\n    return doctypeNode.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function(doctypeNode) {\n    return doctypeNode.systemId;\n};\n\n//Node types\nexports.isTextNode = function(node) {\n    return node.nodeName === '#text';\n};\n\nexports.isCommentNode = function(node) {\n    return node.nodeName === '#comment';\n};\n\nexports.isDocumentTypeNode = function(node) {\n    return node.nodeName === '#documentType';\n};\n\nexports.isElementNode = function(node) {\n    return !!node.tagName;\n};\n\n// Source code location\nexports.setNodeSourceCodeLocation = function(node, location) {\n    node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function(node) {\n    return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function(node, endLocation) {\n    node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/tree-adapters/default.js"
  },
  "{CE574C8F-3CE0-4460-9A45-D891F2126526}": {
    "source": "'use strict';\n\nmodule.exports = function mergeOptions(defaults, options) {\n    options = options || Object.create(null);\n\n    return [defaults, options].reduce((merged, optObj) => {\n        Object.keys(optObj).forEach(key => {\n            merged[key] = optObj[key];\n        });\n\n        return merged;\n    }, Object.create(null));\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/utils/merge-options.js"
  },
  "{D8D1DD52-E6A1-462E-BBF7-67620D2B96C4}": {
    "source": "'use strict';\n\nconst { DOCUMENT_MODE } = require('./html');\n\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\n\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//'\n];\n\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\nconst QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\n\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//'\n]);\n\n//Utils\nfunction enquoteDoctypeId(id) {\n    const quote = id.indexOf('\"') !== -1 ? \"'\" : '\"';\n\n    return quote + id + quote;\n}\n\nfunction hasPrefix(publicId, prefixes) {\n    for (let i = 0; i < prefixes.length; i++) {\n        if (publicId.indexOf(prefixes[i]) === 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n//API\nexports.isConforming = function(token) {\n    return (\n        token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID)\n    );\n};\n\nexports.getDocumentMode = function(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    const systemId = token.systemId;\n\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n\n    let publicId = token.publicId;\n\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n\n        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n\n    return DOCUMENT_MODE.NO_QUIRKS;\n};\n\nexports.serializeContent = function(name, publicId, systemId) {\n    let str = '!DOCTYPE ';\n\n    if (name) {\n        str += name;\n    }\n\n    if (publicId) {\n        str += ' PUBLIC ' + enquoteDoctypeId(publicId);\n    } else if (systemId) {\n        str += ' SYSTEM';\n    }\n\n    if (systemId !== null) {\n        str += ' ' + enquoteDoctypeId(systemId);\n    }\n\n    return str;\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/common/doctype.js"
  },
  "{D265EA2E-95FF-400F-BA46-E282B94ABD94}": {
    "source": "'use strict';\n\nconst Tokenizer = require('../tokenizer');\nconst HTML = require('./html');\n\n//Aliases\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES;\nconst ATTRS = HTML.ATTRS;\n\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml'\n};\n\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = {\n    attributename: 'attributeName',\n    attributetype: 'attributeType',\n    basefrequency: 'baseFrequency',\n    baseprofile: 'baseProfile',\n    calcmode: 'calcMode',\n    clippathunits: 'clipPathUnits',\n    diffuseconstant: 'diffuseConstant',\n    edgemode: 'edgeMode',\n    filterunits: 'filterUnits',\n    glyphref: 'glyphRef',\n    gradienttransform: 'gradientTransform',\n    gradientunits: 'gradientUnits',\n    kernelmatrix: 'kernelMatrix',\n    kernelunitlength: 'kernelUnitLength',\n    keypoints: 'keyPoints',\n    keysplines: 'keySplines',\n    keytimes: 'keyTimes',\n    lengthadjust: 'lengthAdjust',\n    limitingconeangle: 'limitingConeAngle',\n    markerheight: 'markerHeight',\n    markerunits: 'markerUnits',\n    markerwidth: 'markerWidth',\n    maskcontentunits: 'maskContentUnits',\n    maskunits: 'maskUnits',\n    numoctaves: 'numOctaves',\n    pathlength: 'pathLength',\n    patterncontentunits: 'patternContentUnits',\n    patterntransform: 'patternTransform',\n    patternunits: 'patternUnits',\n    pointsatx: 'pointsAtX',\n    pointsaty: 'pointsAtY',\n    pointsatz: 'pointsAtZ',\n    preservealpha: 'preserveAlpha',\n    preserveaspectratio: 'preserveAspectRatio',\n    primitiveunits: 'primitiveUnits',\n    refx: 'refX',\n    refy: 'refY',\n    repeatcount: 'repeatCount',\n    repeatdur: 'repeatDur',\n    requiredextensions: 'requiredExtensions',\n    requiredfeatures: 'requiredFeatures',\n    specularconstant: 'specularConstant',\n    specularexponent: 'specularExponent',\n    spreadmethod: 'spreadMethod',\n    startoffset: 'startOffset',\n    stddeviation: 'stdDeviation',\n    stitchtiles: 'stitchTiles',\n    surfacescale: 'surfaceScale',\n    systemlanguage: 'systemLanguage',\n    tablevalues: 'tableValues',\n    targetx: 'targetX',\n    targety: 'targetY',\n    textlength: 'textLength',\n    viewbox: 'viewBox',\n    viewtarget: 'viewTarget',\n    xchannelselector: 'xChannelSelector',\n    ychannelselector: 'yChannelSelector',\n    zoomandpan: 'zoomAndPan'\n};\n\nconst XML_ATTRS_ADJUSTMENT_MAP = {\n    'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK },\n    'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK },\n    'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS.XLINK },\n    'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS.XLINK },\n    'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS.XLINK },\n    'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS.XLINK },\n    'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS.XLINK },\n    'xml:base': { prefix: 'xml', name: 'base', namespace: NS.XML },\n    'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS.XML },\n    'xml:space': { prefix: 'xml', name: 'space', namespace: NS.XML },\n    xmlns: { prefix: '', name: 'xmlns', namespace: NS.XMLNS },\n    'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }\n};\n\n//SVG tag names adjustment map\nconst SVG_TAG_NAMES_ADJUSTMENT_MAP = (exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n    textpath: 'textPath'\n});\n\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = {\n    [$.B]: true,\n    [$.BIG]: true,\n    [$.BLOCKQUOTE]: true,\n    [$.BODY]: true,\n    [$.BR]: true,\n    [$.CENTER]: true,\n    [$.CODE]: true,\n    [$.DD]: true,\n    [$.DIV]: true,\n    [$.DL]: true,\n    [$.DT]: true,\n    [$.EM]: true,\n    [$.EMBED]: true,\n    [$.H1]: true,\n    [$.H2]: true,\n    [$.H3]: true,\n    [$.H4]: true,\n    [$.H5]: true,\n    [$.H6]: true,\n    [$.HEAD]: true,\n    [$.HR]: true,\n    [$.I]: true,\n    [$.IMG]: true,\n    [$.LI]: true,\n    [$.LISTING]: true,\n    [$.MENU]: true,\n    [$.META]: true,\n    [$.NOBR]: true,\n    [$.OL]: true,\n    [$.P]: true,\n    [$.PRE]: true,\n    [$.RUBY]: true,\n    [$.S]: true,\n    [$.SMALL]: true,\n    [$.SPAN]: true,\n    [$.STRONG]: true,\n    [$.STRIKE]: true,\n    [$.SUB]: true,\n    [$.SUP]: true,\n    [$.TABLE]: true,\n    [$.TT]: true,\n    [$.U]: true,\n    [$.UL]: true,\n    [$.VAR]: true\n};\n\n//Check exit from foreign content\nexports.causesExit = function(startTagToken) {\n    const tn = startTagToken.tagName;\n    const isFontWithAttrs =\n        tn === $.FONT &&\n        (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||\n            Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);\n\n    return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];\n};\n\n//Token adjustments\nexports.adjustTokenMathMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n};\n\nexports.adjustTokenSVGAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrName) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n};\n\nexports.adjustTokenXMLAttrs = function(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];\n\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n};\n\nexports.adjustTokenSVGTagName = function(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];\n\n    if (adjustedTagName) {\n        token.tagName = adjustedTagName;\n    }\n};\n\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\n\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\n\nexports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {\n    if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {\n        return true;\n    }\n\n    if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {\n        return true;\n    }\n\n    return false;\n};\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/parse5/lib/common/foreign-content.js"
  },
  "{13956460-69EE-4722-A66F-F76A327CC7BD}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Options} Options\n * @typedef {import('./lib/index.js').Space} Space\n */\n\nexport {fromParse5} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{310E8B99-4363-42E0-BA62-030B925CAB9E}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-from-parse5/index.js"
  },
  "{6FA4F0D2-88F0-471A-91AA-DB0C57527EA7}": {
    "source": "{\n  \"name\": \"hast-util-from-parse5\",\n  \"version\": \"7.1.2\",\n  \"description\": \"hast utility to transform from Parse5’s AST\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"transform\",\n    \"change\",\n    \"ast\"\n  ],\n  \"repository\": \"syntax-tree/hast-util-from-parse5\",\n  \"bugs\": \"https://github.com/syntax-tree/hast-util-from-parse5/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"@types/unist\": \"^2.0.0\",\n    \"hastscript\": \"^7.0.0\",\n    \"property-information\": \"^6.0.0\",\n    \"vfile\": \"^5.0.0\",\n    \"vfile-location\": \"^4.0.0\",\n    \"web-namespaces\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"is-hidden\": \"^2.0.0\",\n    \"parse5\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"to-vfile\": \"^7.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-util-visit\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"rules\": {\n      \"max-depth\": \"off\"\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"rules\": {\n          \"no-await-in-loop\": 0\n        }\n      }\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-from-parse5/package.json"
  },
  "{310E8B99-4363-42E0-BA62-030B925CAB9E}": {
    "source": "/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation\n * @typedef {import('parse5').Token.Location} P5Location\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {DefaultTreeAdapterMap['document']} P5Document\n * @typedef {DefaultTreeAdapterMap['documentFragment']} P5DocumentFragment\n * @typedef {DefaultTreeAdapterMap['documentType']} P5DocumentType\n * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment\n * @typedef {DefaultTreeAdapterMap['textNode']} P5Text\n * @typedef {DefaultTreeAdapterMap['element']} P5Element\n * @typedef {DefaultTreeAdapterMap['node']} P5Node\n * @typedef {DefaultTreeAdapterMap['template']} P5Template\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in.\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {VFile | null | undefined} [file]\n *   File used to add positional info to nodes.\n *\n *   If given, the file should represent the original HTML source.\n * @property {boolean} [verbose=false]\n *   Whether to add extra positional info about starting tags, closing tags,\n *   and attributes to elements.\n *\n *   > 👉 **Note**: only used when `file` is given.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {Schema} schema\n *   Current schema.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n * @property {boolean} location\n *   Whether location info was found.\n */\n\nimport {h, s} from 'hastscript'\nimport {html, svg, find} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {P5Node} tree\n *   `parse5` tree to transform.\n * @param {Options | VFile | null | undefined} [options]\n *   Configuration.\n * @returns {Node}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const options_ = options || {}\n  /** @type {Options} */\n  let settings\n  /** @type {VFile | undefined} */\n  let file\n\n  if (isFile(options_)) {\n    file = options_\n    settings = {}\n  } else {\n    file = options_.file || undefined\n    settings = options_\n  }\n\n  return one(\n    {\n      schema: settings.space === 'svg' ? svg : html,\n      file,\n      verbose: settings.verbose,\n      location: false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} node\n *   p5 node.\n * @returns {Node}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Node} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {P5Comment} */ (node)\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference = /** @type {P5Document | P5DocumentFragment} */ (node)\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const doc = String(state.file)\n        const loc = location(doc)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(doc.length)\n        // @ts-expect-error: always defined as we give valid input.\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {P5DocumentType} */ (node)\n      // @ts-expect-error Types are out of date.\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {P5Text} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {P5Element} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<P5Node>} nodes\n *   Nodes.\n * @returns {Array<Content>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<Content>} */\n  const result = []\n\n  while (++index < nodes.length) {\n    // @ts-expect-error Assume no roots in `nodes`.\n    result[index] = one(state, nodes[index])\n  }\n\n  return result\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Element} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const props = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      props[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const fn = state.schema.space === 'svg' ? s : h\n  const result = fn(node.tagName, props, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {P5Template} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    /** @type {Root} */\n    // @ts-expect-error Types are wrong.\n    const content = one(state, reference.content)\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} from\n *   p5 node.\n * @param {Node} to\n *   hast node.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Node} node\n *   hast node.\n * @param {P5ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const props = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            props[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      node.data = {\n        position: {\n          // @ts-expect-error: assume not `undefined`.\n          opening: position(location.startTag),\n          closing: location.endTag ? position(location.endTag) : null,\n          properties: props\n        }\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {P5Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n  // @ts-expect-error `undefined` is fine.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n\n/**\n * Check if something is a file.\n *\n * @param {VFile | Options} value\n *   File or options.\n * @returns {value is VFile}\n *   Whether `value` is a file.\n */\nfunction isFile(value) {\n  return 'messages' in value\n}\n",
    "mapping": {
      "hastscript": "{F483C8A1-C69E-464C-A36F-30F517E555CF}",
      "vfile-location": "{469D7F17-E88B-439E-A862-32335ABFC2D7}",
      "web-namespaces": "{E5FBE31F-464B-4DFD-9B56-CFDEB4DB7826}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-from-parse5/lib/index.js"
  },
  "{F483C8A1-C69E-464C-A36F-30F517E555CF}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Child} Child\n * @typedef {import('./lib/index.js').Properties} Properties\n * @typedef {import('./lib/index.js').Result} Result\n */\n\nexport {h, s} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{555D488E-5DF3-43CC-820B-0EC9A973F056}"
    },
    "path": "{markdown-translate}/node_modules/hastscript/index.js"
  },
  "{3F984C30-96B6-4D3C-8C03-49ED3CFF29AA}": {
    "source": "{\n  \"name\": \"hastscript\",\n  \"version\": \"7.2.0\",\n  \"description\": \"hast utility to create trees\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"rehype\",\n    \"vdom\",\n    \"virtual\",\n    \"dom\",\n    \"hyperscript\",\n    \"dsl\"\n  ],\n  \"repository\": \"syntax-tree/hastscript\",\n  \"bugs\": \"https://github.com/syntax-tree/hastscript/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./index.js\": \"./index.js\",\n    \"./html.js\": \"./html.js\",\n    \"./svg.js\": \"./svg.js\",\n    \"./jsx-runtime\": \"./jsx-runtime.js\",\n    \"./jsx-dev-runtime\": \"./jsx-runtime.js\",\n    \"./html/jsx-runtime\": \"./html/jsx-runtime.js\",\n    \"./html/jsx-dev-runtime\": \"./html/jsx-runtime.js\",\n    \"./svg/jsx-runtime\": \"./svg/jsx-runtime.js\",\n    \"./svg/jsx-dev-runtime\": \"./svg/jsx-runtime.js\"\n  },\n  \"files\": [\n    \"lib/\",\n    \"html/\",\n    \"svg/\",\n    \"html.d.ts\",\n    \"html.js\",\n    \"svg.d.ts\",\n    \"svg.js\",\n    \"jsx-runtime.d.ts\",\n    \"jsx-runtime.js\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"comma-separated-tokens\": \"^2.0.0\",\n    \"hast-util-parse-selector\": \"^3.0.0\",\n    \"property-information\": \"^6.0.0\",\n    \"space-separated-tokens\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"acorn-jsx\": \"^5.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"esast-util-from-js\": \"^1.0.0\",\n    \"estree-util-build-jsx\": \"^2.0.0\",\n    \"estree-util-to-js\": \"^1.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"svg-tag-names\": \"^3.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unist-builder\": \"^3.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && tsd && type-coverage\",\n    \"generate\": \"node script/generate-jsx.js && node script/build.js\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test/index.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run generate && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hastscript/package.json"
  },
  "{555D488E-5DF3-43CC-820B-0EC9A973F056}": {
    "source": "/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n */\n\nexport {h} from './html.js'\nexport {s} from './svg.js'\n",
    "mapping": {
      "./html.js": "{A021E9F2-95B6-40AC-9A58-F24ECADCA7DE}",
      "./svg.js": "{C3331CC0-8BD6-4557-B630-1EB74DB238FB}"
    },
    "path": "{markdown-translate}/node_modules/hastscript/lib/index.js"
  },
  "{A021E9F2-95B6-40AC-9A58-F24ECADCA7DE}": {
    "source": "/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n */\n\nimport {html} from 'property-information'\nimport {core} from './core.js'\n\nexport const h = core(html, 'div')\n",
    "mapping": {
      "./core.js": "{4509A765-8FF0-4757-A76B-0AE367A903B1}"
    },
    "path": "{markdown-translate}/node_modules/hastscript/lib/html.js"
  },
  "{4509A765-8FF0-4757-A76B-0AE367A903B1}": {
    "source": "/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any concrete `hast` node.\n * @typedef {Root | Element} HResult\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {string | number} HStyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, HStyleValue>} HStyle\n *   Supported value of a `style` prop.\n * @typedef {string | number | boolean | null | undefined} HPrimitiveValue\n *   Primitive property value.\n * @typedef {Array<string | number>} HArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {HPrimitiveValue | HArrayValue} HPropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: HPropertyValue | HStyle}} HProperties\n *   Acceptable value for element properties.\n *\n * @typedef {string | number | null | undefined} HPrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<Node | HPrimitiveChild>} HArrayChild\n *   List of children.\n * @typedef {Node | HPrimitiveChild | HArrayChild} HChild\n *   Acceptable child value.\n */\n\nimport {find, normalize} from 'property-information'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {parse as spaces} from 'space-separated-tokens'\nimport {parse as commas} from 'comma-separated-tokens'\n\nconst buttonTypes = new Set(['menu', 'submit', 'reset', 'button'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n * @param {string} defaultTagName\n * @param {Array<string>} [caseSensitive]\n */\nexport function core(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  const h =\n    /**\n     * @type {{\n     *   (): Root\n     *   (selector: null | undefined, ...children: Array<HChild>): Root\n     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element\n     *   (selector: string, ...children: Array<HChild>): Element\n     * }}\n     */\n    (\n      /**\n       * Hyperscript compatible DSL for creating virtual hast trees.\n       *\n       * @param {string | null} [selector]\n       * @param {HProperties | HChild} [properties]\n       * @param {Array<HChild>} children\n       * @returns {HResult}\n       */\n      function (selector, properties, ...children) {\n        let index = -1\n        /** @type {HResult} */\n        let node\n\n        if (selector === undefined || selector === null) {\n          node = {type: 'root', children: []}\n          // @ts-expect-error Properties are not supported for roots.\n          children.unshift(properties)\n        } else {\n          node = parseSelector(selector, defaultTagName)\n          // Normalize the name.\n          node.tagName = node.tagName.toLowerCase()\n          if (adjust && own.call(adjust, node.tagName)) {\n            node.tagName = adjust[node.tagName]\n          }\n\n          // Handle props.\n          if (isProperties(properties, node.tagName)) {\n            /** @type {string} */\n            let key\n\n            for (key in properties) {\n              if (own.call(properties, key)) {\n                // @ts-expect-error `node.properties` is set.\n                addProperty(schema, node.properties, key, properties[key])\n              }\n            }\n          } else {\n            children.unshift(properties)\n          }\n        }\n\n        // Handle children.\n        while (++index < children.length) {\n          addChild(node.children, children[index])\n        }\n\n        if (node.type === 'element' && node.tagName === 'template') {\n          node.content = {type: 'root', children: node.children}\n          node.children = []\n        }\n\n        return node\n      }\n    )\n\n  return h\n}\n\n/**\n * @param {HProperties | HChild} value\n * @param {string} name\n * @returns {value is HProperties}\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n * @param {Properties} properties\n * @param {string} key\n * @param {HStyle | HPropertyValue} value\n * @returns {void}\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {HPropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<string | number>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // @ts-expect-error Assume no booleans in array.\n      finalResult[index] = parsePrimitive(info, info.property, result[index])\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // @ts-expect-error Assume no booleans in `className`.\n    result = properties.className.concat(result)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<Content>} nodes\n * @param {HChild} value\n * @returns {void}\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n * @param {string} name\n * @param {HPrimitiveValue} value\n * @returns {HPrimitiveValue}\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {HStyle} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n",
    "mapping": {
      "hast-util-parse-selector": "{0D360C26-5BE4-4717-937D-18F012E32E46}"
    },
    "path": "{markdown-translate}/node_modules/hastscript/lib/core.js"
  },
  "{0D360C26-5BE4-4717-937D-18F012E32E46}": {
    "source": "export {parseSelector} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{B3D0FDD2-962C-4986-B180-43E4775B3922}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-parse-selector/index.js"
  },
  "{2EE8BEB8-FCB9-4B1A-84FD-4A90B37D5771}": {
    "source": "{\n  \"name\": \"hast-util-parse-selector\",\n  \"version\": \"3.1.1\",\n  \"description\": \"hast utility to create an element from a simple CSS selector\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"css\",\n    \"selector\",\n    \"parse\"\n  ],\n  \"repository\": \"syntax-tree/hast-util-parse-selector\",\n  \"bugs\": \"https://github.com/syntax-tree/hast-util-parse-selector/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"typesVersions\": {\n    \"<=4.1\": {\n      \"lib/extract.d.ts\": [\n        \"lib/extract-legacy.d.ts\"\n      ]\n    }\n  },\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"tsd\": \"^0.25.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-parse-selector/package.json"
  },
  "{B3D0FDD2-962C-4986-B180-43E4775B3922}": {
    "source": "/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name.\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector.\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: fine.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-parse-selector/lib/index.js"
  },
  "{C3331CC0-8BD6-4557-B630-1EB74DB238FB}": {
    "source": "/**\n * @typedef {import('./core.js').HChild} Child\n *   Acceptable child value.\n * @typedef {import('./core.js').HProperties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./core.js').HResult} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n */\n\nimport {svg} from 'property-information'\nimport {core} from './core.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\nexport const s = core(svg, 'g', svgCaseSensitiveTagNames)\n",
    "mapping": {
      "./svg-case-sensitive-tag-names.js": "{C1D83349-B178-4D90-B329-9B118D6CC21E}"
    },
    "path": "{markdown-translate}/node_modules/hastscript/lib/svg.js"
  },
  "{C1D83349-B178-4D90-B329-9B118D6CC21E}": {
    "source": "export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js"
  },
  "{469D7F17-E88B-439E-A862-32335ABFC2D7}": {
    "source": "/**\n * @typedef {import('./lib/index.js').Location} Location\n */\n\nexport {location} from './lib/index.js'\n",
    "mapping": {
      "./lib/index.js": "{0529DB2B-E493-4345-B271-E29D5F0121B8}"
    },
    "path": "{markdown-translate}/node_modules/vfile-location/index.js"
  },
  "{CE319A03-147D-4DDA-BCDE-5E7D2DE1B2CB}": {
    "source": "{\n  \"name\": \"vfile-location\",\n  \"version\": \"4.1.0\",\n  \"description\": \"vfile utility to convert between positional (line and column-based) and offset (range-based) locations\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"vfile\",\n    \"vfile-util\",\n    \"util\",\n    \"utility\",\n    \"virtual\",\n    \"file\",\n    \"location\",\n    \"point\",\n    \"position\",\n    \"offset\"\n  ],\n  \"repository\": \"vfile/vfile-location\",\n  \"bugs\": \"https://github.com/vfile/vfile-location/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n    \"Christian Murphy <christian.murphy.42@gmail.com>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"lib/\",\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"@types/unist\": \"^2.0.0\",\n    \"vfile\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^18.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"remark-cli\": \"^11.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"xo\": \"^0.53.0\"\n  },\n  \"scripts\": {\n    \"prepack\": \"npm run build && npm run format\",\n    \"build\": \"tsc --build --clean && tsc --build && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/vfile-location/package.json"
  },
  "{0529DB2B-E493-4345-B271-E29D5F0121B8}": {
    "source": "/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Value} Value\n */\n\n/**\n * @typedef Point\n *   unist point, where `line` and `column` can be `undefined`.\n * @property {number | undefined} line\n *   Line.\n * @property {number | undefined} column\n *   Column.\n * @property {number | undefined} [offset]\n *   Offset.\n *\n * @typedef PointLike\n *   unist point, allowed as input.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @callback ToPoint\n *   Get a line/column-based `point` from `offset`.\n * @param {number | null | undefined} [offset]\n *   Something that should be an `offset.\n * @returns {Point}\n *   Point, line/column are undefined for invalid or out of bounds input.\n *\n * @callback ToOffset\n *   Get an offset from a line/column-based `point`.\n * @param {Point | null | undefined} [point]\n *   Something that should be a `point.\n * @returns {number}\n *   Offset or `-1` for invalid or out of bounds input.\n *\n * @typedef Location\n *   Accessors for index.\n * @property {ToPoint} toPoint\n *   Get a line/column-based `point` from `offset`.\n * @property {ToOffset} toOffset\n *   Get an offset from a line/column-based `point`.\n */\n\n/**\n * Index the given document so you can translate between line/column and offset\n * based positional info.\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /** @type {Array<number>} */\n  const indices = []\n  const search = /\\r?\\n|\\r/g\n\n  while (search.test(value)) {\n    indices.push(search.lastIndex)\n  }\n\n  indices.push(value.length + 1)\n\n  return {toPoint, toOffset}\n\n  /** @type {ToPoint} */\n  function toPoint(offset) {\n    let index = -1\n\n    if (\n      typeof offset === 'number' &&\n      offset > -1 &&\n      offset < indices[indices.length - 1]\n    ) {\n      while (++index < indices.length) {\n        if (indices[index] > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n      }\n    }\n\n    return {line: undefined, column: undefined, offset: undefined}\n  }\n\n  /** @type {ToOffset} */\n  function toOffset(point) {\n    const line = point && point.line\n    const column = point && point.column\n\n    if (\n      typeof line === 'number' &&\n      typeof column === 'number' &&\n      !Number.isNaN(line) &&\n      !Number.isNaN(column) &&\n      line - 1 in indices\n    ) {\n      const offset = (indices[line - 2] || 0) + column - 1 || 0\n\n      if (offset > -1 && offset < indices[indices.length - 1]) {\n        return offset\n      }\n    }\n\n    return -1\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/vfile-location/lib/index.js"
  },
  "{E5FBE31F-464B-4DFD-9B56-CFDEB4DB7826}": {
    "source": "/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/web-namespaces/index.js"
  },
  "{37E4F89F-9AD3-4C5C-BA2F-96D5A80E426A}": {
    "source": "{\n  \"name\": \"web-namespaces\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Map of web namespaces\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"web\",\n    \"platform\",\n    \"namespace\",\n    \"namespaces\",\n    \"whatwg\",\n    \"w3c\"\n  ],\n  \"repository\": \"wooorm/web-namespaces\",\n  \"bugs\": \"https://github.com/wooorm/web-namespaces/issues\",\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"bail\": \"^2.0.0\",\n    \"c8\": \"^7.0.0\",\n    \"concat-stream\": \"^2.0.0\",\n    \"hast-util-select\": \"^5.0.0\",\n    \"hast-util-to-string\": \"^2.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype-parse\": \"^8.0.0\",\n    \"remark-cli\": \"^10.0.0\",\n    \"remark-preset-wooorm\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unified\": \"^10.0.0\",\n    \"xo\": \"^0.46.0\"\n  },\n  \"scripts\": {\n    \"generate\": \"node build\",\n    \"prepublishOnly\": \"npm run build && npm run format\",\n    \"build\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"test-api\": \"node --conditions development test.js\",\n    \"test-coverage\": \"c8 --check-coverage --branches 100 --functions 100 --lines 100 --statements 100 --reporter lcov npm run test-api\",\n    \"test\": \"npm run generate && npm run build && npm run format && npm run test-coverage\"\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/web-namespaces/package.json"
  },
  "{0534B42E-A67F-4194-A01A-22DC1437D8ED}": {
    "source": "export const errors = {\n  abandonedHeadElementChild: {\n    reason: 'Unexpected metadata element after head',\n    description:\n      'Unexpected element after head. Expected the element before `</head>`',\n    url: false\n  },\n  abruptClosingOfEmptyComment: {\n    reason: 'Unexpected abruptly closed empty comment',\n    description: 'Unexpected `>` or `->`. Expected `-->` to close comments'\n  },\n  abruptDoctypePublicIdentifier: {\n    reason: 'Unexpected abruptly closed public identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the public identifier'\n  },\n  abruptDoctypeSystemIdentifier: {\n    reason: 'Unexpected abruptly closed system identifier',\n    description:\n      'Unexpected `>`. Expected a closing `\"` or `\\'` after the identifier identifier'\n  },\n  absenceOfDigitsInNumericCharacterReference: {\n    reason: 'Unexpected non-digit at start of numeric character reference',\n    description:\n      'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'\n  },\n  cdataInHtmlContent: {\n    reason: 'Unexpected CDATA section in HTML',\n    description:\n      'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'\n  },\n  characterReferenceOutsideUnicodeRange: {\n    reason: 'Unexpected too big numeric character reference',\n    description:\n      'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'\n  },\n  closingOfElementWithOpenChildElements: {\n    reason: 'Unexpected closing tag with open child elements',\n    description:\n      'Unexpectedly closing tag. Expected other tags to be closed first',\n    url: false\n  },\n  controlCharacterInInputStream: {\n    reason: 'Unexpected control character',\n    description:\n      'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  controlCharacterReference: {\n    reason: 'Unexpected control character reference',\n    description:\n      'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'\n  },\n  disallowedContentInNoscriptInHead: {\n    reason: 'Disallowed content inside `<noscript>` in `<head>`',\n    description:\n      'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',\n    url: false\n  },\n  duplicateAttribute: {\n    reason: 'Unexpected duplicate attribute',\n    description:\n      'Unexpectedly double attribute. Expected attributes to occur only once'\n  },\n  endTagWithAttributes: {\n    reason: 'Unexpected attribute on closing tag',\n    description: 'Unexpected attribute. Expected `>` instead'\n  },\n  endTagWithTrailingSolidus: {\n    reason: 'Unexpected slash at end of closing tag',\n    description: 'Unexpected `%c-1`. Expected `>` instead'\n  },\n  endTagWithoutMatchingOpenElement: {\n    reason: 'Unexpected unopened end tag',\n    description: 'Unexpected end tag. Expected no end tag or another end tag',\n    url: false\n  },\n  eofBeforeTagName: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected tag name instead'\n  },\n  eofInCdata: {\n    reason: 'Unexpected end of file in CDATA',\n    description: 'Unexpected end of file. Expected `]]>` to close the CDATA'\n  },\n  eofInComment: {\n    reason: 'Unexpected end of file in comment',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInDoctype: {\n    reason: 'Unexpected end of file in doctype',\n    description:\n      'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'\n  },\n  eofInElementThatCanContainOnlyText: {\n    reason: 'Unexpected end of file in element that can only contain text',\n    description: 'Unexpected end of file. Expected text or a closing tag',\n    url: false\n  },\n  eofInScriptHtmlCommentLikeText: {\n    reason: 'Unexpected end of file in comment inside script',\n    description: 'Unexpected end of file. Expected `-->` to close the comment'\n  },\n  eofInTag: {\n    reason: 'Unexpected end of file in tag',\n    description: 'Unexpected end of file. Expected `>` to close the tag'\n  },\n  incorrectlyClosedComment: {\n    reason: 'Incorrectly closed comment',\n    description: 'Unexpected `%c-1`. Expected `-->` to close the comment'\n  },\n  incorrectlyOpenedComment: {\n    reason: 'Incorrectly opened comment',\n    description: 'Unexpected `%c`. Expected `<!--` to open the comment'\n  },\n  invalidCharacterSequenceAfterDoctypeName: {\n    reason: 'Invalid sequence after doctype name',\n    description: 'Unexpected sequence at `%c`. Expected `public` or `system`'\n  },\n  invalidFirstCharacterOfTagName: {\n    reason: 'Invalid first character in tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  misplacedDoctype: {\n    reason: 'Misplaced doctype',\n    description: 'Unexpected doctype. Expected doctype before head',\n    url: false\n  },\n  misplacedStartTagForHeadElement: {\n    reason: 'Misplaced `<head>` start tag',\n    description:\n      'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',\n    url: false\n  },\n  missingAttributeValue: {\n    reason: 'Missing attribute value',\n    description:\n      'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'\n  },\n  missingDoctype: {\n    reason: 'Missing doctype before other content',\n    description: 'Expected a `<!doctype html>` before anything else',\n    url: false\n  },\n  missingDoctypeName: {\n    reason: 'Missing doctype name',\n    description: 'Unexpected doctype end at `%c`. Expected `html` instead'\n  },\n  missingDoctypePublicIdentifier: {\n    reason: 'Missing public identifier in doctype',\n    description: 'Unexpected `%c`. Expected identifier for `public` instead'\n  },\n  missingDoctypeSystemIdentifier: {\n    reason: 'Missing system identifier in doctype',\n    description:\n      'Unexpected `%c`. Expected identifier for `system` instead (suggested: `\"about:legacy-compat\"`)'\n  },\n  missingEndTagName: {\n    reason: 'Missing name in end tag',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  missingQuoteBeforeDoctypePublicIdentifier: {\n    reason: 'Missing quote before public identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingQuoteBeforeDoctypeSystemIdentifier: {\n    reason: 'Missing quote before system identifier in doctype',\n    description: 'Unexpected `%c`. Expected `\"` or `\\'` instead'\n  },\n  missingSemicolonAfterCharacterReference: {\n    reason: 'Missing semicolon after character reference',\n    description: 'Unexpected `%c`. Expected `;` instead'\n  },\n  missingWhitespaceAfterDoctypePublicKeyword: {\n    reason: 'Missing whitespace after public identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceAfterDoctypeSystemKeyword: {\n    reason: 'Missing whitespace after system identifier in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBeforeDoctypeName: {\n    reason: 'Missing whitespace before doctype name',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenAttributes: {\n    reason: 'Missing whitespace between attributes',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {\n    reason:\n      'Missing whitespace between public and system identifiers in doctype',\n    description: 'Unexpected `%c`. Expected ASCII whitespace instead'\n  },\n  nestedComment: {\n    reason: 'Unexpected nested comment',\n    description: 'Unexpected `<!--`. Expected `-->`'\n  },\n  nestedNoscriptInHead: {\n    reason: 'Unexpected nested `<noscript>` in `<head>`',\n    description:\n      'Unexpected `<noscript>`. Expected a closing tag or a meta element',\n    url: false\n  },\n  nonConformingDoctype: {\n    reason: 'Unexpected non-conforming doctype declaration',\n    description:\n      'Expected `<!doctype html>` or `<!doctype html system \"about:legacy-compat\">`',\n    url: false\n  },\n  nonVoidHtmlElementStartTagWithTrailingSolidus: {\n    reason: 'Unexpected trailing slash on start tag of non-void element',\n    description: 'Unexpected `/`. Expected `>` instead'\n  },\n  noncharacterCharacterReference: {\n    reason:\n      'Unexpected noncharacter code point referenced by character reference',\n    description: 'Unexpected code point. Do not use noncharacters in HTML'\n  },\n  noncharacterInInputStream: {\n    reason: 'Unexpected noncharacter character',\n    description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'\n  },\n  nullCharacterReference: {\n    reason: 'Unexpected NULL character referenced by character reference',\n    description: 'Unexpected code point. Do not use NULL characters in HTML'\n  },\n  openElementsLeftAfterEof: {\n    reason: 'Unexpected end of file',\n    description: 'Unexpected end of file. Expected closing tag instead',\n    url: false\n  },\n  surrogateCharacterReference: {\n    reason: 'Unexpected surrogate character referenced by character reference',\n    description:\n      'Unexpected code point. Do not use lone surrogate characters in HTML'\n  },\n  surrogateInInputStream: {\n    reason: 'Unexpected surrogate character',\n    description:\n      'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'\n  },\n  unexpectedCharacterAfterDoctypeSystemIdentifier: {\n    reason: 'Invalid character after system identifier in doctype',\n    description: 'Unexpected character at `%c`. Expected `>`'\n  },\n  unexpectedCharacterInAttributeName: {\n    reason: 'Unexpected character in attribute name',\n    description:\n      'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'\n  },\n  unexpectedCharacterInUnquotedAttributeValue: {\n    reason: 'Unexpected character in unquoted attribute value',\n    description: 'Unexpected `%c`. Quote the attribute value to include it'\n  },\n  unexpectedEqualsSignBeforeAttributeName: {\n    reason: 'Unexpected equals sign before attribute name',\n    description: 'Unexpected `%c`. Add an attribute name before it'\n  },\n  unexpectedNullCharacter: {\n    reason: 'Unexpected NULL character',\n    description:\n      'Unexpected code point `%x`. Do not use NULL characters in HTML'\n  },\n  unexpectedQuestionMarkInsteadOfTagName: {\n    reason: 'Unexpected question mark instead of tag name',\n    description: 'Unexpected `%c`. Expected an ASCII letter instead'\n  },\n  unexpectedSolidusInTag: {\n    reason: 'Unexpected slash in tag',\n    description:\n      'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'\n  },\n  unknownNamedCharacterReference: {\n    reason: 'Unexpected unknown named character reference',\n    description:\n      'Unexpected character reference. Expected known named character references'\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/rehype-parse/lib/errors.js"
  },
  "{1603FE96-28FB-4F91-B2EB-D076CDCEA4A9}": {
    "source": "'use strict'\n\n/**\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('unified').RunCallback} RunCallback\n * @typedef {import('unified').Transformer} Transformer\n * @typedef {import('unist').Node} Node\n */\n\nvar hast2mdast = require('hast-util-to-mdast')\n\n/**\n * Attacher.\n *\n * If a destination is given, runs the destination with the new mdast\n * tree (bridge-mode). Without destination, returns the mdast tree: further\n * plugins run on that tree (mutate-mode).\n *\n * @param destination Optional unified processor.\n * @param options Options passed to `hast-util-to-mdast`.\n */\nmodule.exports =\n  /**\n   * @type {import('unified').Plugin<[Options?]|[Processor, Options?]>}\n   */\n  (\n    /**\n     * @param {Processor|Options} [destination]\n     * @param {Options} [options]\n     */\n    function (destination, options) {\n      /** @type {Options|undefined} */\n      var settings\n      /** @type {Processor|undefined} */\n      var processor\n\n      if (typeof destination === 'function') {\n        processor = destination\n        settings = options || {}\n      } else {\n        settings = destination || {}\n      }\n\n      if (settings.document === undefined || settings.document === null) {\n        settings = Object.assign({}, settings, {document: true})\n      }\n\n      return processor ? bridge(processor, settings) : mutate(settings)\n    }\n  )\n\n/**\n * Bridge-mode.\n * Runs the destination with the new mdast tree.\n * @param {Processor} destination\n * @param {Options} [options]\n * @returns {Transformer}\n */\nfunction bridge(destination, options) {\n  return transformer\n  /** @type {Transformer} */\n  function transformer(node, file, next) {\n    destination.run(hast2mdast(node, options), file, done)\n    /** @type {RunCallback} */\n    function done(err) {\n      // @ts-expect-error: `unified` should accept 1 arg for next.\n      // See: <https://github.com/unifiedjs/unified/pull/141#issuecomment-871239574>\n      next(err)\n    }\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the mdast tree.\n *\n * @param {Options} [options]\n * @returns {Transformer}\n */\nfunction mutate(options) {\n  return transformer\n  /** @param {Node} node */\n  function transformer(node) {\n    return hast2mdast(node, options)\n  }\n}\n\n// Remove the following JSDoc block when upgrading hast-util-to-mdast to version 8.\n// Import these types from hast-util-to-mdast when version 8 released.\n/**\n * @typedef {import('mdast').Content} MdastNode\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('hast').Element} Element\n *\n * @typedef Context\n * @property {Object.<string, Element>} nodeById\n * @property {boolean} baseFound\n * @property {string|null} frozenBaseUrl\n * @property {boolean} wrapText\n * @property {number} qNesting\n * @property {Object.<string, Handle>} handlers\n * @property {boolean|undefined} document\n * @property {string} checked\n * @property {string} unchecked\n * @property {Array.<string>} quotes\n *\n * @typedef {(node: Node, type: string, props?: Properties, children?: string|Array.<MdastNode>) => MdastNode} HWithProps\n * @typedef {(node: Node, type: string, children?: string|Array.<MdastNode>) => MdastNode} HWithoutProps\n * @typedef {Record<string, unknown>} Properties*\n * @typedef {HWithProps & HWithoutProps & Context} H\n * @typedef {(h: H, node: any, parent?: Parent) => MdastNode|Array.<MdastNode>|void} Handle\n *\n * @typedef Options\n * @property {Object.<string, Handle>} [handlers]\n * @property {boolean} [document]\n * @property {boolean} [newlines=false]\n * @property {string} [checked='[x]']\n * @property {string} [unchecked='[ ]']\n * @property {Array.<string>} [quotes=['\"']]\n */\n",
    "mapping": {
      "hast-util-to-mdast": "{74CA421B-A9D9-40F5-A14A-644321A5CBC5}"
    },
    "path": "{markdown-translate}/node_modules/rehype-remark/index.js"
  },
  "{35C4004D-E625-4988-AF84-D30C6514C805}": {
    "source": "{\n  \"name\": \"rehype-remark\",\n  \"version\": \"8.1.1\",\n  \"description\": \"rehype plugin to transform to remark\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"unified\",\n    \"rehype\",\n    \"rehype-plugin\",\n    \"remark\",\n    \"remark-plugin\",\n    \"html\",\n    \"markdown\",\n    \"hast\",\n    \"mdast\"\n  ],\n  \"repository\": \"rehypejs/rehype-remark\",\n  \"bugs\": \"https://github.com/rehypejs/rehype-remark/issues\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"author\": \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\",\n  \"contributors\": [\n    \"Titus Wormer <tituswormer@gmail.com> (https://wooorm.com)\"\n  ],\n  \"dependencies\": {\n    \"@types/hast\": \"^2.0.0\",\n    \"@types/mdast\": \"^3.0.0\",\n    \"@types/unist\": \"^2.0.0\",\n    \"hast-util-to-mdast\": \"^7.0.0\"\n  },\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\"\n  ],\n  \"devDependencies\": {\n    \"@types/tape\": \"^4.0.0\",\n    \"browserify\": \"^17.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype-parse\": \"^7.0.0\",\n    \"rehype-stringify\": \"^8.0.0\",\n    \"remark-cli\": \"^9.0.0\",\n    \"remark-preset-wooorm\": \"^8.0.0\",\n    \"remark-stringify\": \"^9.0.0\",\n    \"rimraf\": \"^3.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"tinyify\": \"^3.0.0\",\n    \"type-coverage\": \"^2.0.0\",\n    \"typescript\": \"^4.0.0\",\n    \"unified\": \"^9.0.0\",\n    \"xo\": \"^0.36.0\"\n  },\n  \"scripts\": {\n    \"format\": \"remark . -qfo && prettier . -w --loglevel warn && xo --fix\",\n    \"build-types\": \"rimraf \\\"*.d.ts\\\" && tsc && type-coverage\",\n    \"build-bundle\": \"browserify . -s rehypeRemark -o rehype-remark.js\",\n    \"build-mangle\": \"browserify . -s rehypeRemark -o rehype-remark.min.js -p tinyify\",\n    \"build\": \"npm run build-types && npm run build-bundle && npm run build-mangle\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\"\n  },\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"rehype-remark.js\"\n    ]\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"typeCoverage\": {\n    \"atLeast\": 100,\n    \"detail\": true,\n    \"strict\": true,\n    \"ignoreCatch\": true,\n    \"ignoreFiles\": [\n      \"index.d.ts\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/rehype-remark/package.json"
  },
  "{74CA421B-A9D9-40F5-A14A-644321A5CBC5}": {
    "source": "'use strict'\n\nmodule.exports = toMdast\n\nvar minify = require('rehype-minify-whitespace')\nvar visit = require('unist-util-visit')\nvar xtend = require('xtend')\nvar one = require('./lib/one')\nvar handlers = require('./lib/handlers')\n\nfunction toMdast(tree, options) {\n  var settings = options || {}\n  var byId = {}\n\n  h.nodeById = byId\n  h.baseFound = false\n  h.frozenBaseUrl = null\n  h.wrapText = true\n  h.qNesting = 0\n\n  h.handlers = xtend(handlers, settings.handlers || {})\n  h.augment = augment\n\n  h.document = settings.document\n  h.checked = settings.checked || '[x]'\n  h.unchecked = settings.unchecked || '[ ]'\n  h.quotes = settings.quotes || ['\"']\n\n  visit(tree, onvisit)\n\n  minify({newlines: settings.newlines === true})(tree)\n\n  return one(h, tree, null)\n\n  function h(node, type, props, children) {\n    var result\n\n    if (\n      !children &&\n      (typeof props === 'string' ||\n        (typeof props === 'object' && 'length' in props))\n    ) {\n      children = props\n      props = {}\n    }\n\n    result = xtend({type: type}, props)\n\n    if (typeof children === 'string') {\n      result.value = children\n    } else if (children) {\n      result.children = children\n    }\n\n    return augment(node, result)\n  }\n\n  // To do: inline in a future major.\n  // `right` is the finalized mdast node, created from `left`, a hast node.\n  function augment(left, right) {\n    if (left.position) {\n      right.position = left.position\n    }\n\n    return right\n  }\n\n  function onvisit(node) {\n    var props = node.properties || {}\n    var id = props.id\n\n    if (id && !(id in node)) {\n      byId[id] = node\n    }\n  }\n}\n",
    "mapping": {
      "rehype-minify-whitespace": "{60D3C276-1052-4988-BCF4-C5E107F2F1A9}",
      "xtend": "{B05BD01D-553B-40EC-B0CB-ACC6CA63D469}",
      "./lib/one": "{83D26F98-85EA-447D-95CE-F88993350386}",
      "./lib/handlers": "{F5146A96-3E38-4BD3-9247-AE9A9FA7FB7B}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/index.js"
  },
  "{0DFD58BD-C674-4766-A9E5-253E9976DB4B}": {
    "source": "{\n  \"_from\": \"hast-util-to-mdast@^7.0.0\",\n  \"_id\": \"hast-util-to-mdast@7.1.1\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-MXD6n7sxvmg1ntpugcGAE0AD+SrZWUqlJgLjYZr93697s3TWgsrs/PGXcgk/E7mvcj4q85tZy5grsMDKzmqBxA==\",\n  \"_location\": \"/hast-util-to-mdast\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-to-mdast@^7.0.0\",\n    \"name\": \"hast-util-to-mdast\",\n    \"escapedName\": \"hast-util-to-mdast\",\n    \"rawSpec\": \"^7.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^7.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/rehype-remark\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-to-mdast/-/hast-util-to-mdast-7.1.1.tgz\",\n  \"_shasum\": \"1fc4440fc670273a1a7041584be08e5bb1d037ac\",\n  \"_spec\": \"hast-util-to-mdast@^7.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\rehype-remark\",\n  \"author\": {\n    \"name\": \"Seth Vincent\",\n    \"email\": \"sethvincent@gmail.com\",\n    \"url\": \"https://sethvincent.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-to-mdast/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Seth Vincent\",\n      \"email\": \"sethvincent@gmail.com\",\n      \"url\": \"https://sethvincent.com\"\n    },\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"extend\": \"^3.0.0\",\n    \"hast-util-has-property\": \"^1.0.0\",\n    \"hast-util-is-element\": \"^1.0.0\",\n    \"hast-util-to-text\": \"^2.0.0\",\n    \"mdast-util-phrasing\": \"^2.0.0\",\n    \"mdast-util-to-string\": \"^1.0.0\",\n    \"rehype-minify-whitespace\": \"^4.0.3\",\n    \"repeat-string\": \"^1.6.1\",\n    \"trim-trailing-lines\": \"^1.1.0\",\n    \"unist-util-visit\": \"^2.0.0\",\n    \"xtend\": \"^4.0.1\"\n  },\n  \"deprecated\": false,\n  \"description\": \"hast utility to transform to mdast\",\n  \"devDependencies\": {\n    \"hastscript\": \"^5.0.0\",\n    \"is-hidden\": \"^1.0.0\",\n    \"mdast-util-assert\": \"^3.0.0\",\n    \"negate\": \"^1.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^2.0.0\",\n    \"rehype-parse\": \"^6.0.0\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-parse\": \"^8.0.0\",\n    \"remark-preset-wooorm\": \"^7.0.0\",\n    \"remark-stringify\": \"^8.0.0\",\n    \"tape\": \"^5.0.0\",\n    \"unified\": \"^9.0.0\",\n    \"unist-builder\": \"^2.0.0\",\n    \"unist-util-remove-position\": \"^2.0.0\",\n    \"xo\": \"^0.32.0\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-to-mdast#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"mdast\",\n    \"mdast-util\",\n    \"rehype\",\n    \"remark\",\n    \"markdown\",\n    \"html\",\n    \"transform\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-to-mdast\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-to-mdast.git\"\n  },\n  \"scripts\": {\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test/index.js\"\n  },\n  \"version\": \"7.1.1\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/no-fn-reference-in-iterator\": \"off\",\n      \"unicorn/prefer-number-properties\": \"off\",\n      \"unicorn/prefer-optional-catch-binding\": \"off\",\n      \"no-multi-assign\": \"off\"\n    }\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/package.json"
  },
  "{60D3C276-1052-4988-BCF4-C5E107F2F1A9}": {
    "source": "/**\n * @fileoverview\n *   Collapse white-space.\n *\n *   Normally, collapses to a single space.\n *   If `newlines: true`, collapses white-space containing newlines to `'\\n'`\n *   instead of `' '`.\n * @example\n *   <h1>Heading</h1>\n *   <p><strong>This</strong> and <em>that</em></p>\n */\n\n'use strict'\n\nvar collapseWhiteSpace = require('collapse-white-space')\nvar is = require('hast-util-is-element')\nvar embedded = require('hast-util-embedded')\nvar convert = require('unist-util-is/convert')\nvar whitespace = require('hast-util-whitespace')\nvar blocks = require('./block')\nvar contents = require('./content')\nvar skippables = require('./skippable')\n\nmodule.exports = minifyWhitespace\n\nvar ignorableNode = convert(['doctype', 'comment'])\nvar parent = convert(['element', 'root'])\nvar root = convert(['root'])\nvar element = convert(['element'])\nvar text = convert(['text'])\n\nfunction minifyWhitespace(options) {\n  var collapse = (options || {}).newlines\n    ? collapseToNewLines\n    : collapseWhiteSpace\n\n  return transform\n\n  function transform(tree) {\n    minify(tree, {collapse: collapse, whitespace: 'normal'})\n  }\n}\n\nfunction minify(node, options) {\n  var settings\n\n  if (parent(node)) {\n    settings = Object.assign({}, options)\n\n    if (root(node) || blocklike(node)) {\n      settings.before = true\n      settings.after = true\n    }\n\n    settings.whitespace = inferWhiteSpace(node, options)\n\n    return all(node, settings)\n  }\n\n  if (text(node)) {\n    if (options.whitespace === 'normal') {\n      return minifyText(node, options)\n    }\n\n    // Naïve collapse, but no trimming:\n    if (options.whitespace === 'nowrap') {\n      node.value = options.collapse(node.value)\n    }\n\n    // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor\n    // trimmed.\n  }\n\n  return {\n    remove: false,\n    ignore: ignorableNode(node),\n    stripAtStart: false\n  }\n}\n\nfunction minifyText(node, options) {\n  var value = options.collapse(node.value)\n  var start = 0\n  var end = value.length\n  var result = {remove: false, ignore: false, stripAtStart: false}\n\n  if (options.before && removable(value.charAt(0))) {\n    start++\n  }\n\n  if (start !== end && removable(value.charAt(end - 1))) {\n    if (options.after) {\n      end--\n    } else {\n      result.stripAtStart = true\n    }\n  }\n\n  if (start === end) {\n    result.remove = true\n  } else {\n    node.value = value.slice(start, end)\n  }\n\n  return result\n}\n\nfunction all(parent, options) {\n  var before = options.before\n  var after = options.after\n  var children = parent.children\n  var length = children.length\n  var index = -1\n  var result\n\n  while (++index < length) {\n    result = minify(\n      children[index],\n      Object.assign({}, options, {\n        before: before,\n        after: collapsableAfter(children, index, after)\n      })\n    )\n\n    if (result.remove) {\n      children.splice(index, 1)\n      index--\n      length--\n    } else if (!result.ignore) {\n      before = result.stripAtStart\n    }\n\n    // If this element, such as a `<select>` or `<img>`, contributes content\n    // somehow, allow whitespace again.\n    if (content(children[index])) {\n      before = false\n    }\n  }\n\n  return {\n    remove: false,\n    ignore: false,\n    stripAtStart: before || after\n  }\n}\n\nfunction collapsableAfter(nodes, index, after) {\n  var length = nodes.length\n  var node\n  var result\n\n  while (++index < length) {\n    node = nodes[index]\n    result = inferBoundary(node)\n\n    if (result === undefined && node.children && !skippable(node)) {\n      result = collapsableAfter(node.children, -1)\n    }\n\n    if (typeof result === 'boolean') {\n      return result\n    }\n  }\n\n  return after\n}\n\n// Infer two types of boundaries:\n//\n// 1. `true` — boundary for which whitespace around it does not contribute\n//    anything\n// 2. `false` — boundary for which whitespace around it *does* contribute\n//\n// No result (`undefined`) is returned if it is unknown.\nfunction inferBoundary(node) {\n  if (element(node)) {\n    if (content(node)) {\n      return false\n    }\n\n    if (blocklike(node)) {\n      return true\n    }\n\n    // Unknown: either depends on siblings if embedded or metadata, or on\n    // children.\n  } else if (text(node)) {\n    if (!whitespace(node)) {\n      return false\n    }\n  } else if (!ignorableNode(node)) {\n    return false\n  }\n}\n\n// Infer whether a node is skippable.\nfunction content(node) {\n  return embedded(node) || is(node, contents)\n}\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nfunction blocklike(node) {\n  return is(node, blocks)\n}\n\nfunction skippable(node) {\n  /* istanbul ignore next - currently only used on elements, but just to make sure. */\n  var props = node.properties || {}\n\n  return ignorableNode(node) || is(node, skippables) || props.hidden\n}\n\nfunction removable(character) {\n  return character === ' ' || character === '\\n'\n}\n\n// Collapse to spaces, or line feeds if they’re in a run.\nfunction collapseToNewLines(value) {\n  return String(value).replace(/\\s+/g, replace)\n\n  function replace($0) {\n    return $0.indexOf('\\n') === -1 ? ' ' : '\\n'\n  }\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {}\n\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre'\n    case 'nobr':\n      return 'nowrap'\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre'\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : options.whitespace\n    case 'textarea':\n      return 'pre-wrap'\n    default:\n      return options.whitespace\n  }\n}\n",
    "mapping": {
      "hast-util-is-element": "{7F4122A8-8F58-488C-BAC5-A2CED283BA54}",
      "hast-util-embedded": "{0E18EC65-D58D-41DD-A00C-96FE7376618A}",
      "hast-util-whitespace": "{C89DE07C-B3FE-4D68-BBD3-5B6DF904D5FC}",
      "./block": "{D0A774A9-66B3-4B9A-BECE-F436735C205A}",
      "./content": "{35315D54-92E4-417A-8456-DF5FCDD4D5FB}",
      "./skippable": "{28E928D7-41A7-45C6-9F65-AE509CB5277F}"
    },
    "path": "{markdown-translate}/node_modules/rehype-minify-whitespace/index.js"
  },
  "{F7F5A5C5-45AB-4DAB-9A29-EEEF89EEB030}": {
    "source": "{\n  \"_from\": \"rehype-minify-whitespace@^4.0.3\",\n  \"_id\": \"rehype-minify-whitespace@4.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-/dhWxk0moCemEVsHNrmZnY7Bu4/0KtmwqT/4YDRvrurGBWjm6+vtzuTglLxHMbWTha4DibKvngg9gKb58KsoBw==\",\n  \"_location\": \"/rehype-minify-whitespace\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"rehype-minify-whitespace@^4.0.3\",\n    \"name\": \"rehype-minify-whitespace\",\n    \"escapedName\": \"rehype-minify-whitespace\",\n    \"rawSpec\": \"^4.0.3\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^4.0.3\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/rehype-minify-whitespace/-/rehype-minify-whitespace-4.0.4.tgz\",\n  \"_shasum\": \"369628fa4a7861daec7ba368f7ee9823df7f1d95\",\n  \"_spec\": \"rehype-minify-whitespace@^4.0.3\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/rehypejs/rehype-minify/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"collapse-white-space\": \"^1.0.0\",\n    \"hast-util-embedded\": \"^1.0.0\",\n    \"hast-util-is-element\": \"^1.0.0\",\n    \"hast-util-whitespace\": \"^1.0.4\",\n    \"unist-util-is\": \"^4.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"rehype plugin to collapse whitespace\",\n  \"files\": [\n    \"block.js\",\n    \"content.js\",\n    \"index.js\",\n    \"skippable.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"keywords\": [\n    \"unified\",\n    \"rehype\",\n    \"rehype-plugin\",\n    \"plugin\",\n    \"html\",\n    \"minify\",\n    \"mangle\",\n    \"collapse\",\n    \"whitespace\",\n    \"white\",\n    \"space\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"rehype-minify-whitespace\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/rehypejs/rehype-minify/tree/main/packages/rehype-minify-whitespace\"\n  },\n  \"version\": \"4.0.4\",\n  \"xo\": false\n}\n",
    "path": "{markdown-translate}/node_modules/rehype-minify-whitespace/package.json"
  },
  "{7F4122A8-8F58-488C-BAC5-A2CED283BA54}": {
    "source": "'use strict'\n\nmodule.exports = isElement\n\n// Check if if `node` is an `element` and, if `tagNames` is given, `node`\n// matches them `tagNames`.\nfunction isElement(node, tagNames) {\n  var name\n\n  if (\n    !(\n      tagNames === null ||\n      tagNames === undefined ||\n      typeof tagNames === 'string' ||\n      (typeof tagNames === 'object' && tagNames.length !== 0)\n    )\n  ) {\n    throw new Error(\n      'Expected `string` or `Array.<string>` for `tagNames`, not `' +\n        tagNames +\n        '`'\n    )\n  }\n\n  if (\n    !node ||\n    typeof node !== 'object' ||\n    node.type !== 'element' ||\n    typeof node.tagName !== 'string'\n  ) {\n    return false\n  }\n\n  if (tagNames === null || tagNames === undefined) {\n    return true\n  }\n\n  name = node.tagName\n\n  if (typeof tagNames === 'string') {\n    return name === tagNames\n  }\n\n  return tagNames.indexOf(name) !== -1\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-is-element/index.js"
  },
  "{B209D8F8-BDE5-468F-992C-AC8F5C30BFF4}": {
    "source": "{\n  \"_from\": \"hast-util-is-element@^1.0.0\",\n  \"_id\": \"hast-util-is-element@1.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-NFR6ljJRvDcyPP5SbV7MyPBgF47X3BsskLnmw1U34yL+X6YC0MoBx9EyMg8Jtx4FzGH95jw8+c1VPLHaRA0wDQ==\",\n  \"_location\": \"/hast-util-is-element\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-is-element@^1.0.0\",\n    \"name\": \"hast-util-is-element\",\n    \"escapedName\": \"hast-util-is-element\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-embedded\",\n    \"/hast-util-to-html\",\n    \"/hast-util-to-mdast\",\n    \"/hast-util-to-text\",\n    \"/rehype-minify-whitespace\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-is-element/-/hast-util-is-element-1.0.4.tgz\",\n  \"_shasum\": \"059090a05cc02e275df1ad02caf8cb422fcd2e02\",\n  \"_spec\": \"hast-util-is-element@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-html\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-is-element/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"hast utility to check if a node is a (certain) element\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-is-element#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"is\",\n    \"element\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-is-element\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-is-element.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s hastUtilIsElement > hast-util-is-element.js\",\n    \"build-mangle\": \"browserify . -s hastUtilIsElement -p tinyify > hast-util-is-element.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.4\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"unicorn/prefer-includes\": \"off\"\n    },\n    \"ignores\": [\n      \"hast-util-is-element.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-is-element/package.json"
  },
  "{0E18EC65-D58D-41DD-A00C-96FE7376618A}": {
    "source": "'use strict'\n\nvar is = require('hast-util-is-element')\n\nmodule.exports = embedded\n\nvar names = [\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'math',\n  'object',\n  'picture',\n  'svg',\n  'video'\n]\n\nfunction embedded(node) {\n  return is(node, names)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-embedded/index.js"
  },
  "{FB17B5A3-A287-4EEB-9CE9-73E8E1732862}": {
    "source": "{\n  \"_from\": \"hast-util-embedded@^1.0.0\",\n  \"_id\": \"hast-util-embedded@1.0.5\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-0FfLHmfArWOizbdwjL+Rc9QIBzqP80juicNl4S4NEPq5OYWBCgYrtYDPUDoSyQQ9IQlBn9W7++fpYQNzZSq/wQ==\",\n  \"_location\": \"/hast-util-embedded\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-embedded@^1.0.0\",\n    \"name\": \"hast-util-embedded\",\n    \"escapedName\": \"hast-util-embedded\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/rehype-minify-whitespace\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-embedded/-/hast-util-embedded-1.0.5.tgz\",\n  \"_shasum\": \"daeb84ffad67cdaf5117cf64cc0e13de5f0889b8\",\n  \"_spec\": \"hast-util-embedded@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\rehype-minify-whitespace\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-embedded/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"hast-util-is-element\": \"^1.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"hast utility to check if a node is an embedded element\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-embedded#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"category\",\n    \"embedded\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-embedded\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-embedded.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s hastUtilEmbedded > hast-util-embedded.js\",\n    \"build-mangle\": \"browserify . -s hastUtilEmbedded -p tinyify > hast-util-embedded.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.5\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignore\": [\n      \"hast-util-embedded.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-embedded/package.json"
  },
  "{C89DE07C-B3FE-4D68-BBD3-5B6DF904D5FC}": {
    "source": "'use strict'\n\nmodule.exports = interElementWhiteSpace\n\n// HTML white-space expression.\n// See <https://html.spec.whatwg.org/#space-character>.\nvar re = /[ \\t\\n\\f\\r]/g\n\nfunction interElementWhiteSpace(node) {\n  var value\n\n  if (node && typeof node === 'object' && node.type === 'text') {\n    value = node.value || ''\n  } else if (typeof node === 'string') {\n    value = node\n  } else {\n    return false\n  }\n\n  return value.replace(re, '') === ''\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-whitespace/index.js"
  },
  "{50F341F2-96C9-40A2-8677-B16F49206AFF}": {
    "source": "{\n  \"_from\": \"hast-util-whitespace@^1.0.0\",\n  \"_id\": \"hast-util-whitespace@1.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-I5GTdSfhYfAPNztx2xJRQpG8cuDSNt599/7YUn7Gx/WxNMsG+a835k97TDkFgk123cwjfwINaZknkKkphx/f2A==\",\n  \"_location\": \"/hast-util-whitespace\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-whitespace@^1.0.0\",\n    \"name\": \"hast-util-whitespace\",\n    \"escapedName\": \"hast-util-whitespace\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-html\",\n    \"/rehype-minify-whitespace\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-whitespace/-/hast-util-whitespace-1.0.4.tgz\",\n  \"_shasum\": \"e4fe77c4a9ae1cb2e6c25e02df0043d0164f6e41\",\n  \"_spec\": \"hast-util-whitespace@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-html\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-whitespace/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"hast utility to check if a node is inter-element whitespace\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-whitespace#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"inter\",\n    \"element\",\n    \"inter-element\",\n    \"white-space\",\n    \"whitespace\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-whitespace\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-whitespace.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s hastUtilWhitespace > hast-util-whitespace.js\",\n    \"build-mangle\": \"browserify . -s hastUtilWhitespace -p tinyify > hast-util-whitespace.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.4\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"hast-util-whitespace.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-whitespace/package.json"
  },
  "{D0A774A9-66B3-4B9A-BECE-F436735C205A}": {
    "source": "// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nmodule.exports = [\n  // Contribute whitespace intrinsically.\n  'br',\n  'wbr',\n  // Similar to block.\n  'li',\n  'table',\n  'caption',\n  'colgroup',\n  'col',\n  'thead',\n  'tbody',\n  'tfoot',\n  'tr',\n  'td',\n  'th',\n  'summary',\n  'optgroup',\n  'option',\n  // Page\n  'html',\n  'head',\n  'body',\n  // Flow content\n  'address',\n  'blockquote',\n  'center', // Legacy\n  'dialog',\n  'div',\n  'figure',\n  'figcaption',\n  'footer',\n  'form',\n  'header',\n  'hr',\n  'legend',\n  'listing', // Legacy\n  'main',\n  'p',\n  'plaintext', // Legacy\n  'pre',\n  'xmp', // Legacy\n  // Sections and headings\n  'article',\n  'aside',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'hgroup',\n  'nav',\n  'section',\n  // Lists\n  'dir', // Legacy\n  'dd',\n  'dl',\n  'dt',\n  'menu',\n  'ol',\n  'ul',\n  // Block-like:\n  'li',\n  'th',\n  'td'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/rehype-minify-whitespace/block.js"
  },
  "{35315D54-92E4-417A-8456-DF5FCDD4D5FB}": {
    "source": "module.exports = [\n  // Form.\n  'button',\n  'input',\n  'select',\n  'textarea'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/rehype-minify-whitespace/content.js"
  },
  "{28E928D7-41A7-45C6-9F65-AE509CB5277F}": {
    "source": "module.exports = [\n  'area',\n  'base',\n  'basefont',\n  'dialog',\n  'datalist',\n  'head',\n  'link',\n  'meta',\n  'noembed',\n  'noframes',\n  'param',\n  'rp',\n  'script',\n  'source',\n  'style',\n  'template',\n  'track',\n  'title'\n]\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/rehype-minify-whitespace/skippable.js"
  },
  "{B05BD01D-553B-40EC-B0CB-ACC6CA63D469}": {
    "source": "module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/xtend/immutable.js"
  },
  "{FA7487BE-B72A-4AD9-8B89-BEB630DE9154}": {
    "source": "{\n  \"_from\": \"xtend@^4.0.0\",\n  \"_id\": \"xtend@4.0.2\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==\",\n  \"_location\": \"/xtend\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"xtend@^4.0.0\",\n    \"name\": \"xtend\",\n    \"escapedName\": \"xtend\",\n    \"rawSpec\": \"^4.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^4.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-html\",\n    \"/hast-util-to-mdast\",\n    \"/property-information\",\n    \"/remark-parse\",\n    \"/remark-stringify\",\n    \"/unherit\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz\",\n  \"_shasum\": \"bb72779f5fa465186b1f438f674fa347fdb5db54\",\n  \"_spec\": \"xtend@^4.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\property-information\",\n  \"author\": {\n    \"name\": \"Raynos\",\n    \"email\": \"raynos2@gmail.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Raynos/xtend/issues\",\n    \"email\": \"raynos2@gmail.com\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Jake Verbaten\"\n    },\n    {\n      \"name\": \"Matt Esch\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"extend like a boss\",\n  \"devDependencies\": {\n    \"tape\": \"~1.1.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.4\"\n  },\n  \"homepage\": \"https://github.com/Raynos/xtend\",\n  \"keywords\": [\n    \"extend\",\n    \"merge\",\n    \"options\",\n    \"opts\",\n    \"object\",\n    \"array\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"immutable\",\n  \"name\": \"xtend\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/Raynos/xtend.git\"\n  },\n  \"scripts\": {\n    \"test\": \"node test\"\n  },\n  \"testling\": {\n    \"files\": \"test.js\",\n    \"browsers\": [\n      \"ie/7..latest\",\n      \"firefox/16..latest\",\n      \"firefox/nightly\",\n      \"chrome/22..latest\",\n      \"chrome/canary\",\n      \"opera/12..latest\",\n      \"opera/next\",\n      \"safari/5.1..latest\",\n      \"ipad/6.0..latest\",\n      \"iphone/6.0..latest\"\n    ]\n  },\n  \"version\": \"4.0.2\"\n}\n",
    "path": "{markdown-translate}/node_modules/xtend/package.json"
  },
  "{83D26F98-85EA-447D-95CE-F88993350386}": {
    "source": "'use strict'\n\nmodule.exports = one\n\nvar all = require('./all')\nvar wrapText = require('./util/wrap-text')\n\nvar own = {}.hasOwnProperty\n\nfunction one(h, node, parent) {\n  var fn = null\n\n  if (node.type === 'element') {\n    if (node.properties && node.properties.dataMdast === 'ignore') {\n      return\n    }\n\n    if (own.call(h.handlers, node.tagName)) {\n      fn = h.handlers[node.tagName]\n    }\n  } else if (own.call(h.handlers, node.type)) {\n    fn = h.handlers[node.type]\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\nfunction unknown(h, node) {\n  if (node.value) {\n    return h(node, 'text', wrapText(h, node.value))\n  }\n\n  return all(h, node)\n}\n",
    "mapping": {
      "./all": "{BBBB4721-6EF8-4102-8A14-86B537D84EF5}",
      "./util/wrap-text": "{6BDEB1C4-68CE-4A22-BD6D-103EDA91622C}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/one.js"
  },
  "{BBBB4721-6EF8-4102-8A14-86B537D84EF5}": {
    "source": "'use strict'\n\nmodule.exports = all\n\nvar one = require('./one')\n\nfunction all(h, parent) {\n  var nodes = parent.children || []\n  var length = nodes.length\n  var values = []\n  var index = -1\n  var result\n\n  while (++index < length) {\n    result = one(h, nodes[index], parent)\n\n    if (result) {\n      values = values.concat(result)\n    }\n  }\n\n  return values\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/all.js"
  },
  "{6BDEB1C4-68CE-4A22-BD6D-103EDA91622C}": {
    "source": "'use strict'\n\nmodule.exports = wrapText\n\nvar re = /\\r?\\n|\\r/g\n\nfunction wrapText(h, value) {\n  return h.wrapText ? value : value.replace(re, ' ')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/wrap-text.js"
  },
  "{F5146A96-3E38-4BD3-9247-AE9A9FA7FB7B}": {
    "source": "'use strict'\n\nvar all = require('../all')\nvar wrapped = require('../util/wrap-children')\nvar base = require('./base')\nvar blockquote = require('./blockquote')\nvar br = require('./break')\nvar cell = require('./table-cell')\nvar code = require('./code')\nvar comment = require('./comment')\nvar dl = require('./dl')\nvar del = require('./delete')\nvar emphasis = require('./emphasis')\nvar heading = require('./heading')\nvar iframe = require('./iframe')\nvar image = require('./image')\nvar inlineCode = require('./inline-code')\nvar input = require('./input')\nvar link = require('./link')\nvar list = require('./list')\nvar listItem = require('./list-item')\nvar media = require('./media')\nvar paragraph = require('./paragraph')\nvar quote = require('./q')\nvar root = require('./root')\nvar row = require('./table-row')\nvar select = require('./select')\nvar strong = require('./strong')\nvar table = require('./table')\nvar text = require('./text')\nvar textarea = require('./textarea')\nvar thematicBreak = require('./thematic-break')\nvar wbr = require('./wbr')\n\nexports.root = root\nexports.text = text\nexports.comment = comment\nexports.doctype = ignore\n\nexports.applet = ignore\nexports.area = ignore\nexports.basefont = ignore\nexports.bgsound = ignore\nexports.caption = ignore\nexports.col = ignore\nexports.colgroup = ignore\nexports.command = ignore\nexports.content = ignore\nexports.datalist = ignore\nexports.dialog = ignore\nexports.element = ignore\nexports.embed = ignore\nexports.frame = ignore\nexports.frameset = ignore\nexports.isindex = ignore\nexports.keygen = ignore\nexports.link = ignore\nexports.math = ignore\nexports.menu = ignore\nexports.menuitem = ignore\nexports.meta = ignore\nexports.nextid = ignore\nexports.noembed = ignore\nexports.noframes = ignore\nexports.optgroup = ignore\nexports.option = ignore\nexports.param = ignore\nexports.script = ignore\nexports.shadow = ignore\nexports.source = ignore\nexports.spacer = ignore\nexports.style = ignore\nexports.svg = ignore\nexports.template = ignore\nexports.title = ignore\nexports.track = ignore\n\nexports.abbr = all\nexports.acronym = all\nexports.bdi = all\nexports.bdo = all\nexports.big = all\nexports.blink = all\nexports.button = all\nexports.canvas = all\nexports.cite = all\nexports.data = all\nexports.details = all\nexports.dfn = all\nexports.font = all\nexports.ins = all\nexports.label = all\nexports.map = all\nexports.marquee = all\nexports.meter = all\nexports.nobr = all\nexports.noscript = all\nexports.object = all\nexports.output = all\nexports.progress = all\nexports.rb = all\nexports.rbc = all\nexports.rp = all\nexports.rt = all\nexports.rtc = all\nexports.ruby = all\nexports.slot = all\nexports.small = all\nexports.span = all\nexports.sup = all\nexports.sub = all\nexports.tbody = all\nexports.tfoot = all\nexports.thead = all\nexports.time = all\n\nexports.address = wrapped\nexports.article = wrapped\nexports.aside = wrapped\nexports.body = wrapped\nexports.center = wrapped\nexports.div = wrapped\nexports.fieldset = wrapped\nexports.figcaption = wrapped\nexports.figure = wrapped\nexports.form = wrapped\nexports.footer = wrapped\nexports.header = wrapped\nexports.hgroup = wrapped\nexports.html = wrapped\nexports.legend = wrapped\nexports.main = wrapped\nexports.multicol = wrapped\nexports.nav = wrapped\nexports.picture = wrapped\nexports.section = wrapped\n\nexports.a = link\nexports.audio = media\nexports.b = strong\nexports.base = base\nexports.blockquote = blockquote\nexports.br = br\nexports.code = inlineCode\nexports.dir = list\nexports.dl = dl\nexports.dt = listItem\nexports.dd = listItem\nexports.del = del\nexports.em = emphasis\nexports.h1 = heading\nexports.h2 = heading\nexports.h3 = heading\nexports.h4 = heading\nexports.h5 = heading\nexports.h6 = heading\nexports.hr = thematicBreak\nexports.i = emphasis\nexports.iframe = iframe\nexports.img = image\nexports.image = image\nexports.input = input\nexports.kbd = inlineCode\nexports.li = listItem\nexports.listing = code\nexports.mark = emphasis\nexports.ol = list\nexports.p = paragraph\nexports.plaintext = code\nexports.pre = code\nexports.q = quote\nexports.s = del\nexports.samp = inlineCode\nexports.select = select\nexports.strike = del\nexports.strong = strong\nexports.summary = paragraph\nexports.table = table\nexports.td = cell\nexports.textarea = textarea\nexports.th = cell\nexports.tr = row\nexports.tt = inlineCode\nexports.u = emphasis\nexports.ul = list\nexports.var = inlineCode\nexports.video = media\nexports.wbr = wbr\nexports.xmp = code\n\nfunction ignore() {}\n",
    "mapping": {
      "../util/wrap-children": "{223F46C0-90EF-49AD-8771-6E496344BDE3}",
      "./base": "{3FC4D3C0-9C9D-41F7-8113-C95562BCF7B3}",
      "./blockquote": "{5DD90555-0502-406E-BF66-5AB0FA5E259A}",
      "./break": "{BD6EE6CA-2609-4AF3-B2C6-7CD2AA1E1E36}",
      "./table-cell": "{63DAB899-33F0-4479-AD3D-AA5044F90BD5}",
      "./code": "{13E84091-5BD4-4327-8C5A-E4C62D553821}",
      "./comment": "{CA81AC0D-0FF5-4A39-87A1-5315DC4B1310}",
      "./dl": "{DA8AD4CC-B0F4-43DB-AC3B-04A86116200E}",
      "./delete": "{18B6EDFB-C9DA-4C89-8602-264CBF0CD670}",
      "./emphasis": "{FAFE5B14-A911-450C-A81A-70336CC812AC}",
      "./heading": "{741DECBC-71B6-4406-A978-10C846D01E77}",
      "./iframe": "{78080BA9-FEF4-4122-94DF-F22C08FAFBF0}",
      "./image": "{2BB248F8-1AD3-42AA-8303-CEAC703B5D4C}",
      "./inline-code": "{CCEFD9B2-6B2C-42D6-B8B1-760055494409}",
      "./input": "{E7A4103F-DECF-4058-BFD1-086E789D7FB9}",
      "./link": "{DCC69F67-7032-4A0D-9E31-ECE320D3C212}",
      "./list": "{CB8F2307-1221-47C1-85D5-0F2508463971}",
      "./list-item": "{72E71174-C27A-48DA-91BC-FD90EFF4EEEC}",
      "./media": "{E605F3A1-2FA8-4F3D-BD1E-AD2DE568FB39}",
      "./paragraph": "{F0FAD8B2-03C1-439C-BA50-CBBF2114094F}",
      "./q": "{BC172B2F-2E3B-46EC-A31F-4D2886F90F77}",
      "./root": "{3E78622B-A17E-4EA2-9E74-5EA73F6EAB40}",
      "./table-row": "{D351169B-4FD8-4452-B283-6BDEC777B169}",
      "./select": "{EA9B9AF8-B6DB-430C-92BD-7FA504E7C871}",
      "./strong": "{AAFC5C95-5D21-454E-A999-F24182DBFFC6}",
      "./table": "{DA02DE62-336D-405C-AA36-7A869901DF33}",
      "./text": "{2340AD6F-BC1D-4A60-9FE6-D7C1F0F08825}",
      "./textarea": "{47BF37A3-7D3C-4E77-A179-B3D5FF129BEC}",
      "./thematic-break": "{4DAB03E3-E0EB-488C-BD6E-1996B2FBA0C8}",
      "./wbr": "{D7C8B167-06AC-4F31-B099-FC9AF9D95B7A}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/index.js"
  },
  "{223F46C0-90EF-49AD-8771-6E496344BDE3}": {
    "source": "'use strict'\n\nmodule.exports = wrapped\n\nvar all = require('../all')\nvar wrap = require('./wrap')\n\nfunction wrapped(h, node) {\n  return wrap(all(h, node))\n}\n",
    "mapping": {
      "./wrap": "{A89D1FEA-857B-4B9D-8E90-641FE23C7390}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/wrap-children.js"
  },
  "{A89D1FEA-857B-4B9D-8E90-641FE23C7390}": {
    "source": "'use strict'\n\nmodule.exports = wrap\n\nwrap.needed = needed\n\nvar extend = require('extend')\nvar phrasing = require('mdast-util-phrasing')\n\nfunction wrap(nodes) {\n  return runs(nodes, onphrasing)\n\n  function onphrasing(nodes) {\n    var head = nodes[0]\n\n    if (\n      nodes.length === 1 &&\n      head.type === 'text' &&\n      (head.value === ' ' || head.value === '\\n')\n    ) {\n      return []\n    }\n\n    return {type: 'paragraph', children: nodes}\n  }\n}\n\n// Wrap all runs of mdast phrasing content in `paragraph` nodes.\nfunction runs(nodes, onphrasing, onnonphrasing) {\n  var nonphrasing = onnonphrasing || identity\n  var result = []\n  var flattened = flatten(nodes)\n  var length = flattened.length\n  var index = -1\n  var node\n  var queue\n\n  while (++index < length) {\n    node = flattened[index]\n\n    if (phrasing(node)) {\n      if (queue === undefined) {\n        queue = []\n      }\n\n      queue.push(node)\n    } else {\n      add()\n      result = result.concat(nonphrasing(node))\n    }\n  }\n\n  add()\n\n  return result\n\n  function add() {\n    if (queue !== undefined) {\n      result = result.concat(onphrasing(queue))\n    }\n\n    queue = undefined\n  }\n}\n\n// Flatten a list of nodes.\nfunction flatten(nodes) {\n  var length = nodes.length\n  var index = -1\n  var flattened = []\n  var node\n\n  while (++index < length) {\n    node = nodes[index]\n\n    // Straddling: some elements are *weird*.\n    // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.\n    // See: <https://html.spec.whatwg.org/#paragraphs>.\n    // Paragraphs are the weirdest of them all.\n    // See the straddling fixture for more info!\n    // `ins` is ignored in mdast, so we don’t need to worry about that.\n    // `map` maps to its content, so we don’t need to worry about that either.\n    // `del` maps to `delete` and `a` to `link`, so we do handle those.\n    // What we’ll do is split `node` over each of its children.\n    if (\n      (node.type === 'delete' || node.type === 'link') &&\n      needed(node.children)\n    ) {\n      flattened = flattened.concat(split(node))\n    } else {\n      flattened.push(node)\n    }\n  }\n\n  return flattened\n}\n\n// Check if there are non-phrasing mdast nodes returned.\n// This is needed if a fragment is given, which could just be a sentence, and\n// doesn’t need a wrapper paragraph.\nfunction needed(nodes) {\n  var length = nodes.length\n  var index = -1\n  var node\n  var children\n\n  while (++index < length) {\n    node = nodes[index]\n    children = node.children\n\n    if (!phrasing(node) || (children && needed(children))) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction split(node) {\n  return runs(node.children, onphrasing, onnonphrasing)\n\n  // Use `child`, add `parent` as its first child, put the original children\n  // into `parent`.\n  function onnonphrasing(child) {\n    var parent = extend(true, {}, shallow(node))\n    var copy = shallow(child)\n\n    copy.children = [parent]\n    parent.children = child.children\n\n    return copy\n  }\n\n  // Use `parent`, put the phrasing run inside it.\n  function onphrasing(nodes) {\n    var parent = extend(true, {}, shallow(node))\n    parent.children = nodes\n    return parent\n  }\n}\n\n// Shallow copy of a node, excluding its children.\nfunction shallow(node) {\n  var copy = {}\n  var key\n\n  for (key in node) {\n    if (key !== 'children') {\n      copy[key] = node[key]\n    }\n  }\n\n  return copy\n}\n\nfunction identity(n) {\n  return n\n}\n",
    "mapping": {
      "mdast-util-phrasing": "{69A96A62-1545-4078-8D80-852AE0D423CC}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/wrap.js"
  },
  "{69A96A62-1545-4078-8D80-852AE0D423CC}": {
    "source": "'use strict'\n\nvar convert = require('unist-util-is/convert')\n\nvar isPhrasing = convert([\n  'break',\n  'delete',\n  'emphasis',\n  'footnote',\n  'footnoteReference',\n  'image',\n  'imageReference',\n  'inlineCode',\n  'link',\n  'linkReference',\n  'strong',\n  'text'\n])\n\nisPhrasing.displayName = 'isPhrasing'\nmodule.exports = isPhrasing\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-phrasing/index.js"
  },
  "{5D3D1266-7CD0-4478-A9E9-772F7C66718C}": {
    "source": "{\n  \"_from\": \"mdast-util-phrasing@^2.0.0\",\n  \"_id\": \"mdast-util-phrasing@2.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-G1rNlW/sViwzbBYD7+k3mKGtoWV2v4GBFky66OYHfktHe7Hg9R+hH4xpeoOtjYiwTvle8C8wlKMpgqPCkaeK8Q==\",\n  \"_location\": \"/mdast-util-phrasing\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"mdast-util-phrasing@^2.0.0\",\n    \"name\": \"mdast-util-phrasing\",\n    \"escapedName\": \"mdast-util-phrasing\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mdast-util-phrasing/-/mdast-util-phrasing-2.0.0.tgz\",\n  \"_shasum\": \"57e61f2be908be9f5fce54fcc2fa593687986267\",\n  \"_spec\": \"mdast-util-phrasing@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Victor Felder\",\n    \"email\": \"victor@draft.li\",\n    \"url\": \"https://draft.li\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/mdast-util-phrasing/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Victor Felder\",\n      \"email\": \"victor@draft.li\",\n      \"url\": \"https://draft.li\"\n    },\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"unist-util-is\": \"^4.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"mdast utility to check if a node is phrasing content\",\n  \"devDependencies\": {\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"xo\": \"^0.26.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/mdast-util-phrasing#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast=util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"phrasing\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"mdast-util-phrasing\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/mdast-util-phrasing.git\"\n  },\n  \"scripts\": {\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"2.0.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"rules\": {\n      \"no-multi-assign\": \"off\"\n    }\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-phrasing/package.json"
  },
  "{3FC4D3C0-9C9D-41F7-8113-C95562BCF7B3}": {
    "source": "'use strict'\n\nmodule.exports = base\n\nfunction base(h, node) {\n  if (!h.baseFound) {\n    h.frozenBaseUrl = node.properties.href || null\n    h.baseFound = true\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/base.js"
  },
  "{5DD90555-0502-406E-BF66-5AB0FA5E259A}": {
    "source": "'use strict'\n\nmodule.exports = blockquote\n\nvar wrapChildren = require('../util/wrap-children')\n\nfunction blockquote(h, node) {\n  return h(node, 'blockquote', wrapChildren(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/blockquote.js"
  },
  "{BD6EE6CA-2609-4AF3-B2C6-7CD2AA1E1E36}": {
    "source": "'use strict'\n\nmodule.exports = br\n\nfunction br(h, node) {\n  return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/break.js"
  },
  "{63DAB899-33F0-4479-AD3D-AA5044F90BD5}": {
    "source": "'use strict'\n\nmodule.exports = cell\n\nvar all = require('../all')\n\nfunction cell(h, node) {\n  var wrap = h.wrapText\n  var result\n\n  h.wrapText = false\n  result = h(node, 'tableCell', all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/table-cell.js"
  },
  "{13E84091-5BD4-4327-8C5A-E4C62D553821}": {
    "source": "'use strict'\n\nmodule.exports = code\n\nvar is = require('hast-util-is-element')\nvar has = require('hast-util-has-property')\nvar toText = require('hast-util-to-text')\nvar trim = require('trim-trailing-lines')\nvar wrapText = require('../util/wrap-text')\n\nvar prefix = 'language-'\n\nfunction code(h, node) {\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var child\n  var classList\n  var className\n  var lang\n\n  if (node.tagName === 'pre') {\n    while (++index < length) {\n      child = children[index]\n\n      if (is(child, 'code') && has(child, 'className')) {\n        classList = child.properties.className\n        break\n      }\n    }\n  }\n\n  if (classList) {\n    length = classList.length\n    index = -1\n\n    while (++index < length) {\n      className = classList[index]\n\n      if (className.slice(0, prefix.length) === prefix) {\n        lang = className.slice(prefix.length)\n        break\n      }\n    }\n  }\n\n  return h(\n    node,\n    'code',\n    {lang: lang || null, meta: null},\n    trim(wrapText(h, toText(node)))\n  )\n}\n",
    "mapping": {
      "hast-util-has-property": "{9C1BC51C-D354-42CD-A756-AF62A3A9CABF}",
      "hast-util-to-text": "{635E9C40-0523-4ABE-8D05-3CD6119AE4D3}",
      "trim-trailing-lines": "{DB411599-F8A8-44A3-A78B-89A1C0257D7A}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/code.js"
  },
  "{9C1BC51C-D354-42CD-A756-AF62A3A9CABF}": {
    "source": "'use strict'\n\nvar own = {}.hasOwnProperty\n\nmodule.exports = hasProperty\n\n// Check if `node` has a set `name` property.\nfunction hasProperty(node, name) {\n  var props\n  var value\n\n  if (!node || !name || typeof node !== 'object' || node.type !== 'element') {\n    return false\n  }\n\n  props = node.properties\n  value = props && own.call(props, name) && props[name]\n\n  return value !== null && value !== undefined && value !== false\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-has-property/index.js"
  },
  "{49736ECF-69C9-4B9E-A088-9F4F11ACF7BC}": {
    "source": "{\n  \"_from\": \"hast-util-has-property@^1.0.0\",\n  \"_id\": \"hast-util-has-property@1.0.4\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-ghHup2voGfgFoHMGnaLHOjbYFACKrRh9KFttdCzMCbFoBMJXiNi2+XTrPP8+q6cDJM/RSqlCfVWrjp1H201rZg==\",\n  \"_location\": \"/hast-util-has-property\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-has-property@^1.0.0\",\n    \"name\": \"hast-util-has-property\",\n    \"escapedName\": \"hast-util-has-property\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-has-property/-/hast-util-has-property-1.0.4.tgz\",\n  \"_shasum\": \"9f137565fad6082524b382c1e7d7d33ca5059f36\",\n  \"_spec\": \"hast-util-has-property@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-has-property/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"hast utility to check if a node has a property\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-has-property#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"element\",\n    \"property\",\n    \"check\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-has-property\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-has-property.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s hastUtilHasProperty > hast-util-has-property.js\",\n    \"build-mangle\": \"browserify . -s hastUtilHasProperty -p tinyify > hast-util-has-property.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.0.4\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"hast-util-has-property.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-has-property/package.json"
  },
  "{635E9C40-0523-4ABE-8D05-3CD6119AE4D3}": {
    "source": "'use strict'\n\nvar repeat = require('repeat-string')\nvar is = require('hast-util-is-element')\nvar findAfter = require('unist-util-find-after')\n\nmodule.exports = toText\n\n// Methods.\nvar min = Math.min\nvar max = Math.max\n\n// White space codes.\nvar tab = 0x9\nvar space = 0x20\nvar zeroWidthSpace = 0x200b\n\n// Bidi control characters codes.\nvar alm = 0x61c\nvar ltr = 0x200e\nvar rtl = 0x200f\nvar lre = 0x202a\nvar rle = 0x202b\nvar pdf = 0x202c\nvar lro = 0x202d\nvar rlo = 0x202e\nvar lri = 0x2066\nvar rli = 0x2067\nvar fsi = 0x2068\nvar pdi = 0x2069\n\n// Characters.\nvar tabChar = '\\t'\nvar lineFeedChar = '\\n'\nvar spaceChar = ' '\n\n// Implementation of the `innerText` getter:\n// <https://html.spec.whatwg.org/#the-innertext-idl-attribute>\n// Note that we act as if `node` is being rendered, and as if we’re a\n// CSS-supporting user agent.\nfunction toText(node) {\n  var children = node.children || []\n  var length = children.length\n  var block = blockOrCaption(node)\n  var whiteSpace = inferWhiteSpace(node, {})\n  var index = -1\n  var results\n  var current\n  var result\n  var value\n  var count\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (node.type === 'text' || node.type === 'comment') {\n    return collectText(node, {\n      whiteSpace: whiteSpace,\n      breakBefore: true,\n      breakAfter: true\n    })\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  results = []\n\n  // 3.  For each child node node of this element:\n  while (++index < length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    current = innerTextCollection(children[index], index, node, {\n      whiteSpace: whiteSpace,\n      breakBefore: index === 0 ? block : false,\n      breakAfter: index === length - 1 ? block : is(children[index + 1], 'br')\n    })\n\n    // 3.2. For each item item in current, append item to results.\n    results = results.concat(current)\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  index = -1\n  length = results.length\n  result = []\n\n  while (++index < length) {\n    value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) {\n        count = value\n      }\n    } else if (value !== '') {\n      if (count) {\n        result.push(repeat(lineFeedChar, count))\n      }\n\n      count = 0\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n// <https://html.spec.whatwg.org/#inner-text-collection-steps>\nfunction innerTextCollection(node, index, parent, options) {\n  if (node.type === 'element') {\n    return collectElement(node, index, parent, options)\n  }\n\n  if (node.type === 'text') {\n    return [\n      options.whiteSpace === 'normal'\n        ? collectText(node, options)\n        : collectPreText(node, options)\n    ]\n  }\n\n  return []\n}\n\n// Collect an element.\nfunction collectElement(node, index, parent, options) {\n  // First we infer the `white-space` property.\n  var whiteSpace = inferWhiteSpace(node, options)\n  var children = node.children || []\n  var length = children.length\n  var offset = -1\n  var items = []\n  var current\n  var prefix\n  var suffix\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (is(node, 'br')) {\n    suffix = lineFeedChar\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = lineFeedChar\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (is(node, 'p')) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++offset < length) {\n    current = innerTextCollection(children[offset], offset, node, {\n      whiteSpace: whiteSpace,\n      breakBefore: offset === 0 ? prefix : false,\n      breakAfter:\n        offset === length - 1 ? suffix : is(children[offset + 1], 'br')\n    })\n\n    items = items.concat(current)\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push(tabChar)\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) {\n    items.unshift(prefix)\n  }\n\n  if (suffix) {\n    items.push(suffix)\n  }\n\n  return items\n}\n\n// 4.  If node is a Text node, then for each CSS text box produced by node,\n//     in content order, compute the text of the box after application of the\n//     CSS `white-space` processing rules and `text-transform` rules, set\n//     items to the list of the resulting strings, and return items.\n//     The CSS `white-space` processing rules are slightly modified:\n//     collapsible spaces at the end of lines are always collapsed, but they\n//     are only removed if the line is the last line of the block, or it ends\n//     with a br element.\n//     Soft hyphens should be preserved.\n//\n//     Note: See `collectText` and `collectPreText`.\n//     Note: we don’t deal with `text-transform`, no element has that by\n//     default.\n//\n// See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\nfunction collectText(node, options) {\n  var breakBefore = options.breakBefore\n  var breakAfter = options.breakAfter\n  var value = String(node.value)\n  var index = -1\n  var length = value.length\n  var lines = []\n  var result = []\n  var lineStart\n  var lineEnd\n  var line\n  var nextLine\n  var queue\n\n  lineStart = 0\n  lineEnd = value.indexOf(lineFeedChar)\n  lineEnd = lineEnd === -1 ? value.length : lineEnd\n\n  while (lineEnd !== -1) {\n    line = value.slice(lineStart, lineEnd)\n\n    // [...] ignoring bidi formatting characters (characters with the\n    // Bidi_Control property [UAX9]) as if they were not there.\n    line = removeBidiControlCharacters(line)\n\n    // Any sequence of collapsible spaces and tabs immediately preceding or\n    // following a segment break is removed.\n    line = trimAndcollapseSpacesAndTabs(line, breakBefore, breakAfter)\n\n    // Add the line.\n    lines.push(line)\n\n    // Stop.\n    if (lineEnd === value.length) {\n      break\n    }\n\n    lineStart = lineEnd + 1\n    lineEnd = value.indexOf(lineFeedChar, lineStart)\n    lineEnd = lineEnd === -1 ? value.length : lineEnd\n  }\n\n  index = -1\n  length = lines.length\n  queue = ''\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  while (++index < length) {\n    line = lines[index]\n    nextLine = lines[index + 1] || ''\n\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      line.charCodeAt(line.length - 1) === zeroWidthSpace ||\n      nextLine.charCodeAt(0) === zeroWidthSpace\n    ) {\n      result.push(line)\n      queue = ''\n      continue\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    if (line) {\n      if (queue) {\n        result.push(queue)\n      }\n\n      result.push(line)\n      queue = spaceChar\n    }\n  }\n\n  return result.join('')\n}\n\nfunction collectPreText(node) {\n  return String(node.value)\n}\n\nfunction removeBidiControlCharacters(value) {\n  var index = -1\n  var length = value.length\n  var result = ''\n\n  while (++index < length) {\n    if (isBidiControlCharacter(value.charCodeAt(index))) {\n      continue\n    }\n\n    result += value.charAt(index)\n  }\n\n  return result\n}\n\n// 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n// 4.  Any collapsible space immediately following another collapsible\n//     space—even one outside the boundary of the inline containing that\n//     space, provided both spaces are within the same inline formatting\n//     context—is collapsed to have zero advance width. (It is invisible,\n//     but retains its soft wrap opportunity, if any.)\nfunction trimAndcollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  var start = 0\n  var end\n  var length = value.length\n  var result = []\n  var char\n\n  // Move forward past initial white space.\n  while (start <= length) {\n    char = value.charCodeAt(start)\n\n    if (char !== space && char !== tab) {\n      break\n    }\n\n    start++\n  }\n\n  // If we’re not directly after a segment break, but there was white space,\n  // add an empty value that will be turned into a space.\n  if (start !== 0 && !breakBefore) {\n    result.push('')\n  }\n\n  end = next(start - 1)\n\n  while (start < length) {\n    end = end === -1 ? length : end\n    result.push(value.slice(start, end))\n    start = end\n\n    while (start <= length) {\n      char = value.charCodeAt(start)\n\n      if (char !== space && char !== tab) {\n        break\n      }\n\n      start++\n    }\n\n    // If we reached the end, there was trailing white space, and there’s no\n    // segment break after this node, add an empty value that will be turned\n    // into a space.\n    if (start === length && start !== end && !breakAfter) {\n      result.push('')\n    }\n\n    end = next(start)\n  }\n\n  return result.join(' ')\n\n  function next(index) {\n    var spaceIndex = value.indexOf(spaceChar, index + 1)\n    var tabIndex = value.indexOf(tabChar, index + 1)\n    var fn = spaceIndex === -1 || tabIndex === -1 ? max : min\n    return fn(spaceIndex, tabIndex)\n  }\n}\n\n// We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\nfunction inferWhiteSpace(node, options) {\n  var props = node.properties || {}\n  var inherit = options.whiteSpace || 'normal'\n\n  switch (node.tagName) {\n    case 'listing':\n    case 'plaintext':\n    case 'xmp':\n      return 'pre'\n    case 'nobr':\n      return 'nowrap'\n    case 'pre':\n      return props.wrap ? 'pre-wrap' : 'pre'\n    case 'td':\n    case 'th':\n      return props.noWrap ? 'nowrap' : inherit\n    case 'textarea':\n      return 'pre-wrap'\n    default:\n      return inherit\n  }\n}\n\nfunction isBidiControlCharacter(char) {\n  switch (char) {\n    case alm:\n    case ltr:\n    case rtl:\n    case lre:\n    case rle:\n    case pdf:\n    case lro:\n    case rlo:\n    case lri:\n    case rli:\n    case fsi:\n    case pdi:\n      return true\n    default:\n      return false\n  }\n}\n\nfunction cell(node) {\n  return is(node, ['th', 'td'])\n}\n\nfunction row(node) {\n  return is(node, ['tr'])\n}\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nfunction blockOrCaption(node) {\n  return is(node, [\n    'caption', // `table-caption`\n    // Page\n    'html',\n    'body',\n    // Flow content\n    'address',\n    'blockquote',\n    'center', // Legacy\n    'dialog',\n    'div',\n    'figure',\n    'figcaption',\n    'footer',\n    'form,',\n    'header',\n    'hr',\n    'legend',\n    'listing', // Legacy\n    'main',\n    'p',\n    'plaintext', // Legacy\n    'pre',\n    'xmp', // Legacy\n    // Sections and headings\n    'article',\n    'aside',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'hgroup',\n    'nav',\n    'section',\n    // Lists\n    'dir', // Legacy\n    'dd',\n    'dl',\n    'dt',\n    'menu',\n    'ol',\n    'ul'\n  ])\n}\n\n// Note that we don’t need to include void elements here as they don’t have text.\n//\n// See: <https://github.com/wooorm/html-void-elements>\nfunction notRendered(node) {\n  var properties = node.properties || {}\n\n  return (\n    // List from: <https://html.spec.whatwg.org/#hidden-elements>\n    is(node, [\n      'datalist',\n      'head',\n      'noembed',\n      'noframes',\n      'rp',\n      'script',\n      'style',\n      'template',\n      'title',\n      // Act as if we support scripting.\n      'noscript'\n    ]) ||\n    // Hidden attribute.\n    properties.hidden ||\n    // From: <https://html.spec.whatwg.org/#flow-content-3>\n    (is(node, 'dialog') && !properties.open)\n  )\n}\n",
    "mapping": {
      "unist-util-find-after": "{D1A2C1CD-8678-42C4-A13E-D7723C36F74B}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-text/index.js"
  },
  "{7DA4B6BB-E670-448D-92A2-BB6FC955CC2B}": {
    "source": "{\n  \"_from\": \"hast-util-to-text@^2.0.0\",\n  \"_id\": \"hast-util-to-text@2.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-idXqFGmKInLKcFMbLvh0fldmV94o+aOdXL/z5H5XhPhUp/5vzycu7i15c8V9kC6W3XgGHg2uuiIcRJlWtESVfQ==\",\n  \"_location\": \"/hast-util-to-text\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"hast-util-to-text@^2.0.0\",\n    \"name\": \"hast-util-to-text\",\n    \"escapedName\": \"hast-util-to-text\",\n    \"rawSpec\": \"^2.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^2.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/hast-util-to-text/-/hast-util-to-text-2.0.0.tgz\",\n  \"_shasum\": \"c59afa8798145c10d40c2f34f92900f4dfc8ac69\",\n  \"_spec\": \"hast-util-to-text@^2.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/hast-util-to-text/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"hast-util-is-element\": \"^1.0.0\",\n    \"repeat-string\": \"^1.0.0\",\n    \"unist-util-find-after\": \"^3.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"hast utility to get the plain-text value of a node according to the `innerText` algorithm\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"hastscript\": \"^5.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"unist-builder\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/hast-util-to-text#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"hast\",\n    \"hast-util\",\n    \"util\",\n    \"utility\",\n    \"html\",\n    \"string\",\n    \"content\",\n    \"text\",\n    \"innertext\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"hast-util-to-text\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/hast-util-to-text.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s hastUtilToText -o hast-util-to-text.js\",\n    \"build-mangle\": \"browserify . -s hastUtilToText -p tinyify -o hast-util-to-text.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"2.0.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"hast-util-to-text.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/hast-util-to-text/package.json"
  },
  "{D1A2C1CD-8678-42C4-A13E-D7723C36F74B}": {
    "source": "'use strict'\n\nvar convert = require('unist-util-is/convert')\n\nmodule.exports = findAfter\n\nfunction findAfter(parent, index, test) {\n  var is = convert(test)\n  var children\n  var child\n  var length\n\n  if (!parent || !parent.type || !parent.children) {\n    throw new Error('Expected parent node')\n  }\n\n  children = parent.children\n  length = children.length\n\n  if (index && index.type) {\n    index = children.indexOf(index)\n  }\n\n  if (isNaN(index) || index < 0 || index === Infinity) {\n    throw new Error('Expected positive finite index or child node')\n  }\n\n  while (++index < length) {\n    child = children[index]\n\n    if (is(child, index, parent)) {\n      return child\n    }\n  }\n\n  return null\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/unist-util-find-after/index.js"
  },
  "{72618893-F668-431A-8BF4-599157850EBD}": {
    "source": "{\n  \"_from\": \"unist-util-find-after@^3.0.0\",\n  \"_id\": \"unist-util-find-after@3.0.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-ojlBqfsBftYXExNu3+hHLfJQ/X1jYY/9vdm4yZWjIbf0VuWF6CRufci1ZyoD/wV2TYMKxXUoNuoqwy+CkgzAiQ==\",\n  \"_location\": \"/unist-util-find-after\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"unist-util-find-after@^3.0.0\",\n    \"name\": \"unist-util-find-after\",\n    \"escapedName\": \"unist-util-find-after\",\n    \"rawSpec\": \"^3.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^3.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-text\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/unist-util-find-after/-/unist-util-find-after-3.0.0.tgz\",\n  \"_shasum\": \"5c65fcebf64d4f8f496db46fa8fd0fbf354b43e6\",\n  \"_spec\": \"unist-util-find-after@^3.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-text\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/unist-util-find-after/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {\n    \"unist-util-is\": \"^4.0.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"unist utility to find a node after another node\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark\": \"^11.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/unist-util-find-after#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"unist-util\",\n    \"util\",\n    \"utility\",\n    \"node\",\n    \"find\",\n    \"after\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"unist-util-find-after\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/unist-util-find-after.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s unistUtilFindAfter -o unist-util-find-after.js\",\n    \"build-mangle\": \"browserify . -s unistUtilFindAfter -p tinyify -o unist-util-find-after.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"3.0.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignore\": [\n      \"unist-util-find-after.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/unist-util-find-after/package.json"
  },
  "{DB411599-F8A8-44A3-A78B-89A1C0257D7A}": {
    "source": "'use strict'\n\nmodule.exports = trimTrailingLines\n\nvar line = '\\n'\n\n// Remove final newline characters from `value`.\nfunction trimTrailingLines(value) {\n  var val = String(value)\n  var index = val.length\n\n  while (val.charAt(--index) === line) {\n    // Empty\n  }\n\n  return val.slice(0, index + 1)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/trim-trailing-lines/index.js"
  },
  "{97F62517-4BFF-4D55-891D-AE3C9A0BA157}": {
    "source": "{\n  \"_from\": \"trim-trailing-lines@^1.1.0\",\n  \"_id\": \"trim-trailing-lines@1.1.3\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-4ku0mmjXifQcTVfYDfR5lpgV7zVqPg6zV9rdZmwOPqq0+Zq19xDqEgagqVbc4pOOShbncuAOIs59R3+3gcF3ZA==\",\n  \"_location\": \"/trim-trailing-lines\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"trim-trailing-lines@^1.1.0\",\n    \"name\": \"trim-trailing-lines\",\n    \"escapedName\": \"trim-trailing-lines\",\n    \"rawSpec\": \"^1.1.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.1.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\",\n    \"/remark-parse\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/trim-trailing-lines/-/trim-trailing-lines-1.1.3.tgz\",\n  \"_shasum\": \"7f0739881ff76657b7776e10874128004b625a94\",\n  \"_spec\": \"trim-trailing-lines@^1.1.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wooorm/trim-trailing-lines/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"Remove final line feeds from a string\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.0.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.25.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"github\",\n    \"url\": \"https://github.com/sponsors/wooorm\"\n  },\n  \"homepage\": \"https://github.com/wooorm/trim-trailing-lines#readme\",\n  \"keywords\": [\n    \"trim\",\n    \"final\",\n    \"line\",\n    \"newline\",\n    \"characters\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"trim-trailing-lines\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wooorm/trim-trailing-lines.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s trimTrailingLines -o trim-trailing-lines.js\",\n    \"build-mangle\": \"browserify . -s trimTrailingLines -p tinyify -o trim-trailing-lines.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.1.3\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignores\": [\n      \"trim-trailing-lines.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/trim-trailing-lines/package.json"
  },
  "{CA81AC0D-0FF5-4A39-87A1-5315DC4B1310}": {
    "source": "'use strict'\n\nmodule.exports = comment\n\nvar wrapText = require('../util/wrap-text')\n\nfunction comment(h, node) {\n  return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/comment.js"
  },
  "{DA8AD4CC-B0F4-43DB-AC3B-04A86116200E}": {
    "source": "'use strict'\n\nmodule.exports = dataList\n\nvar is = require('hast-util-is-element')\nvar wrapListItems = require('../util/wrap-list-items')\nvar spread = require('../util/list-items-spread')\n\nfunction dataList(h, node) {\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var clean = []\n  var groups = []\n  var content\n  var breakpoint\n  var title\n  var child\n  var group = {titles: [], definitions: []}\n\n  // Unwrap `<div>`s\n  while (++index < length) {\n    child = children[index]\n    clean = clean.concat(is(child, 'div') ? child.children : child)\n  }\n\n  length = clean.length\n  index = -1\n\n  // Group titles and definitions.\n  while (++index < length) {\n    child = clean[index]\n    title = is(child, 'dt')\n\n    if (title && breakpoint) {\n      groups.push(group)\n      group = {titles: [], definitions: []}\n    }\n\n    group[title ? 'titles' : 'definitions'].push(child)\n    breakpoint = is(child, 'dd')\n  }\n\n  groups.push(group)\n\n  // Create items.\n  length = groups.length\n  index = -1\n  content = []\n\n  while (++index < length) {\n    group = groups[index]\n    group = handle(h, group.titles).concat(handle(h, group.definitions))\n\n    if (group.length !== 0) {\n      content.push({\n        type: 'listItem',\n        spread: group.length > 1,\n        checked: null,\n        children: group\n      })\n    }\n  }\n\n  // Create a list if there are items.\n  if (content.length !== 0) {\n    return h(\n      node,\n      'list',\n      {ordered: false, start: null, spread: spread(content)},\n      content\n    )\n  }\n}\n\nfunction handle(h, category) {\n  var nodes = wrapListItems(h, {children: category})\n\n  if (nodes.length === 0) {\n    return []\n  }\n\n  if (nodes.length === 1) {\n    return nodes[0].children\n  }\n\n  return [\n    {\n      type: 'list',\n      ordered: false,\n      start: null,\n      spread: spread(nodes),\n      children: nodes\n    }\n  ]\n}\n",
    "mapping": {
      "../util/wrap-list-items": "{A6133A92-8DD2-413C-8320-C3574FBEE33F}",
      "../util/list-items-spread": "{B872081E-A485-4E03-AA7C-47B9527BDAF5}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/dl.js"
  },
  "{A6133A92-8DD2-413C-8320-C3574FBEE33F}": {
    "source": "'use strict'\n\nmodule.exports = wrapped\n\nvar all = require('../all')\n\nfunction wrapped(h, node) {\n  var children = all(h, node)\n  var length = children.length\n  var index = -1\n  var child\n\n  while (++index < length) {\n    child = children[index]\n\n    if (child.type !== 'listItem') {\n      children[index] = {\n        type: 'listItem',\n        spread: false,\n        checked: null,\n        children: [child]\n      }\n    }\n  }\n\n  return children\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js"
  },
  "{B872081E-A485-4E03-AA7C-47B9527BDAF5}": {
    "source": "'use strict'\n\nmodule.exports = spread\n\nfunction spread(children) {\n  var length = children.length\n  var index = -1\n\n  if (length > 1) {\n    while (++index < length) {\n      if (children[index].spread) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/list-items-spread.js"
  },
  "{18B6EDFB-C9DA-4C89-8602-264CBF0CD670}": {
    "source": "'use strict'\n\nmodule.exports = strikethrough\n\nvar all = require('../all')\n\nfunction strikethrough(h, node) {\n  return h(node, 'delete', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/delete.js"
  },
  "{FAFE5B14-A911-450C-A81A-70336CC812AC}": {
    "source": "'use strict'\n\nmodule.exports = emphasis\n\nvar all = require('../all')\n\nfunction emphasis(h, node) {\n  return h(node, 'emphasis', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/emphasis.js"
  },
  "{741DECBC-71B6-4406-A978-10C846D01E77}": {
    "source": "'use strict'\n\nmodule.exports = heading\n\nvar all = require('../all')\n\nfunction heading(h, node) {\n  var rank = Number(node.tagName.charAt(1))\n  var wrap = h.wrapText\n  var result\n\n  /* istanbul ignore next - `else` shouldn’t happen, of course… */\n  rank = rank || 1\n\n  h.wrapText = false\n  result = h(node, 'heading', {depth: rank}, all(h, node))\n  h.wrapText = wrap\n\n  return result\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/heading.js"
  },
  "{78080BA9-FEF4-4122-94DF-F22C08FAFBF0}": {
    "source": "'use strict'\n\nmodule.exports = iframe\n\nvar resolve = require('../util/resolve')\nvar wrapText = require('../util/wrap-text')\n\nfunction iframe(h, node) {\n  var src = node.properties.src\n  var title = node.properties.title\n\n  // Only create a link if there is a title.\n  // We can’t use the content of the frame because conforming HTML parsers treat\n  // it as text, whereas legacy parsers treat it as HTML, so it will likely\n  // contain tags that will show up in text.\n  if (src && title) {\n    return {\n      type: 'link',\n      title: null,\n      url: resolve(h, src),\n      children: [{type: 'text', value: wrapText(h, title)}]\n    }\n  }\n}\n",
    "mapping": {
      "../util/resolve": "{8778A910-7E04-49E2-902C-DE1C665C1606}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/iframe.js"
  },
  "{8778A910-7E04-49E2-902C-DE1C665C1606}": {
    "source": "'use strict'\n\nmodule.exports = resolve\n\nfunction resolve(h, url) {\n  if (url === null || url === undefined) {\n    return ''\n  }\n\n  /* istanbul ignore next - ignored for older Node */\n  if (h.frozenBaseUrl && typeof URL !== 'undefined') {\n    return String(new URL(url, h.frozenBaseUrl))\n  }\n\n  return url\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/resolve.js"
  },
  "{2BB248F8-1AD3-42AA-8303-CEAC703B5D4C}": {
    "source": "'use strict'\n\nmodule.exports = image\n\nvar resolve = require('../util/resolve')\n\nfunction image(h, node) {\n  var props = {\n    url: resolve(h, node.properties.src),\n    title: node.properties.title || null,\n    alt: node.properties.alt || null\n  }\n\n  return h(node, 'image', props)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/image.js"
  },
  "{CCEFD9B2-6B2C-42D6-B8B1-760055494409}": {
    "source": "'use strict'\n\nmodule.exports = inlineCode\n\nvar toText = require('hast-util-to-text')\nvar wrapText = require('../util/wrap-text')\n\nfunction inlineCode(h, node) {\n  return h(node, 'inlineCode', wrapText(h, toText(node)))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/inline-code.js"
  },
  "{E7A4103F-DECF-4058-BFD1-086E789D7FB9}": {
    "source": "'use strict'\n\nvar repeat = require('repeat-string')\nvar is = require('hast-util-is-element')\nvar resolve = require('../util/resolve')\nvar findSelectedOptions = require('../util/find-selected-options')\nvar wrapText = require('../util/wrap-text')\n\nmodule.exports = input\n\n// eslint-disable-next-line complexity\nfunction input(h, node) {\n  var byId = h.nodeById\n  var props = node.properties\n  var value = props.value || props.placeholder\n  var list = props.list\n  var type = props.type\n  var values = []\n  var length\n  var index\n  var results\n  var url\n  var text\n\n  if (props.disabled || props.type === 'hidden' || props.type === 'file') {\n    return\n  }\n\n  if (type === 'checkbox' || type === 'radio') {\n    return {\n      type: 'text',\n      value: wrapText(h, h[props.checked ? 'checked' : 'unchecked'])\n    }\n  }\n\n  if (type === 'image' && props.alt) {\n    values = [[props.alt]]\n  } else if (value) {\n    values = [[value]]\n  } else if (\n    list &&\n    type !== 'password' && // `list` is not supported on `password`\n    type !== 'file' && // …or `file`\n    type !== 'submit' && // …or `submit`\n    type !== 'reset' && // …or `reset`\n    type !== 'button' && // …or `button`\n    list in byId &&\n    is(byId[list], 'datalist')\n  ) {\n    values = findSelectedOptions(h, byId[list], props)\n  }\n\n  if (values.length === 0) {\n    return\n  }\n\n  // Passwords don’t support `list`.\n  if (type === 'password') {\n    values[0] = [repeat('•', values[0][0].length)]\n  }\n\n  // Images don’t support `list`.\n  if (type === 'image') {\n    return h(node, 'image', {\n      url: resolve(h, props.src),\n      title: (props.title && wrapText(h, props.title)) || null,\n      alt: wrapText(h, values[0][0])\n    })\n  }\n\n  length = values.length\n  index = -1\n  results = []\n\n  if (type !== 'url' && type !== 'email') {\n    while (++index < length) {\n      value = values[index]\n      results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n    }\n\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n\n  while (++index < length) {\n    value = values[index]\n    text = resolve(h, value[0])\n    url = type === 'email' ? 'mailto:' + text : text\n\n    results.push(\n      h(node, 'link', {title: null, url: wrapText(h, url)}, [\n        {type: 'text', value: wrapText(h, value[1] || text)}\n      ])\n    )\n\n    if (index !== length - 1) {\n      results.push({type: 'text', value: ', '})\n    }\n  }\n\n  return results\n}\n",
    "mapping": {
      "../util/find-selected-options": "{2AF0CFA4-48D1-4450-8F64-1A0294200C95}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/input.js"
  },
  "{2AF0CFA4-48D1-4450-8F64-1A0294200C95}": {
    "source": "'use strict'\n\nvar is = require('hast-util-is-element')\nvar has = require('hast-util-has-property')\nvar toText = require('hast-util-to-text')\nvar wrapText = require('./wrap-text')\n\nmodule.exports = findSelectedOptions\n\nfunction findSelectedOptions(h, node, properties) {\n  var props = properties || node.properties\n  var multiple = props.multiple\n  var size = Math.min(parseInt(props.size, 10), 0) || (multiple ? 4 : 1)\n  var options = findOptions(node)\n  var length = options.length\n  var index = -1\n  var selectedOptions = []\n  var values = []\n  var option\n  var list\n  var content\n  var label\n  var value\n\n  while (++index < length) {\n    option = options[index]\n\n    if (option.properties.selected) {\n      selectedOptions.push(option)\n    }\n  }\n\n  list = selectedOptions.length === 0 ? options : selectedOptions\n  options = list.slice(0, size)\n  length = options.length\n  index = -1\n\n  while (++index < length) {\n    option = options[index]\n    content = wrapText(h, toText(option))\n    label = content || option.properties.label\n    value = option.properties.value || content\n\n    values.push([value, label === value ? null : label])\n  }\n\n  return values\n}\n\nfunction findOptions(node) {\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var results = []\n  var child\n\n  while (++index < length) {\n    child = children[index]\n\n    if (is(child, 'option')) {\n      if (!has(child, 'disabled')) {\n        results.push(child)\n      }\n    } else if ('children' in child) {\n      results = results.concat(findOptions(child))\n    }\n  }\n\n  return results\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/util/find-selected-options.js"
  },
  "{DCC69F67-7032-4A0D-9E31-ECE320D3C212}": {
    "source": "'use strict'\n\nmodule.exports = link\n\nvar all = require('../all')\nvar resolve = require('../util/resolve')\n\nfunction link(h, node) {\n  var props = {\n    title: node.properties.title || null,\n    url: resolve(h, node.properties.href)\n  }\n\n  return h(node, 'link', props, all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/link.js"
  },
  "{CB8F2307-1221-47C1-85D5-0F2508463971}": {
    "source": "'use strict'\n\nmodule.exports = list\n\nvar has = require('hast-util-has-property')\nvar wrapListItems = require('../util/wrap-list-items')\nvar spread = require('../util/list-items-spread')\n\nfunction list(h, node) {\n  var ordered = node.tagName === 'ol'\n  var start = null\n  var children\n\n  if (ordered) {\n    start = has(node, 'start') ? node.properties.start : 1\n  }\n\n  children = wrapListItems(h, node)\n\n  return h(\n    node,\n    'list',\n    {ordered: ordered, start: start, spread: spread(children)},\n    children\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/list.js"
  },
  "{72E71174-C27A-48DA-91BC-FD90EFF4EEEC}": {
    "source": "'use strict'\n\nmodule.exports = listItem\n\nvar is = require('hast-util-is-element')\nvar wrapChildren = require('../util/wrap-children')\n\nfunction listItem(h, node) {\n  var children = node.children\n  var head = children[0]\n  var checked = null\n  var checkbox\n  var grandchildren\n  var content\n\n  // Check if this node starts with a checkbox.\n  if (head && is(head, 'p')) {\n    grandchildren = head.children\n    checkbox = grandchildren[0]\n\n    if (\n      checkbox &&\n      is(checkbox, 'input') &&\n      (checkbox.properties.type === 'checkbox' ||\n        checkbox.properties.type === 'radio')\n    ) {\n      checked = Boolean(checkbox.properties.checked)\n    }\n  }\n\n  content = wrapChildren(h, node)\n\n  if (checked !== null) {\n    grandchildren = content[0] && content[0].children\n\n    // Remove text checkbox (enabled inputs are mapped to textual checkboxes).\n    head = grandchildren && grandchildren[0]\n\n    if (\n      head &&\n      head.type === 'text' &&\n      (head.value === h.checked || head.value === h.unchecked)\n    ) {\n      grandchildren.shift()\n    }\n\n    // Remove initial spacing if we previously found a checkbox.\n    head = grandchildren && grandchildren[0]\n\n    if (head && head.type === 'text' && head.value.charAt(0) === ' ') {\n      // Remove text with one space, or remove that one initial space.\n      if (head.value.length === 1) {\n        content[0].children = grandchildren.slice(1)\n      } else {\n        head.value = head.value.slice(1)\n      }\n    }\n  }\n\n  return h(\n    node,\n    'listItem',\n    {spread: content.length > 1, checked: checked},\n    content\n  )\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/list-item.js"
  },
  "{E605F3A1-2FA8-4F3D-BD1E-AD2DE568FB39}": {
    "source": "'use strict'\n\nmodule.exports = media\n\nvar visit = require('unist-util-visit')\nvar is = require('hast-util-is-element')\nvar toString = require('mdast-util-to-string')\nvar all = require('../all')\nvar resolve = require('../util/resolve')\nvar needed = require('../util/wrap').needed\n\nfunction media(h, node) {\n  var nodes = all(h, node)\n  var title = node.properties.title\n  var poster = is(node, 'video') ? node.properties.poster : null\n  var src = node.properties.src\n  var children = node.children\n  var length = children.length\n  var index = -1\n  var linkInFallbackContent = false\n  var child\n\n  // Find the source.\n  while (!src && ++index < length) {\n    child = children[index]\n\n    if (is(child, 'source')) {\n      src = child.properties.src\n    }\n  }\n\n  visit({type: 'root', children: nodes}, 'link', findLink)\n\n  // If the content links to something, or if it’s not phrasing…\n  if (linkInFallbackContent || needed(nodes)) {\n    return nodes\n  }\n\n  // If there’s a poster defined on the video, create an image.\n  if (poster) {\n    nodes = [\n      {\n        type: 'image',\n        title: null,\n        url: resolve(h, poster),\n        alt: toString({children: nodes})\n      }\n    ]\n  }\n\n  // Link to the media resource.\n  return {\n    type: 'link',\n    title: title || null,\n    url: resolve(h, src),\n    children: nodes\n  }\n\n  function findLink() {\n    linkInFallbackContent = true\n    return visit.EXIT\n  }\n}\n",
    "mapping": {
      "mdast-util-to-string": "{9DA1CD83-A3EC-439B-995E-9724E711E415}"
    },
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/media.js"
  },
  "{9DA1CD83-A3EC-439B-995E-9724E711E415}": {
    "source": "'use strict'\n\nmodule.exports = toString\n\n// Get the text content of a node.\n// Prefer the node’s plain-text fields, otherwise serialize its children,\n// and if the given value is an array, serialize the nodes in it.\nfunction toString(node) {\n  return (\n    (node &&\n      (node.value ||\n        node.alt ||\n        node.title ||\n        ('children' in node && all(node.children)) ||\n        ('length' in node && all(node)))) ||\n    ''\n  )\n}\n\nfunction all(values) {\n  var result = []\n  var length = values.length\n  var index = -1\n\n  while (++index < length) {\n    result[index] = toString(values[index])\n  }\n\n  return result.join('')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/mdast-util-to-string/index.js"
  },
  "{FE6F5C03-3E6D-408D-8164-6A884275DC11}": {
    "source": "{\n  \"_from\": \"mdast-util-to-string@^1.0.0\",\n  \"_id\": \"mdast-util-to-string@1.1.0\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-jVU0Nr2B9X3MU4tSK7JP1CMkSvOj7X5l/GboG1tKRw52lLF1x2Ju92Ms9tNetCcbfX3hzlM73zYo2NKkWSfF/A==\",\n  \"_location\": \"/mdast-util-to-string\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"range\",\n    \"registry\": true,\n    \"raw\": \"mdast-util-to-string@^1.0.0\",\n    \"name\": \"mdast-util-to-string\",\n    \"escapedName\": \"mdast-util-to-string\",\n    \"rawSpec\": \"^1.0.0\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"^1.0.0\"\n  },\n  \"_requiredBy\": [\n    \"/hast-util-to-mdast\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/mdast-util-to-string/-/mdast-util-to-string-1.1.0.tgz\",\n  \"_shasum\": \"27055500103f51637bd07d01da01eb1967a43527\",\n  \"_spec\": \"mdast-util-to-string@^1.0.0\",\n  \"_where\": \"C:\\\\bin\\\\github\\\\markdown-translate\\\\node_modules\\\\hast-util-to-mdast\",\n  \"author\": {\n    \"name\": \"Titus Wormer\",\n    \"email\": \"tituswormer@gmail.com\",\n    \"url\": \"https://wooorm.com\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/syntax-tree/mdast-util-to-string/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"contributors\": [\n    {\n      \"name\": \"Titus Wormer\",\n      \"email\": \"tituswormer@gmail.com\",\n      \"url\": \"https://wooorm.com\"\n    }\n  ],\n  \"dependencies\": {},\n  \"deprecated\": false,\n  \"description\": \"mdast utility to get the plain text content of a node\",\n  \"devDependencies\": {\n    \"browserify\": \"^16.0.0\",\n    \"nyc\": \"^15.0.0\",\n    \"prettier\": \"^1.0.0\",\n    \"remark-cli\": \"^7.0.0\",\n    \"remark-preset-wooorm\": \"^6.0.0\",\n    \"tape\": \"^4.4.0\",\n    \"tinyify\": \"^2.0.0\",\n    \"xo\": \"^0.27.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/unified\"\n  },\n  \"homepage\": \"https://github.com/syntax-tree/mdast-util-to-string#readme\",\n  \"keywords\": [\n    \"unist\",\n    \"mdast\",\n    \"mdast-util\",\n    \"util\",\n    \"utility\",\n    \"markdown\",\n    \"node\",\n    \"string\",\n    \"serialize\"\n  ],\n  \"license\": \"MIT\",\n  \"name\": \"mdast-util-to-string\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 100,\n    \"functions\": 100,\n    \"branches\": 100\n  },\n  \"prettier\": {\n    \"tabWidth\": 2,\n    \"useTabs\": false,\n    \"singleQuote\": true,\n    \"bracketSpacing\": false,\n    \"semi\": false,\n    \"trailingComma\": \"none\"\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"preset-wooorm\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/syntax-tree/mdast-util-to-string.git\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build-bundle && npm run build-mangle\",\n    \"build-bundle\": \"browserify . -s mdastUtilToString > mdast-util-to-string.js\",\n    \"build-mangle\": \"browserify . -s mdastUtilToString -p tinyify > mdast-util-to-string.min.js\",\n    \"format\": \"remark . -qfo && prettier --write \\\"**/*.js\\\" && xo --fix\",\n    \"test\": \"npm run format && npm run build && npm run test-coverage\",\n    \"test-api\": \"node test\",\n    \"test-coverage\": \"nyc --reporter lcov tape test.js\"\n  },\n  \"version\": \"1.1.0\",\n  \"xo\": {\n    \"prettier\": true,\n    \"esnext\": false,\n    \"ignore\": [\n      \"mdast-util-to-string.js\"\n    ]\n  }\n}\n",
    "path": "{markdown-translate}/node_modules/mdast-util-to-string/package.json"
  },
  "{F0FAD8B2-03C1-439C-BA50-CBBF2114094F}": {
    "source": "'use strict'\n\nmodule.exports = paragraph\n\nvar all = require('../all')\n\nfunction paragraph(h, node) {\n  var children = node.children\n  var nodes = all(h, node)\n\n  if (children && children.length !== 0 && nodes.length === 0) {\n    return\n  }\n\n  return h(node, 'paragraph', nodes)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/paragraph.js"
  },
  "{BC172B2F-2E3B-46EC-A31F-4D2886F90F77}": {
    "source": "'use strict'\n\nmodule.exports = q\n\nvar all = require('../all')\n\nfunction q(h, node) {\n  var expected = h.quotes[h.qNesting % h.quotes.length]\n  var open = expected.length === 1 ? expected : expected.charAt(0)\n  var close = expected.length === 1 ? expected : expected.charAt(1)\n  var contents\n  var head\n  var tail\n\n  h.qNesting++\n  contents = all(h, node)\n  h.qNesting--\n\n  head = contents[0]\n  tail = contents[contents.length - 1]\n\n  if (head && head.type === 'text') {\n    head.value = open + head.value\n  } else {\n    contents.unshift({type: 'text', value: open})\n  }\n\n  if (tail && tail.type === 'text') {\n    tail.value += close\n  } else {\n    contents.push({type: 'text', value: close})\n  }\n\n  return contents\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/q.js"
  },
  "{3E78622B-A17E-4EA2-9E74-5EA73F6EAB40}": {
    "source": "'use strict'\n\nmodule.exports = root\n\nvar all = require('../all')\nvar wrap = require('../util/wrap')\n\nfunction root(h, node) {\n  var children = all(h, node)\n\n  if (h.document || wrap.needed(children)) {\n    children = wrap(children)\n  }\n\n  return h(node, 'root', children)\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/root.js"
  },
  "{D351169B-4FD8-4452-B283-6BDEC777B169}": {
    "source": "'use strict'\n\nmodule.exports = row\n\nvar all = require('../all')\n\nfunction row(h, node) {\n  return h(node, 'tableRow', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/table-row.js"
  },
  "{EA9B9AF8-B6DB-430C-92BD-7FA504E7C871}": {
    "source": "'use strict'\n\nvar findSelectedOptions = require('../util/find-selected-options')\nvar wrapText = require('../util/wrap-text')\n\nmodule.exports = select\n\nfunction select(h, node) {\n  var values = findSelectedOptions(h, node)\n  var length = values.length\n  var index = -1\n  var results = []\n  var value\n\n  while (++index < length) {\n    value = values[index]\n    results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0])\n  }\n\n  if (results.length !== 0) {\n    return h(node, 'text', wrapText(h, results.join(', ')))\n  }\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/select.js"
  },
  "{AAFC5C95-5D21-454E-A999-F24182DBFFC6}": {
    "source": "'use strict'\n\nmodule.exports = strong\n\nvar all = require('../all')\n\nfunction strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/strong.js"
  },
  "{DA02DE62-336D-405C-AA36-7A869901DF33}": {
    "source": "'use strict'\n\nmodule.exports = table\n\nvar xtend = require('xtend')\nvar visit = require('unist-util-visit')\nvar all = require('../all')\n\nfunction table(h, node) {\n  var info = inspect(node)\n  return h(node, 'table', {align: info.align}, toRows(all(h, node), info))\n}\n\n// Infer whether the HTML table has a head and how it aligns.\nfunction inspect(node) {\n  var headless = true\n  var align = []\n  var rowIndex = 0\n  var cellIndex = 0\n\n  visit(node, 'element', visitor)\n\n  return {align: align, headless: headless}\n\n  function visitor(child) {\n    var name = child.tagName\n\n    // If there is a `thead`, assume there is a header row.\n    if (name === 'thead') {\n      headless = false\n    } else if (name === 'tr') {\n      rowIndex++\n      cellIndex = 0\n    } else if (name === 'th' || name === 'td') {\n      if (!align[cellIndex]) {\n        align[cellIndex] = child.properties.align || null\n      }\n\n      // If there is a th in the first row, assume there is a header row.\n      if (headless && rowIndex < 2 && child.tagName === 'th') {\n        headless = false\n      }\n\n      cellIndex++\n    }\n  }\n}\n\n// Ensure the rows are properly structured.\nfunction toRows(rows, info) {\n  var nodes = []\n  var length = rows.length\n  var index = -1\n  var node\n  var queue\n\n  // Add an empty header row.\n  if (info.headless) {\n    add(tableRow([]))\n  }\n\n  while (++index < length) {\n    node = rows[index]\n\n    if (node.type === 'tableRow') {\n      flush()\n      add(node)\n    } else {\n      queue = (queue || []).concat(node)\n    }\n  }\n\n  flush()\n\n  return nodes\n\n  function flush() {\n    if (queue) {\n      add(tableRow(queue))\n      queue = undefined\n    }\n  }\n\n  function add(node) {\n    nodes.push(cells(node, info))\n  }\n}\n\n// Ensure the cells in a row are properly structured.\nfunction cells(row, info) {\n  var columnCount = info.align.length\n  var nodes = []\n  var cells = row.children\n  var length = cells.length\n  var index = -1\n  var node\n  var queue\n\n  while (++index < length) {\n    node = cells[index]\n\n    if (node.type === 'tableCell') {\n      flush()\n      nodes.push(node)\n    } else {\n      queue = (queue || []).concat(node)\n    }\n  }\n\n  flush()\n\n  index = nodes.length\n  length = columnCount + 1\n\n  while (++index < length) {\n    nodes.push(tableCell([]))\n  }\n\n  return xtend(row, {children: nodes})\n\n  function flush() {\n    if (queue) {\n      nodes.push(tableCell(queue))\n      queue = undefined\n    }\n  }\n}\n\nfunction tableRow(children) {\n  return {type: 'tableRow', children: children}\n}\n\nfunction tableCell(children) {\n  return {type: 'tableCell', children: children}\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/table.js"
  },
  "{2340AD6F-BC1D-4A60-9FE6-D7C1F0F08825}": {
    "source": "'use strict'\n\nmodule.exports = text\n\nvar wrapText = require('../util/wrap-text')\n\nfunction text(h, node) {\n  return h(node, 'text', wrapText(h, node.value))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/text.js"
  },
  "{47BF37A3-7D3C-4E77-A179-B3D5FF129BEC}": {
    "source": "'use strict'\n\nvar toText = require('hast-util-to-text')\nvar wrapText = require('../util/wrap-text')\n\nmodule.exports = textarea\n\nfunction textarea(h, node) {\n  return h(node, 'text', wrapText(h, toText(node)))\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/textarea.js"
  },
  "{4DAB03E3-E0EB-488C-BD6E-1996B2FBA0C8}": {
    "source": "'use strict'\n\nmodule.exports = thematicBreak\n\nfunction thematicBreak(h, node) {\n  return h(node, 'thematicBreak')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/thematic-break.js"
  },
  "{D7C8B167-06AC-4F31-B099-FC9AF9D95B7A}": {
    "source": "'use strict'\n\nmodule.exports = zws\n\nfunction zws(h, node) {\n  return h(node, 'text', '\\u200B')\n}\n",
    "mapping": {},
    "path": "{markdown-translate}/node_modules/hast-util-to-mdast/lib/handlers/wbr.js"
  },
  "{4670A633-2F0A-4DB7-ADF1-C90EEE30E006}": {
    "source": "const request = require('httprequest')\r\n\r\n/**\r\n * 翻訳機を生成する生成器\r\n * @param {string} api Google Apps Script の URL\r\n * @returns {functon} translator 翻訳機\r\n */\r\nfunction generator(api) {\r\n    /**\r\n     * 翻訳機\r\n     * @param {string} text 原文\r\n     * @param {string} [target=\"en\"] 翻訳先の言語 (デフォルトは \"en\")\r\n     * @param {string} [source] 原文の言語 (デフォルトは自動推測)\r\n     * @returns\r\n     */\r\n    function translator(content, options) {\r\n        try {\r\n            const { target = 'en', source, contentType } = options\r\n            const response = request.post(api, { data: { content, source, target, contentType } }, (result, status) => {\r\n                console.debug(() => [result, status])\r\n                return result\r\n            })\r\n            // console.debug(() => response)\r\n            const { responseText } = response\r\n            const { result } = JSON.parse(responseText)\r\n            return result\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    return translator\r\n}\r\n\r\nmodule.exports = generator\r\n",
    "mapping": {},
    "path": "{markdown-translate}/wes_modules/translate/index.js"
  },
  "{B678FC5B-9D47-4421-8668-D28E22A9064A}": {
    "source": "{\n  \"name\": \"translate\",\n  \"version\": \"0.1.1\",\n  \"description\": \"translate google apps script\",\n  \"main\": \"./index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"wes bundle /src/translate\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/translate.git\"\n  },\n  \"keywords\": [\n    \"translate\",\n    \"google\",\n    \"apps\",\n    \"script\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/translate/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/translate#readme\"\n}",
    "path": "{markdown-translate}/wes_modules/translate/package.json"
  },
  "{0593370E-A10C-4C89-8051-3D20B7123A73}": {
    "source": "MIT License\n\nCopyright (c) 2020 wachaon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "mapping": {},
    "path": "{markdown-translate}/LICENSE"
  },
  "{A4A4A0BD-6BF7-4857-88B8-D603DBCB3E53}": {
    "source": "# *markdown-translate*\r\n\r\n*markdown-translate* は *markdown* の体裁を比較的維持しながら翻訳する *wes library* です。\r\n\r\nこの [*README*](../README.md) の原文は日本語になります。日本語以外は機械翻訳の文章になります。\r\n他言語の文章は下記から選択してください。\r\n\r\n<!-- translate links document -->\r\n\r\n## インストール\r\n\r\n```sh\r\nwes install @wachaon/markdown-translate --bare\r\n```\r\n\r\n## usage\r\n\r\n*google apps script* でプロジェクトを作成して次の `doPost` 関数を定義してデプロイしてください。\r\n\r\n```javascript\r\nfunction doPost(event_object) {\r\n    const parameter = JSON.parse(event_object.postData.getDataAsString());\r\n    const result = LanguageApp.translate(\r\n        parameter.content,\r\n        parameter.source,\r\n        parameter.target,\r\n        { contentType: parameter.contentType }\r\n    );\r\n \r\n    const output = ContentService.createTextOutput();\r\n    output.setMimeType(ContentService.MimeType.JSON);\r\n    output.setContent(JSON.stringify({ result }));\r\n \r\n    return output;\r\n}\r\n```\r\n\r\n*google apps script* デプロイして生成された *url* を *api key* として *markdown-translate* に渡してください。\r\n\r\n```javascript\r\nimport { readFileSync } from 'filesystem'\r\nimport { resolve } from 'pathname'\r\n\r\nimport translate from 'markdown-translate'\r\n\r\nconst { api } = readFileSync(resolve(process.cwd(), 'api.json'), 'auto')\r\nconst options = {\r\n    src: resolve(process.cwd(), 'docs', 'README.md'),\r\n    langs: ['en', 'fr']\r\n}\r\n\r\ntranslate(api, options)\r\n```\r\n## 仕様\r\n\r\n*markdown-translate* に渡す引数は次になります。\r\n\r\n| 名前      | 型         | 説明           |\r\n| --------- | ---------- | -------------- |\r\n| `api`     | `{string}` | *api key*      |\r\n| `options` | `{object}` | オプション引数 |\r\n\r\n`options` は以下のメンバーの設定が出来ます。\r\n\r\n| 名前     | 型           | 説明                     | 規定値                                |\r\n| -------- | ------------ | ------------------------ | ------------------------------------- |\r\n| `src`    | `{string}`   | 原文のファイルパス       | `resolve(process.cwd(), 'README.md')` |\r\n| `origin` | `{string}`   | 原文の言語               | `undefinde`                           |\r\n| `dist`   | `{string}`   | 出力先のディレクトリパス | `dirname(src)`                        |\r\n| `langs`  | `{string[]}` | 翻訳する言語             | `['en']`                              |\r\n| `cache`  | `{string}`   | 翻訳履歴のファイルパス   | `resolve(Dist, 'cache.json')`         |\r\n\r\n## 文章作成でのルール\r\n\r\n*markdown-translate* では意図的に翻訳しない要素があります。\r\n`Code` と `InlineCode` は翻訳しません。また `Emphasis` も翻訳しません。  \r\n`Emphasis` は翻訳したくない固有名詞に使用してください。\r\n",
    "mapping": {},
    "path": "{markdown-translate}/README.md"
  }
}